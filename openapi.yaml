# SRE 平台 API 規格書 (SSOT)
# 版本: 3.1.0
# 更新日期: 2025-09-18
# 描述: 此文件為 SRE 平台前端與後端之間的 API 契約唯一真實來源 (Single Source of Truth)，
#      根據 pages.md 的全面分析進行了重構。
openapi: 3.1.0
info:
  title: SRE 平台 - API 規格書
  description: |
    本 API 規格為 SRE 平台前後端開發的統一數據契約。

    ## 主要功能模組
    - **身份與存取管理**：用戶、團隊、角色和權限管理
    - **資源管理**：基礎設施資源監控和群組管理
    - **事件管理**：告警規則、靜音規則和事件處理
    - **自動化中心**：腳本管理、排程任務和執行日誌
    - **儀表板**：基礎設施洞察和 SRE 戰情室
    - **通知管理**：通知策略、管道和歷史記錄
    - **分析中心**：容量規劃和性能分析
    - **平台設定**：標籤管理、郵件設定、身份驗證

    它定義了所有資源、事件、自動化、管理等模組的介面，
    並遵循 RESTful 設計原則與專案開發規範。
  version: "3.1.0"
  contact:
    name: SRE 平台開發團隊
    email: sre-platform-dev@detectviz.com
    url: https://github.com/detectviz/sre-platform
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://detectviz.com/terms

servers:
  - url: /api/v1
    description: 相對路徑 (適用於代理配置)

# ============================================
# 擴展屬性 (Vendor Extensions)
# ============================================
x-event-lifecycle:
  # 事件狀態機契約
  states: [new, acknowledged, resolved, silenced]
  transitions:
    - { from: new, to: acknowledged, action: "確認" }
    - { from: acknowledged, to: resolved, action: "解決" }
    - { from: new, to: silenced, action: "靜音" }
    - { from: acknowledged, to: silenced, action: "靜音" }

# ============================================
# API 標籤 (Tags)
# ============================================
tags:
  - name: 系統 (System)
    description: "核心系統功能，如健康檢查。"
  - name: 身份驗證 (Auth)
    description: "使用者登入、登出與 SSO 相關功能 (Keycloak 代理)。"
  - name: 儀表板 (Dashboards)
    description: "儀表板管理與資料視覺化 (Grafana 代理)。"
  - name: 事件管理 (Event Management)
    description: "事件、事件規則、靜音規則的管理 (Grafana 代理)。"
  - name: 資源管理 (Resource Management)
    description: "平台納管的基礎設施資源 (CMDB) 與資源群組。"
  - name: 自動化中心 (Automation)
    description: "自動化腳本、排程任務與執行日誌的管理。"
  - name: 分析中心 (Analysis)
    description: "容量規劃、AI 分析等決策支援功能。"
  - name: 平台設定 (Platform Settings)
    description: "平台層級的管理與設定功能，如標籤治理、權限角色等。"
  - name: 個人中心 (User Profile)
    description: "使用者個人資料與偏好設定。"
  - name: 通知管理 (Notification Management)
    description: "通知管道、策略與歷史記錄的管理。"

# ============================================
# API 路徑與端點 (Paths & Endpoints)
# ============================================
paths:
  # ============================================
  # 系統 (System)
  # ============================================
  /healthz:
    get:
      tags: [系統 (System)]
      summary: 服務健康檢查
      operationId: checkHealth
      security: []
      responses: { "200": { description: 服務健康 } }
  /readyz:
    get:
      tags: [系統 (System)]
      summary: 服務就緒檢查
      operationId: checkReadiness
      security: []
      responses: { "200": { description: 服務就緒 } }

  # ============================================
  # 身份驗證 (Auth)
  # ============================================
  /auth/sso/redirect:
    get:
      tags: [身份驗證 (Auth)]
      summary: 獲取 SSO 登入重定向 URL
      operationId: getSsoRedirectUrl
      security: []
      responses: { "200": { description: "成功獲取重定向 URL" } }
  /auth/sso/callback:
    get:
      tags: [身份驗證 (Auth)]
      summary: SSO 登入回呼
      operationId: handleSsoCallback
      security: []
      responses: { "302": { description: "登入成功，重定向至前端應用" } }
  /auth/sso/logout:
    post:
      tags: [身份驗證 (Auth)]
      summary: SSO 登出
      operationId: ssoLogout
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功取得登出 URL" } }

  # ============================================
  # 個人中心 (User Profile)
  # ============================================
  /users/me:
    get:
      tags: [個人中心 (User Profile)]
      summary: 獲取當前登入使用者資訊
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /users/me/preferences:
    get:
      tags: [個人中心 (User Profile)]
      summary: 獲取個人偏好設定
      operationId: getUserPreferences
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [個人中心 (User Profile)]
      summary: 更新個人偏好設定
      operationId: updateUserPreferences
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }

  # ============================================
  # 儀表板 (Dashboards)
  # ============================================
  /dashboards:
    get:
      tags: [儀表板 (Dashboards)]
      summary: 獲取儀表板列表
      operationId: listDashboards
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: category
          in: query
          schema:
            type: string
            enum: [infrastructure, business, operations, automation, custom]
        - name: search
          in: query
          schema:
            type: string
            description: 按名稱或描述搜尋儀表板
      responses:
        "200":
          description: 儀表板列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardCollection"
    post:
      tags: [儀表板 (Dashboards)]
      summary: 創建儀表板
      operationId: createDashboard
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardCreateRequest"
      responses:
        "201":
          description: 創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"

  /dashboards/{dashboardId}:
    get:
      tags: [儀表板 (Dashboards)]
      summary: 獲取單個儀表板
      operationId: getDashboard
      security: [{ bearerAuth: [] }]
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 儀表板資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
    put:
      tags: [儀表板 (Dashboards)]
      summary: 更新儀表板
      operationId: updateDashboard
      security: [{ bearerAuth: [] }]
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardUpdateRequest"
      responses:
        "200": { description: 更新成功 }
    delete:
      tags: [儀表板 (Dashboards)]
      summary: 刪除儀表板
      operationId: deleteDashboard
      security: [{ bearerAuth: [] }]
      parameters:
        - name: dashboardId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: 刪除成功 }

  /dashboards/stats:
    get:
      tags: [儀表板 (Dashboards)]
      summary: 獲取儀表板統計指標
      operationId: getDashboardStats
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 儀表板統計資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardStats"

  /infrastructure/stats:
    get:
      tags: [儀表板 (Dashboards)]
      summary: 獲取基礎設施統計
      operationId: getInfrastructureStats
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 基礎設施統計資料
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfrastructureStats"

  /infrastructure/resource-usage:
    get:
      tags: [儀表板 (Dashboards)]
      summary: 獲取資源使用率排行
      operationId: listInfrastructureResourceUsage
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 資源使用率資料
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceUsageCollection"

  /ai/risk-predictions:
    get:
      tags: [分析中心 (Analysis)]
      summary: 獲取 AI 風險預測
      operationId: listRiskPredictions
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: AI 風險預測清單
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RiskPredictionCollection"

  # ============================================
  # 平台設定 (Platform Settings) - 人員、團隊、角色
  # ============================================
  /users:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取人員列表
      operationId: listUsers
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /invitations:
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 邀請新人員
      operationId: inviteUser
      security: [{ bearerAuth: [] }]
      responses: { "202": { description: "邀請已成功發送" } }
  /users/{userId}:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取指定人員詳情
      operationId: getUser
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新人員的平台權限
      operationId: updateUserPlatformRoles
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除人員 (軟刪除)
      operationId: deleteUser
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /users/{userId}/internal-status:
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新人員的平台內部啟用狀態
      operationId: updateUserInternalStatus
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
  /teams:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取團隊列表
      operationId: listTeams
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建團隊
      operationId: createTeam
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /teams/{teamId}:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取團隊詳情
      operationId: getTeam
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新團隊
      operationId: updateTeam
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除團隊 (軟刪除)
      operationId: deleteTeam
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /roles:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取角色列表
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建角色
      operationId: createRole
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /roles/{roleId}:
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新角色
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除角色
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /permissions:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取所有可用權限列表
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /tags:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤治理規則列表
      operationId: listTagGovernanceRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建新的標籤治理規則
      operationId: createTagGovernanceRule
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /tags/{tagKeyId}/values:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤的允許值列表
      operationId: listTagAllowedValues
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /tags/compliance-report:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤合規性報告
      operationId: getTagComplianceReport
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /audit-logs:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取審計日誌
      operationId: getAuditLogs
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: action_type
          in: query
          description: 篩選特定操作類型 (例如 create、update、delete)
          schema: { type: string }
        - name: resource_type
          in: query
          description: 篩選特定資源類型 (例如 Incident、AlertRule)
          schema: { type: string }
        - name: result
          in: query
          description: 依執行結果篩選 (success、failure、partial)
          schema:
            type: string
            enum: [success, failure, partial]
        - name: risk_level
          in: query
          description: 依風險等級篩選 (low、medium、high、critical)
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: user_id
          in: query
          description: 指定操作者 ID
          schema: { type: string }
        - name: search
          in: query
          description: 關鍵字搜尋 (支援操作者、資源名稱、訊息)
          schema: { type: string }
        - name: start_time
          in: query
          description: 起始時間 (ISO 8601)
          schema: { type: string, format: date-time }
        - name: end_time
          in: query
          description: 結束時間 (ISO 8601)
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 審計日誌列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogCollection"

  # ============================================
  # 資源管理 (Resource Management)
  # ============================================
  /resources:
    get:
      tags: [資源管理 (Resource Management)]
      summary: 獲取資源列表
      operationId: listResources
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: status[]
          in: query
          description: 資源狀態多選篩選 (healthy、warning、critical、unknown)
          schema:
            type: array
            items:
              type: string
              enum: [healthy, warning, critical, unknown]
          style: form
          explode: true
        - name: type[]
          in: query
          description: 資源類型多選篩選 (server、database、gateway...)
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
        - name: environment[]
          in: query
          description: 依部署環境篩選 (production、staging 等)
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
        - name: region
          in: query
          description: 指定雲端區域或資料中心
          schema: { type: string }
        - name: team_id
          in: query
          description: 負責團隊 ID
          schema: { type: string }
        - name: group_id
          in: query
          description: 資源群組 ID (用於從群組列表下鑽)
          schema: { type: string }
        - name: tag[]
          in: query
          description: 指定標籤鍵值做為篩選條件，格式為 key:value
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
        - name: search
          in: query
          description: 關鍵字搜尋 (支援名稱、IP、標籤)
          schema: { type: string }
        - name: has_active_events
          in: query
          description: 僅回傳具有活躍事件的資源
          schema: { type: boolean }
        - name: last_check_before
          in: query
          description: 最後健康檢查時間上限 (ISO 8601)
          schema: { type: string, format: date-time }
        - name: last_check_after
          in: query
          description: 最後健康檢查時間下限 (ISO 8601)
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 資源列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceCollection"
  /resource-groups:
    get:
      tags: [資源管理 (Resource Management)]
      summary: 獲取資源群組列表
      operationId: listResourceGroups
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: search
          in: query
          description: 依群組名稱或描述關鍵字搜尋
          schema: { type: string }
        - name: team_id
          in: query
          description: 指定負責團隊 ID
          schema: { type: string }
        - name: include_health_summary
          in: query
          description: 是否回傳預先計算的健康統計
          schema: { type: boolean, default: false }
      responses:
        "200":
          description: 資源群組列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGroupCollection"

  # ============================================
  # 事件管理 (Event Management)
  # ============================================
  /events:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件列表
      operationId: listEvents
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: status[]
          in: query
          description: "事件狀態多選篩選。對應 UI「狀態」多選篩選器，可同時勾選多個狀態標籤。Grafana Alertmanager 原始狀態 `firing` 會在此映射為 `new`，以保持與前端 UI 與資料庫欄位的一致性。"
          schema:
            type: array
            items:
              type: string
              enum: [new, acknowledged, resolved, silenced]
          style: form
          explode: true
          example: [new, acknowledged]
        - name: severity[]
          in: query
          description: "事件嚴重度多選篩選。對應 UI「嚴重度」多選篩選器，可同時勾選多個嚴重度。"
          schema:
            type: array
            items:
              type: string
              enum: [critical, warning, info]
          style: form
          explode: true
          example: [critical, warning]
        - name: incident_id
          in: query
          description: 關聯事故ID篩選
          schema:
            type: string
        - name: resource_name
          in: query
          description: 資源名稱關鍵字搜尋
          schema:
            type: string
        - name: search
          in: query
          description: "全文搜尋關鍵字。對應 UI 上方的搜尋列，支援事件標題、描述與註記的快速查找。"
          schema:
            type: string
          example: "database connection timeout"
        - name: source
          in: query
          description: 事件來源篩選
          schema:
            type: string
        - name: business_impact[]
          in: query
          description: 商業衝擊等級多選篩選
          schema:
            type: array
            items:
              type: string
              enum: [critical, high, medium, low]
          style: form
          explode: true
        - name: service
          in: query
          description: 受影響服務名稱篩選
          schema:
            type: string
        - name: storm_group
          in: query
          description: 指定 Storm 分組識別碼
          schema:
            type: string
        - name: automation_run_id
          in: query
          description: 關聯自動化執行紀錄 ID
          schema:
            type: string
        - name: rule_id
          in: query
          description: 觸發規則 ID 篩選
          schema:
            type: string
        - name: started_from
          in: query
          description: "事件發生時間 (started_at) 起始範圍。對應 UI「時間快速篩選」的自訂起始時間，採 ISO 8601 格式。"
          schema:
            type: string
            format: date-time
          example: "2024-06-01T00:00:00Z"
        - name: started_to
          in: query
          description: "事件發生時間 (started_at) 結束範圍。對應 UI「時間快速篩選」的自訂結束時間，採 ISO 8601 格式。"
          schema:
            type: string
            format: date-time
          example: "2024-06-30T23:59:59Z"
        - name: started_range
          in: query
          description: "事件發生時間 (started_at) RFC3339 區間語法，例如 `開始/結束`。對應 UI 進階篩選中的時間條件，可與快速篩選互補。"
          schema:
            type: string
          example: "2024-06-01T00:00:00Z/2024-06-30T23:59:59Z"
        - name: sort_by
          in: query
          description: 排序欄位
          schema:
            type: string
        - name: sort_order
          in: query
          description: 排序順序
          schema:
            type: string
            enum: [asc, desc]
      responses:
        "200":
          description: "回傳套用篩選與排序後的事件列表，以及對應的分頁資訊。"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventCollection"
  /events/{eventId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件詳情
      operationId: getEvent
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /events/{eventId}/ai-analysis:
    post:
      tags: [事件管理 (Event Management)]
      summary: 觸發 AI 事件分析
      description: "建立 AI 分析報告草稿並非同步執行分析流程。"
      operationId: triggerEventAIAnalysis
      security: [{ bearerAuth: [] }]
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AIAnalysisRequest"
      responses:
        "202":
          description: 已建立分析報告草稿
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIAnalysisCreationResponse"
        "400": { description: 請求格式錯誤 }
        "500": { description: 伺服器發生錯誤 }
  /events/{eventId}/comments:
    post:
      tags: [事件管理 (Event Management)]
      summary: 為事件新增註記
      description: "為指定的事件添加一條評論或處理歷史記錄。支援 Markdown 和 @提及。"
      operationId: addEventComment
      security: [{ bearerAuth: [] }]
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventCommentRequest"
      responses:
        "201":
          description: "註記新增成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHistory"
  /ai/analysis-reports/{reportId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 取得 AI 事件分析報告
      description: "依 report_id 查詢非同步分析的最新狀態與內容。"
      operationId: getAIAnalysisReport
      security: [{ bearerAuth: [] }]
      parameters:
        - name: reportId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 查詢成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIAnalysisReport"
        "404":
          description: 找不到對應的報告
  /incidents:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事故列表
      description: "提供事故清單，支援依狀態、嚴重度、商業衝擊、服務等條件進行篩選，對應事故列表頁面。"
      operationId: listIncidents
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: status[]
          in: query
          description: 事故狀態多選篩選
          schema:
            type: array
            items:
              type: string
              enum: [investigating, identified, monitoring, resolved]
          style: form
          explode: true
        - name: severity[]
          in: query
          description: 嚴重度多選篩選
          schema:
            type: array
            items:
              type: string
              enum: [critical, high, medium, low]
          style: form
          explode: true
        - name: business_impact[]
          in: query
          description: 商業衝擊等級多選篩選
          schema:
            type: array
            items:
              type: string
              enum: [critical, high, medium, low]
          style: form
          explode: true
        - name: service
          in: query
          description: 受影響服務名稱
          schema: { type: string }
        - name: resource_name
          in: query
          description: 主要資源名稱關鍵字
          schema: { type: string }
        - name: storm_group
          in: query
          description: Storm 分組識別碼
          schema: { type: string }
        - name: automation_script_id
          in: query
          description: 關聯自動化腳本 ID
          schema: { type: string }
        - name: automation_run_id
          in: query
          description: 關聯自動化執行紀錄 ID
          schema: { type: string }
        - name: search
          in: query
          description: 關鍵字搜尋 (支援摘要、標籤、註解)
          schema: { type: string }
        - name: created_from
          in: query
          description: 創建時間起始範圍 (ISO 8601)
          schema: { type: string, format: date-time }
        - name: created_to
          in: query
          description: 創建時間結束範圍 (ISO 8601)
          schema: { type: string, format: date-time }
      responses:
        "200":
          description: 事故列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentCollection"
    post:
      tags: [事件管理 (Event Management)]
      summary: 合併多個事件為一個事故
      description: "將一組關聯的事件合併成一個更高層級的事故，以便集中處理和追蹤。"
      operationId: createIncidentFromEvents
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncidentCreateRequest"
      responses:
        "201":
          description: "事故創建成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /incidents/{incidentId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 取得事故詳情
      operationId: getIncident
      security: [{ bearerAuth: [] }]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
        - name: include_events
          in: query
          description: 是否包含關聯事件資料
          schema: { type: boolean, default: true }
      responses:
        "200":
          description: 事故詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /event-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則列表
      operationId: listEventRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [事件管理 (Event Management)]
      summary: 創建事件規則
      operationId: createEventRule
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /event-rules/{ruleId}:
    put:
      tags: [事件管理 (Event Management)]
      summary: 更新事件規則
      operationId: updateEventRule
      security: [{ bearerAuth: [] }]
      parameters:
        - name: ruleId
          in: path
          required: true
          schema: { type: string }
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [事件管理 (Event Management)]
      summary: 刪除事件規則
      operationId: deleteEventRule
      security: [{ bearerAuth: [] }]
      parameters:
        - name: ruleId
          in: path
          required: true
          schema: { type: string }
      responses: { "204": { description: "刪除成功" } }
  /event-rule-templates:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則範本列表
      operationId: listEventRuleTemplates
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /event-rules/scope-preview:
    post:
      tags: [事件管理 (Event Management)]
      summary: 預覽事件規則影響範圍
      operationId: previewEventRuleScope
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /event-rules/metrics:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則可用指標
      operationId: listEventRuleMetrics
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }

  # ============================================
  # 自動化中心 (Automation)
  # ============================================
  /scripts:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取自動化腳本列表
      operationId: listAutomationScripts
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: category
          in: query
          schema:
            type: string
            description: 依腳本分類過濾
        - name: is_enabled
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
            description: 按名稱或描述搜尋
      responses:
        "200":
          description: 腳本列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationScriptCollection"
    post:
      tags: [自動化中心 (Automation)]
      summary: 創建自動化腳本
      operationId: createAutomationScript
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationScriptCreateRequest"
      responses:
        "201":
          description: 創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationScript"

  /scripts/{scriptId}:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取腳本詳情
      operationId: getAutomationScript
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scriptId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 腳本資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationScript"
    put:
      tags: [自動化中心 (Automation)]
      summary: 更新腳本
      operationId: updateAutomationScript
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scriptId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationScriptUpdateRequest"
      responses:
        "200": { description: 更新成功 }
    delete:
      tags: [自動化中心 (Automation)]
      summary: 刪除腳本
      operationId: deleteAutomationScript
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scriptId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: 刪除成功 }

  /scripts/{scriptId}/execute:
    post:
      tags: [自動化中心 (Automation)]
      summary: 觸發腳本執行
      operationId: executeAutomationScript
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scriptId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationScriptExecuteRequest"
      responses:
        "202":
          description: 執行請求已接受
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationRun"

  /schedules:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取排程任務列表
      operationId: listAutomationSchedules
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: is_enabled
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: 排程任務列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationScheduleCollection"
    post:
      tags: [自動化中心 (Automation)]
      summary: 創建排程任務
      operationId: createAutomationSchedule
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationScheduleCreateRequest"
      responses:
        "201":
          description: 創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationSchedule"

  /schedules/{scheduleId}:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取排程任務詳情
      operationId: getAutomationSchedule
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 排程資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationSchedule"
    put:
      tags: [自動化中心 (Automation)]
      summary: 更新排程任務
      operationId: updateAutomationSchedule
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutomationScheduleUpdateRequest"
      responses:
        "200": { description: 更新成功 }
    delete:
      tags: [自動化中心 (Automation)]
      summary: 刪除排程任務
      operationId: deleteAutomationSchedule
      security: [{ bearerAuth: [] }]
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: 刪除成功 }

  /automation-runs:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取自動化執行紀錄
      operationId: listAutomationRuns
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, running, success, failed, cancelled, timeout]
        - name: script_id
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 執行紀錄列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationRunCollection"

  /automation-runs/{runId}:
    get:
      tags: [自動化中心 (Automation)]
      summary: 獲取單筆自動化執行詳情
      operationId: getAutomationRun
      security: [{ bearerAuth: [] }]
      parameters:
        - name: runId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 執行詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutomationRun"
  /silence-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取靜音規則列表 (一次性)
      operationId: listSilenceRules
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 靜音規則列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SilenceCollection"
    post:
      tags: [事件管理 (Event Management)]
      summary: 根據事件快速建立一次性靜音
      operationId: createSilenceFromEvent
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SilenceCreateRequest"
      responses:
        "201":
          description: 靜音規則建立成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Silence"
  /recurring-silence-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取週期性靜音規則列表
      operationId: listRecurringSilenceRules
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 週期性靜音規則列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecurringSilenceRuleCollection"
    post:
      tags: [事件管理 (Event Management)]
      summary: 創建週期性靜音規則
      operationId: createRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecurringSilenceRuleCreateRequest"
      responses:
        "201":
          description: 週期性靜音規則建立成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecurringSilenceRule"
  /recurring-silence-rules/{ruleId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取單一週期性靜音規則
      operationId: getRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [事件管理 (Event Management)]
      summary: 更新週期性靜音規則
      operationId: updateRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [事件管理 (Event Management)]
      summary: 刪除週期性靜音規則
      operationId: deleteRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }

  # ============================================
  # 通知管理 (Notification Management)
  # ============================================
  /notification-policies:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知策略列表
      operationId: listNotificationPolicies
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: search
          in: query
          description: 依策略名稱或描述關鍵字搜尋
          schema: { type: string }
        - name: resource_group_id
          in: query
          schema: { type: string }
        - name: responsible_team_id
          in: query
          schema: { type: string }
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: is_enabled
          in: query
          schema: { type: boolean }
      responses:
        "200":
          description: 通知策略列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPolicyCollection"
    post:
      tags: [通知管理 (Notification Management)]
      summary: 建立通知策略
      operationId: createNotificationPolicy
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPolicyCreateRequest"
      responses:
        "201":
          description: 建立成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPolicy"
  /notification-policies/{policyId}:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 取得通知策略詳情
      operationId: getNotificationPolicy
      security: [{ bearerAuth: [] }]
      parameters:
        - name: policyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 通知策略詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPolicy"
    put:
      tags: [通知管理 (Notification Management)]
      summary: 更新通知策略
      operationId: updateNotificationPolicy
      security: [{ bearerAuth: [] }]
      parameters:
        - name: policyId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationPolicyUpdateRequest"
      responses:
        "200":
          description: 更新後的通知策略
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationPolicy"
    delete:
      tags: [通知管理 (Notification Management)]
      summary: 刪除通知策略
      operationId: deleteNotificationPolicy
      security: [{ bearerAuth: [] }]
      parameters:
        - name: policyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: 刪除成功 }
  /notification-channels:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知管道列表
      operationId: listNotificationChannels
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: type
          in: query
          schema:
            type: string
            enum: [email, slack, webhook, pagerduty, sms, line_notify, teams]
        - name: is_enabled
          in: query
          schema: { type: boolean }
        - name: search
          in: query
          description: 依名稱或描述搜尋
          schema: { type: string }
      responses:
        "200":
          description: 通知管道列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationChannelCollection"
    post:
      tags: [通知管理 (Notification Management)]
      summary: 建立通知管道
      operationId: createNotificationChannel
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationChannelCreateRequest"
      responses:
        "201":
          description: 建立成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationChannel"
  /notification-channels/{channelId}:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 取得通知管道詳情
      operationId: getNotificationChannel
      security: [{ bearerAuth: [] }]
      parameters:
        - name: channelId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 通知管道資訊
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationChannel"
    put:
      tags: [通知管理 (Notification Management)]
      summary: 更新通知管道
      operationId: updateNotificationChannel
      security: [{ bearerAuth: [] }]
      parameters:
        - name: channelId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationChannelUpdateRequest"
      responses:
        "200":
          description: 更新後的通知管道
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationChannel"
    delete:
      tags: [通知管理 (Notification Management)]
      summary: 刪除通知管道
      operationId: deleteNotificationChannel
      security: [{ bearerAuth: [] }]
      parameters:
        - name: channelId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204": { description: 刪除成功 }
  /notification-channels/{channelId}/test:
    post:
      tags: [通知管理 (Notification Management)]
      summary: 發送通知管道測試訊息
      operationId: testNotificationChannel
      security: [{ bearerAuth: [] }]
      parameters:
        - name: channelId
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: 測試請求已接受
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationChannelTestResponse"
  /notification-history:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知歷史記錄
      operationId: getNotificationHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, success, failed, delivered]
        - name: channel_id
          in: query
          schema: { type: string }
        - name: policy_id
          in: query
          schema: { type: string }
        - name: from
          in: query
          description: 起始時間 (ISO8601)
          schema: { type: string, format: date-time }
        - name: to
          in: query
          description: 結束時間 (ISO8601)
          schema: { type: string, format: date-time }
        - name: search
          in: query
          description: 依告警摘要或管道名稱搜尋
          schema: { type: string }
      responses:
        "200":
          description: "成功獲取通知歷史列表"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationHistoryCollection"
  /notification-history/{historyId}:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取單筆通知歷史詳情
      operationId: getNotificationHistoryDetail
      security: [{ bearerAuth: [] }]
      parameters:
        - name: historyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationHistory"
  /notification-history/{historyId}/resend:
    post:
      tags: [通知管理 (Notification Management)]
      summary: 重新發送單條失敗的通知
      operationId: resendNotification
      security: [{ bearerAuth: [] }]
      parameters:
        - name: historyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: "重送請求已接受"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResendResponse"

# ============================================
# 可重用元件 (Components)
# ============================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      name: page_size
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    SortByParam:
      name: sort_by
      in: query
      schema: { type: string }
    SortOrderParam:
      name: sort_order
      in: query
      schema: { type: string, enum: [asc, desc], default: desc }
  schemas:
    # 共用 Schema
    PaginationMeta:
      type: object
      properties:
        page: { type: integer, example: 1 }
        page_size: { type: integer, example: 20 }
        total: { type: integer, example: 120 }
        total_pages: { type: integer, example: 6 }

    # ============================================
    # 儀表板 Schemas
    # ============================================
    Dashboard:
      type: object
      required: [id, name, category, isDefault]
      properties:
        id: { type: string, example: "infra-overview" }
        name: { type: string, example: "基礎設施洞察" }
        description: { type: string }
        category:
          type: string
          enum: [infrastructure, business, operations, automation, custom]
        owner: { type: string, example: "SRE 平台團隊" }
        tags:
          type: array
          items: { type: string }
        viewers: { type: integer, example: 48 }
        favoriteCount: { type: integer, example: 32 }
        panelCount: { type: integer, example: 18 }
        status:
          type: string
          enum: [published, draft, archived]
        updatedAt: { type: string, format: date-time }
        isDefault: { type: boolean, default: false }
        isFeatured: { type: boolean, default: false }
        dataSources:
          type: array
          items: { type: string }
        thumbnailUrl:
          oneOf:
            - type: string
              format: uri
            - type: "null"
        targetPageKey:
          oneOf:
            - type: string
            - type: "null"
    DashboardCreateRequest:
      type: object
      required: [name, category]
      properties:
        name:
          type: string
          description: "資源名稱"
        description: { type: string }
        category:
          {
            type: string,
            enum: [infrastructure, business, operations, automation, custom],
          }
        owner: { type: string }
        tags:
          type: array
          items: { type: string }
        isDefault: { type: boolean }
        isFeatured: { type: boolean }
        dataSources:
          type: array
          items: { type: string }
        targetPageKey: { type: string }
    DashboardUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/DashboardCreateRequest"
    DashboardCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Dashboard"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    DashboardStats:
      type: object
      properties:
        openIncidents: { type: integer, example: 3 }
        openEvents: { type: integer, example: 18 }
        automationSuccessRate: { type: number, example: 0.92 }
        meanTimeToAckMinutes: { type: number, example: 6 }
        meanTimeToResolveMinutes: { type: number, example: 42 }
        errorBudgetBurnRate: { type: number, example: 0.18 }
        topServices:
          type: array
          items:
            type: object
            properties:
              service: { type: string }
              availability: { type: number }

    InfrastructureStats:
      type: object
      properties:
        serverCount: { type: integer, example: 127 }
        databaseCount: { type: integer, example: 18 }
        containerCount: { type: integer, example: 432 }
        serviceCount: { type: integer, example: 89 }
        serverTrend: { type: number, example: 2 }
        databaseTrend: { type: number, example: 0 }
        containerTrend: { type: number, example: 12 }
        serviceTrend: { type: number, example: 3 }

    ResourceUsageEntry:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type:
          type: string
          description: "資源類型"
        usage: { type: number, description: "百分比 0-100" }
        status: { type: string, enum: [healthy, warning, critical] }
    ResourceUsageCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ResourceUsageEntry"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"

    RiskPrediction:
      type: object
      properties:
        id: { type: string }
        resourceName: { type: string }
        riskLevel: { type: string, enum: [low, medium, high] }
        prediction: { type: string }
        impact: { type: string }
        recommendation: { type: string }
    RiskPredictionCollection:
      type: object
      properties:
        predictions:
          type: array
          items:
            $ref: "#/components/schemas/RiskPrediction"

    # ============================================
    # 自動化中心 Schemas
    # ============================================
    AutomationScript:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        language: { type: string, example: "python" }
        category: { type: string }
        owner: { type: string }
        repositoryUrl: { type: string, format: uri }
        commitHash: { type: string }
        version: { type: string }
        isEnabled: { type: boolean }
        executionCount: { type: integer }
        successRate: { type: integer, description: "0-100" }
        lastExecutedAt: { type: string, format: date-time, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
        parameters:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              type: { type: string }
              label: { type: string }
              required: { type: boolean }
              description: { type: string }
              defaultValue:
                oneOf:
                  - { type: string }
                  - { type: number }
                  - { type: boolean }
    AutomationScriptCreateRequest:
      type: object
      required: [name, language, repositoryUrl, commitHash]
      properties:
        name: { type: string }
        description: { type: string }
        language: { type: string, enum: [python, bash, powershell] }
        category: { type: string }
        repositoryUrl: { type: string, format: uri }
        commitHash: { type: string }
        version: { type: string }
        parameters:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              type: { type: string }
              label: { type: string }
              required: { type: boolean }
              defaultValue:
                oneOf:
                  - { type: string }
                  - { type: number }
                  - { type: boolean }
    AutomationScriptUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/AutomationScriptCreateRequest"
    AutomationScriptExecuteRequest:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties: true
        trigger:
          type: string
          enum: [manual, api, event]
        event_id:
          type: string
          description: 若由事件觸發，可帶入事件ID
    AutomationScriptCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AutomationScript"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"

    AutomationSchedule:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        scriptId: { type: string }
        cronExpression: { type: string }
        parameters: { type: object, additionalProperties: true }
        mode: { type: string, enum: [simple, advanced] }
        frequency: { type: string, nullable: true }
        timezone: { type: string, nullable: true }
        isEnabled: { type: boolean }
        lastStatus:
          {
            type: string,
            enum: [success, failed, pending, running],
            nullable: true,
          }
        lastRunAt: { type: string, format: date-time, nullable: true }
        nextRunAt: { type: string, format: date-time, nullable: true }
        creator: { type: string, nullable: true }
        createdAt: { type: string, format: date-time, nullable: true }
        updatedAt: { type: string, format: date-time, nullable: true }
    AutomationScheduleCreateRequest:
      type: object
      required: [name, scriptId, cronExpression]
      properties:
        name: { type: string }
        description: { type: string }
        scriptId: { type: string }
        cronExpression: { type: string }
        parameters: { type: object, additionalProperties: true }
        mode: { type: string, enum: [simple, advanced], default: simple }
        frequency: { type: string }
        timezone: { type: string }
        isEnabled: { type: boolean }
    AutomationScheduleUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/AutomationScheduleCreateRequest"
    AutomationScheduleCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AutomationSchedule"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"

    AutomationRun:
      type: object
      properties:
        id: { type: string }
        scriptId: { type: string }
        scheduleId: { type: string, nullable: true }
        status:
          {
            type: string,
            enum: [pending, running, success, failed, cancelled, timeout],
          }
        triggerType: { type: string, enum: [manual, scheduled, event, api] }
        triggerMetadata: { type: object, additionalProperties: true }
        startedAt: { type: string, format: date-time, nullable: true }
        finishedAt: { type: string, format: date-time, nullable: true }
        durationMs: { type: integer, nullable: true }
        output: { type: string, nullable: true }
        operator: { type: string, nullable: true }
    AutomationRunCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AutomationRun"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    # ============================================
    # 事件管理 Schemas
    # ============================================
    Event:
      type: object
      description: "代表一個完整的事件，包含所有用於UI展示的豐富化資訊"
      properties:
        id: { type: string, example: "evt_2a7d3e9f" }
        summary:
          type: string
          example: "CPU high on db-mysql-prod-02"
          description: "事件摘要"
        severity:
          type: string
          enum: [critical, warning, info]
          description: "事件嚴重度"
        status:
          type: string
          description: "事件狀態。Grafana Alertmanager 的 `firing` 狀態會轉換為 `new`，確保與 UI 與資料庫一致。"
          enum: [new, acknowledged, resolved, silenced]
          x-enum-varnames: [NEW, ACKNOWLEDGED, RESOLVED, SILENCED]
        source:
          type: string
          example: "Prometheus"
          description: "事件來源系統"
        service_name:
          oneOf:
            - type: string
            - type: "null"
          description: "受影響服務名稱"
        business_impact:
          oneOf:
            - type: string
              enum: [critical, high, medium, low]
            - type: "null"
          description: "商業衝擊等級"
        storm_group_id:
          oneOf:
            - type: string
            - type: "null"
          description: "Storm 協同處理分組識別"
        triggered_at: { type: string, format: "date-time" }
        acknowledged_at:
          oneOf:
            - type: string
              format: "date-time"
            - type: "null"
        resolved_at:
          oneOf:
            - type: string
              format: "date-time"
            - type: "null"
        assignee:
          type: object
          properties:
            id: { type: string, example: "usr_1a2b3c" }
            name: { type: string, example: "陳大文" }
        resource:
          type: object
          properties:
            id: { type: string, example: "res_b4c5d6" }
            name: { type: string, example: "db-mysql-prod-02" }
            type: { type: string, example: "DATABASE" }
        rule:
          type: object
          properties:
            id: { type: string, example: "rule_e7f8g9" }
            name: { type: string, example: "高 CPU 使用率" }
        trigger_details:
          type: object
          properties:
            threshold:
              type: string
              example: "CPU > 90%"
              description: "觸發閾值描述，對應資料庫欄位 trigger_threshold"
            value:
              type: string
              example: "92.5%"
              description: "當下量測值描述，對應資料庫欄位 detected_value"
        resource_snapshot:
          type: object
          nullable: true
          description: "事件發生當下的資源資訊快照"
          additionalProperties: true
        service_snapshot:
          type: object
          nullable: true
          description: "事件發生當下的服務資訊快照"
          additionalProperties: true
        tags:
          type: array
          description: "事件標籤 (含顏色)"
          items:
            type: object
            properties:
              key: { type: string }
              value: { type: string }
              color: { type: string }
        quick_links:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              url: { type: string, format: "uri" }
        available_actions:
          type: array
          items:
            type: object
            properties:
              key: { type: string }
              label: { type: string }
              api_endpoint: { type: string }
              method: { type: string }
        automation_run:
          type: object
          nullable: true
          description: "針對事件已觸發的自動化執行狀態"
          properties:
            id: { type: string }
            status:
              {
                type: string,
                enum: [pending, running, success, failed, cancelled, timeout],
                nullable: true,
              }
            triggered_at: { type: string, format: date-time, nullable: true }
        history_logs:
          type: array
          items:
            $ref: "#/components/schemas/EventHistory"
        related_events:
          type: array
          items:
            $ref: "#/components/schemas/RelatedEvent"
        automation_runs:
          type: array
          items:
            $ref: "#/components/schemas/AutomationRunSummary"
    EventCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    EventHistory:
      type: object
      properties:
        id: { type: string }
        type:
          {
            type: string,
            enum:
              [
                SYSTEM_STATE_CHANGE,
                USER_COMMENT,
                AUTOMATION_RUN,
                ASSIGNEE_CHANGE,
              ],
          }
        actor:
          type: object
          properties:
            type: { type: string, enum: [system, user, rule] }
            id: { type: string }
            name: { type: string }
            avatar_url: { type: string, format: "uri" }
        content: { type: string, description: "支援 Markdown" }
        metadata: { type: object }
        created_at: { type: string, format: "date-time" }
    RelatedEvent:
      type: object
      properties:
        id: { type: string }
        summary:
          type: string
          description: "事件摘要"
        severity: { type: string }
        status: { type: string }
        triggered_at: { type: string, format: "date-time" }
        correlation_reason:
          type: object
          properties:
            type:
              {
                type: string,
                enum:
                  [TOPOLOGY_DOWNSTREAM, TOPOLOGY_UPSTREAM, TIME, CONTENT, AI],
              }
            description: { type: string }
            confidence_score: { type: number, format: float }
    AutomationRunSummary:
      type: object
      properties:
        run_id: { type: string }
        script_id: { type: string }
        script_name: { type: string }
        status:
          type: string
          enum: [pending, running, success, failed, cancelled, timeout]
          description: "自動化執行狀態"
        triggered_by: { type: string }
        started_at: { type: string, format: "date-time" }
        duration_ms: { type: integer }
        summary_log: { type: string }
    EventCommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          description: "評論內容，支援 Markdown 和 @提及"
    AIAnalysisStatus:
      type: string
      enum: [pending, running, success, failed]
    AIAnalysisRequest:
      type: object
      properties:
        event_context:
          type: object
          additionalProperties: true
          description: "事件快照或其他提供給 AI 的補充資訊"
    AIAnalysisCreationResponse:
      type: object
      required: [report_id, status]
      properties:
        report_id: { type: string, example: "rep_a1b2c3" }
        status:
          $ref: "#/components/schemas/AIAnalysisStatus"
    AIAnalysisEvidence:
      type: object
      properties:
        type: { type: string }
        description: { type: string }
        link:
          type: object
          nullable: true
          properties:
            name: { type: string }
            url: { type: string, format: uri }
        timestamp:
          type: string
          format: date-time
          nullable: true
        metadata:
          type: object
          additionalProperties: true
    AIAnalysisRootCause:
      type: object
      properties:
        text: { type: string }
        confidence_score: { type: number, format: float }
        probable_causes:
          type: array
          items: { type: string }
        evidence:
          type: array
          items:
            $ref: "#/components/schemas/AIAnalysisEvidence"
    AIAnalysisAffectedResource:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string }
        role: { type: string, nullable: true }
    AIAnalysisImpact:
      type: object
      properties:
        text: { type: string }
        affected_resources:
          type: array
          items:
            $ref: "#/components/schemas/AIAnalysisAffectedResource"
        user_impact: { type: string, nullable: true }
        duration_minutes: { type: integer, nullable: true }
        severity: { type: string, nullable: true }
    AIAnalysisRecommendedAction:
      type: object
      properties:
        title: { type: string }
        action_type: { type: string }
        risk: { type: string }
        summary: { type: string, nullable: true }
        action_data:
          type: object
          additionalProperties: true
    AIAnalysisReport:
      type: object
      required: [report_id, event_id, status, created_at, updated_at]
      properties:
        report_id: { type: string }
        event_id: { type: string }
        status:
          $ref: "#/components/schemas/AIAnalysisStatus"
        event_summary: { type: string, nullable: true }
        root_cause_analysis:
          allOf:
            - $ref: "#/components/schemas/AIAnalysisRootCause"
          nullable: true
        impact_assessment:
          allOf:
            - $ref: "#/components/schemas/AIAnalysisImpact"
          nullable: true
        recommended_actions:
          type: array
          items:
            $ref: "#/components/schemas/AIAnalysisRecommendedAction"
        evidence:
          type: array
          items:
            $ref: "#/components/schemas/AIAnalysisEvidence"
        error_message: { type: string, nullable: true }
        created_at:
          type: string
          format: date-time
          description: "報告建立時間"
        updated_at:
          type: string
          format: date-time
          description: "報告最近更新時間"
        completed_at: { type: string, format: date-time, nullable: true }
        raw_llm_response:
          type: object
          nullable: true
          additionalProperties: true
    IncidentCreateRequest:
      type: object
      required: [summary, severity, event_ids]
      properties:
        summary: { type: string, description: "事故摘要，對應事故列表顯示" }
        title: { type: string, description: "可選標題，保留相容性" }
        severity: { type: string, enum: [critical, high, medium, low] }
        business_impact:
          { type: string, enum: [critical, high, medium, low], default: medium }
        service_name:
          type: string
          nullable: true
          description: "受影響的服務名稱"
        storm_group_id:
          type: string
          nullable: true
          description: "Storm 協同處理分組識別"
        assignee_id:
          {
            type: string,
            description: "指派處理事故的使用者或團隊ID",
            nullable: true,
          }
        automation_script_id: { type: string, nullable: true }
        automation_run_id: { type: string, nullable: true }
        trigger_threshold: { type: string, nullable: true }
        labels:
          type: object
          nullable: true
          description: "事故的標籤快照"
          additionalProperties: true
        annotations:
          type: object
          nullable: true
          description: "事故的註解快照"
          additionalProperties: true
        event_ids:
          type: array
          items:
            type: string
          description: "要合併到此事故中的事件ID列表"
    Incident:
      type: object
      properties:
        id: { type: string }
        summary: { type: string }
        title: { type: string, nullable: true }
        status:
          {
            type: string,
            enum: [investigating, identified, monitoring, resolved],
          }
        severity: { type: string, enum: [critical, high, medium, low] }
        business_impact:
          type: string
          enum: [critical, high, medium, low]
          description: "商業衝擊等級"
        service_name: { type: string, nullable: true }
        storm_group_id: { type: string, nullable: true }
        primary_resource:
          type: object
          nullable: true
          description: "事故聚焦的主要資源"
          properties:
            id: { type: string }
            name: { type: string }
        rule:
          type: object
          nullable: true
          description: "觸發此事故的規則資訊"
          properties:
            id: { type: string }
            name: { type: string }
            trigger_threshold: { type: string, nullable: true }
        labels:
          type: object
          nullable: true
          additionalProperties: true
        annotations:
          type: object
          nullable: true
          additionalProperties: true
        automation:
          type: object
          nullable: true
          description: "與事故相關的自動化腳本或執行紀錄"
          properties:
            script_id: { type: string, nullable: true }
            run_id: { type: string, nullable: true }
        assignee:
          type: object
          nullable: true
          description: "目前負責事故的處理人"
          properties:
            id: { type: string }
            name: { type: string }
        detected_at:
          type: string
          format: date-time
          nullable: true
          description: "首次偵測時間"
        resolved_at:
          type: string
          format: date-time
          nullable: true
          description: "事故結束時間"
        created_at:
          type: string
          format: date-time
          description: "事故建立時間"
        updated_at:
          type: string
          format: date-time
          description: "最後更新時間"
    IncidentCollection:
      type: object
      properties:
        items:
          type: array
          description: "事故清單"
          items:
            $ref: "#/components/schemas/Incident"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    SilenceCreateRequest:
      type: object
      description: "建立一次性靜音規則的請求結構，欄位與前端靜音規則表單保持一致。"
      required: [comment]
      properties:
        type:
          type: string
          enum: [once, recurring]
          default: once
          description: "對應 UI 的「靜音類型」切換，預設為一次性 (once)。"
        event_id:
          type: string
          description: "對應 UI 的「從事件建立」選擇器，填入事件 ID 後系統會自動帶入匹配條件。"
        matchers:
          type: array
          description: "對應 UI 的「匹配條件」清單，每一列皆為 key/op/value 組合。"
          items:
            $ref: "#/components/schemas/SilenceMatcher"
          minItems: 1
        starts_at:
          type: string
          format: date-time
          description: "對應 UI 的「開始時間」，type 為 once 時必填。"
        ends_at:
          type: string
          format: date-time
          description: "對應 UI 的「結束時間」，type 為 once 時必填。"
        duration:
          type: string
          description: "對應 UI 快捷操作的「靜音時長」，例如 '1h'、'30m'。"
        recurring_pattern:
          type: string
          nullable: true
          enum: [daily, weekly, monthly, custom]
          description: "對應 UI 的「重複頻率」，一次性靜音可為 null。"
        weekdays:
          type: array
          nullable: true
          description: "對應 UI 的「選擇星期」，以 0 (週日) 至 6 (週六) 表示。"
          items:
            type: integer
            minimum: 0
            maximum: 6
        time_slot:
          type: array
          nullable: true
          description: "對應 UI 的「靜音時段」，格式為 [開始時間, 結束時間] (HH:mm)。"
          items:
            type: string
            pattern: "^(?:[01][0-9]|2[0-3]):[0-5][0-9]$"
          minItems: 2
          maxItems: 2
        valid_until:
          type: string
          format: date-time
          nullable: true
          description: "對應 UI 的「有效期限」，留空代表永久有效。"
        enabled:
          type: boolean
          default: true
          description: "對應 UI 的「立即啟用此靜音規則」開關。"
        comment:
          type: string
          description: "對應 UI 的「原因」，說明為何需要靜音。"
        creator:
          type: object
          nullable: true
          description: "對應 UI 的「建立者」，預設為目前登入的使用者，可由管理員覆寫。"
          properties:
            id:
              type: string
              description: "建立者的使用者 ID。"
    UserPlatformRolesUpdateRequest:
      type: object
      properties:
        team_ids:
          type: array
          items: { type: string }
        role_ids:
          type: array
          items: { type: string }
    # ============================================
    # 事件規則 (Grafana 代理) Schemas
    # ============================================
    EventRule:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        # ... and other fields representing a simplified rule
    EventRuleTemplate:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        template_data: { type: object, description: "預填所有精靈步驟的數據" }
    EventRuleScopePreview:
      type: object
      properties:
        matched_resources_count: { type: integer }
        sample_resources:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              name: { type: string }
    EventRuleMetric:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        query_template: { type: string, description: "後端用於生成查詢的模板" }

    # Other placeholder schemas
    User:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        email: { type: string }
        name: { type: string }
        avatar_url: { type: string, nullable: true }
        is_active: { type: boolean }
        last_login_at: { type: string, format: "date-time", nullable: true }
        roles:
          type: array
          items: { type: string }
        teams:
          type: array
          items: { type: string }
    Team:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description:
          type: string
          nullable: true
          description: "團隊描述"
        leader_id: { type: string, nullable: true }
        member_count: { type: integer }
        subscriber_count: { type: integer }
    Role:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description:
          type: string
          nullable: true
          description: "角色描述"
        is_built_in: { type: boolean }
        user_count: { type: integer, description: "使用此角色的用戶數量" }
    ResourceTag:
      type: object
      properties:
        key:
          type: string
          description: "標籤鍵"
        value:
          type: string
          description: "標籤值"
        display_name:
          type: string
          nullable: true
          description: "顯示名稱"
        category:
          type: string
          nullable: true
          description: "標籤分類"
        color:
          type: string
          nullable: true
          description: "UI 顏色代碼"
    ResourceAlarm:
      type: object
      properties:
        event_id:
          type: string
          description: "事件 ID"
        severity:
          type: string
          enum: [critical, warning]
          description: "事件嚴重度"
        summary:
          type: string
          description: "事件摘要"
        triggered_at:
          type: string
          format: date-time
          nullable: true
          description: "事件觸發時間"
    ResourceMetric:
      type: object
      properties:
        cpu_usage: { type: number, format: float, minimum: 0, maximum: 100 }
        memory_usage: { type: number, format: float, minimum: 0, maximum: 100 }
        disk_usage: { type: number, format: float, minimum: 0, maximum: 100 }
        network_in_bps: { type: integer, nullable: true }
        network_out_bps: { type: integer, nullable: true }
        captured_at: { type: string, format: date-time, nullable: true }
        trend_window: { type: string, enum: [15m, 1h, 6h, 24h], nullable: true }
        trend_values:
          type: array
          items: { type: number }
    ResourceGroupRef:
      type: object
      properties:
        id:
          type: string
          description: "資源群組 ID"
        name:
          type: string
          description: "資源群組名稱"
    Resource:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type:
          type: string
          enum: [server, database, cache, gateway, service]
          description: "資源類型"
        status:
          type: string
          enum: [healthy, warning, critical, unknown]
          description: "目前健康狀態"
        description: { type: string, nullable: true }
        environment:
          type: string
          example: "production"
          description: "部署環境"
        region:
          type: string
          example: "us-east-1"
          description: "雲端區域或資料中心"
        location:
          type: string
          nullable: true
          description: "機房或可用區描述"
        instance_type:
          type: string
          nullable: true
          description: "實例規格 (如 m5.xlarge)"
        os_version:
          type: string
          nullable: true
          description: "作業系統版本"
        ip_address:
          type: string
          nullable: true
          description: "管理 IP 位址"
        cpu_usage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          nullable: true
          description: "CPU 使用率 (百分比)"
        memory_usage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          nullable: true
          description: "記憶體使用率 (百分比)"
        disk_usage:
          type: number
          format: float
          minimum: 0
          maximum: 100
          nullable: true
          description: "磁碟使用率 (百分比)"
        trend:
          type: array
          nullable: true
          description: "資源使用率趨勢資料點 (百分比)"
          items: { type: number }
        team:
          type: object
          nullable: true
          description: "負責的團隊資訊"
          properties:
            id: { type: string }
            name: { type: string }
        groups:
          type: array
          description: "資源所屬的資源群組"
          items: { $ref: "#/components/schemas/ResourceGroupRef" }
        tags:
          type: array
          description: "標籤清單 (含顯示資訊)"
          items:
            $ref: "#/components/schemas/ResourceTag"
        metrics:
          $ref: "#/components/schemas/ResourceMetric"
          nullable: true
          description: "最新即時度量快照"
        alarms:
          type: array
          description: "活躍事件摘要"
          items:
            $ref: "#/components/schemas/ResourceAlarm"
        last_check_at:
          type: string
          format: date-time
          nullable: true
          description: "最後一次健康檢查時間"
        created_at:
          type: string
          format: date-time
          description: "資源建立時間"
        updated_at:
          type: string
          format: date-time
          description: "資源最近更新時間"
    ResourceCollection:
      type: object
      properties:
        items:
          type: array
          description: "資源資料列表"
          items:
            $ref: "#/components/schemas/Resource"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    ResourceGroup:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        type: { type: string, enum: [static, dynamic] }
        rules:
          type: object
          nullable: true
          description: "動態群組規則 (以標籤條件描述)"
          additionalProperties: true
        health_summary:
          type: object
          nullable: true
          description: "預先計算的健康狀態統計"
          properties:
            healthy: { type: integer }
            warning: { type: integer }
            critical: { type: integer }
        responsible_team:
          type: object
          nullable: true
          description: "負責維運該群組的團隊"
          properties:
            id: { type: string }
            name: { type: string }
        members:
          type: array
          nullable: true
          description: 群組內資源 ID 清單 (僅於需要時返回)
          items: { type: string }
        members_count:
          type: integer
          nullable: true
          description: "群組內資源數量"
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    ResourceGroupCollection:
      type: object
      properties:
        items:
          type: array
          description: "資源群組清單"
          items:
            $ref: "#/components/schemas/ResourceGroup"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    SilenceMatcher:
      type: object
      description: "靜音規則的匹配條件項目，與 UI 單列設定相對應。"
      required: [key, op, value]
      properties:
        key:
          type: string
          description: "對應 UI 的「條件欄位」。"
        op:
          type: string
          description: "對應 UI 的「運算子」，支援 Alertmanager 的 =、!=、=~、!~。"
          enum: ["=", "!=", "=~", "!~"]
        value:
          type: string
          description: "對應 UI 的「值」輸入框。"
    Silence:
      type: object
      description: "代表一個從 Grafana API 獲取的一次性靜音規則"
      properties:
        id: { type: string }
        type:
          type: string
          enum: [once, recurring]
          description: "一次性靜音固定為 once，用於與 UI 的「靜音類型」欄位對應。"
        matchers:
          type: array
          description: "靜音套用條件，每列皆採用 key/op/value 格式對應 UI。"
          minItems: 1
          items:
            $ref: "#/components/schemas/SilenceMatcher"
        recurring_pattern:
          type: string
          nullable: true
          enum: [daily, weekly, monthly, custom]
          description: "若由週期性範本產生則保留原重複頻率，否則為 null。"
        weekdays:
          type: array
          nullable: true
          description: "用於顯示 UI 的「選擇星期」，0 代表週日、6 代表週六。"
          items:
            type: integer
            minimum: 0
            maximum: 6
        time_slot:
          type: array
          nullable: true
          description: "靜音時段，對應 UI 的 [開始時間, 結束時間] (HH:mm)。"
          minItems: 2
          maxItems: 2
          items:
            type: string
            pattern: "^(?:[01][0-9]|2[0-3]):[0-5][0-9]$"
        valid_until:
          type: string
          format: "date-time"
          nullable: true
          description: "對應 UI 的「有效期限」，對於一次性靜音通常等同於 endsAt。"
        enabled:
          type: boolean
          description: "對應 UI 的「狀態」切換，過期靜音會回傳 false。"
        creator:
          type: object
          nullable: true
          description: "建立此靜音規則的使用者資訊，用於 UI 顯示「建立者」。"
          properties:
            id: { type: string }
            name: { type: string }
            email: { type: string, format: email, nullable: true }
            avatar_url: { type: string, format: uri, nullable: true }
        startsAt:
          type: string
          format: "date-time"
          description: "Grafana 原生欄位，對應 UI 的「開始時間」。"
        endsAt:
          type: string
          format: "date-time"
          description: "Grafana 原生欄位，對應 UI 的「結束時間」。"
        createdBy:
          type: string
          description: "Grafana 原生欄位，建議改用 creator.id。"
          deprecated: true
        comment:
          type: string
          description: "建立靜音時填寫的原因。"
        status:
          type: object
          description: "靜音狀態資訊。"
          properties:
            state:
              type: string
              enum: [expired, active, pending]
              description: "對應 UI 的狀態標籤。"
    SilenceCollection:
      type: object
      description: "靜音規則列表回應結構。"
      properties:
        items:
          type: array
          description: "靜音規則資料列。"
          items:
            $ref: "#/components/schemas/Silence"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    RecurringSilenceRuleCreateRequest:
      type: object
      description: "建立週期性靜音規則的請求結構，欄位與 UI 表單保持一致。"
      required: [name, recurring_pattern, matchers, time_slot]
      properties:
        name:
          type: string
          description: "對應 UI 的「名稱」。"
        description:
          type: string
          nullable: true
          description: "對應 UI 的「描述」。"
        type:
          type: string
          enum: [recurring]
          default: recurring
          description: "對應 UI 的「靜音類型」，週期性規則固定為 recurring。"
        recurring_pattern:
          type: string
          enum: [daily, weekly, monthly, custom]
          description: "對應 UI 的「重複頻率」。"
        weekdays:
          type: array
          nullable: true
          description: "對應 UI 的「選擇星期」，在 weekly 模式時必填。"
          items:
            type: integer
            minimum: 0
            maximum: 6
        time_slot:
          type: array
          description: "對應 UI 的「靜音時段」，格式為 [開始時間, 結束時間] (HH:mm)。"
          minItems: 2
          maxItems: 2
          items:
            type: string
            pattern: "^(?:[01][0-9]|2[0-3]):[0-5][0-9]$"
        timezone:
          type: string
          description: "對應 UI 的「時區」選擇。"
        valid_until:
          type: string
          format: "date-time"
          nullable: true
          description: "對應 UI 的「有效期限」，留空代表永久。"
        cron_expression:
          type: string
          nullable: true
          description: "對應 UI 的「自訂 Cron 表達式」，當 recurring_pattern 為 custom 時使用。"
        matchers:
          type: array
          description: "對應 UI 的「匹配條件」清單，每列為 key/op/value 組合。"
          minItems: 1
          items:
            $ref: "#/components/schemas/SilenceMatcher"
        enabled:
          type: boolean
          default: true
          description: "對應 UI 的「啟用」開關。"
        creator:
          type: object
          nullable: true
          description: "對應 UI 的「建立者」，預設為目前登入的使用者，可由管理員覆寫。"
          properties:
            id:
              type: string
              description: "建立者的使用者 ID。"
    RecurringSilenceRule:
      type: object
      description: "平台核心功能：週期性靜音規則"
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        type:
          type: string
          enum: [recurring]
          description: "用於與 UI 的「靜音類型」欄位對齊，固定為 recurring。"
        recurring_pattern:
          type: string
          enum: [daily, weekly, monthly, custom]
          description: "對應 UI 的「重複頻率」。"
        weekdays:
          type: array
          nullable: true
          description: "當 recurring_pattern 為 weekly 時，列出 0 (週日) 至 6 (週六)。"
          items:
            type: integer
            minimum: 0
            maximum: 6
        time_slot:
          type: array
          description: "對應 UI 的「靜音時段」，格式為 [開始時間, 結束時間] (HH:mm)。"
          minItems: 2
          maxItems: 2
          items:
            type: string
            pattern: "^(?:[01][0-9]|2[0-3]):[0-5][0-9]$"
        timezone:
          type: string
          description: "靜音適用的時區，對應 UI 的「時區」。"
        valid_until:
          type: string
          format: "date-time"
          nullable: true
          description: "對應 UI 的「有效期限」。"
        cron_expression:
          type: string
          nullable: true
          description: "當 recurring_pattern 為 custom 時使用的 Cron 表達式。"
        matchers:
          type: array
          description: "靜音套用條件，與 UI 的 key/op/value 列表一致。"
          minItems: 1
          items:
            $ref: "#/components/schemas/SilenceMatcher"
        enabled:
          type: boolean
          description: "對應 UI 的「狀態」切換。"
        creator:
          type: object
          nullable: true
          description: "建立此規則的使用者資訊，用於顯示「建立者」。"
          properties:
            id: { type: string }
            name: { type: string }
            email: { type: string, format: email, nullable: true }
            avatar_url: { type: string, format: uri, nullable: true }
        duration_minutes:
          type: integer
          nullable: true
          readOnly: true
          description: "系統根據 time_slot 自動計算的靜音持續分鐘數。"
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    RecurringSilenceRuleCollection:
      type: object
      description: "週期性靜音規則列表回應結構。"
      properties:
        items:
          type: array
          description: "週期性靜音規則資料列。"
          items:
            $ref: "#/components/schemas/RecurringSilenceRule"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    # ============================================
    # 標籤治理 Schemas
    # ============================================
    TagKey:
      type: object
      description: "標籤治理規則的定義"
      properties:
        id: { type: string }
        key_name: { type: string }
        display_name: { type: string }
        description: { type: string, nullable: true }
        is_required: { type: boolean }
        validation_regex: { type: string, nullable: true }
        category: { type: string }
        compliance_category: { type: string, nullable: true }
        total_usage: { type: integer }
        enforcement_level: { type: string, enum: [advisory, warning, blocking] }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    TagAllowedValue:
      type: object
      description: "標籤鍵的預定義允許值"
      properties:
        id: { type: string }
        tag_key_id: { type: string }
        value: { type: string }
        display_name: { type: string }
        color: { type: string, nullable: true }
        usage_count: { type: integer }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    TagComplianceViolation:
      type: object
      description: "單一的標籤不合規記錄"
      properties:
        resource_id: { type: string }
        resource_name: { type: string }
        violation_type:
          { type: string, enum: [missing_required, invalid_value, unknown_key] }
        tag_key: { type: string }
        expected_value: { type: string, nullable: true }
        actual_value: { type: string, nullable: true }
        severity: { type: string, enum: [low, medium, high] }
        detected_at: { type: string, format: "date-time" }
    TagComplianceReport:
      type: object
      description: "標籤合規性的總結報告"
      properties:
        summary:
          type: object
          properties:
            compliance_score: { type: number, format: float }
            total_resources_scanned: { type: integer }
            violating_resources_count: { type: integer }
        violations:
          type: array
          items:
            $ref: "#/components/schemas/TagComplianceViolation"
    # 通知管理 Schemas
    NotificationPolicyChannel:
      type: object
      properties:
        channel_id: { type: string }
        channel_name: { type: string }
        channel_type:
          {
            type: string,
            enum: [email, slack, webhook, pagerduty, sms, line_notify, teams],
          }
        channel_order: { type: integer }
    NotificationPolicyCondition:
      type: object
      properties:
        id: { type: string }
        field: { type: string }
        operator:
          type: string
          enum:
            [
              equals,
              not_equals,
              in,
              not_in,
              contains,
              not_contains,
              regex,
              greater_than,
              greater_than_equals,
              less_than,
              less_than_equals,
              between,
              starts_with,
              ends_with,
              exists,
              not_exists,
            ]
        value_type:
          type: string
          enum: [string, number, boolean, array, object]
          default: string
        value:
          description: 條件值內容，依 value_type 決定型別
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items: {}
            - type: object
          nullable: true
        metadata:
          type: object
          nullable: true
          description: "條件額外設定 (例如數值單位、比較模式)"
          additionalProperties: true
    NotificationPolicyConditionInput:
      type: object
      properties:
        field: { type: string }
        operator:
          type: string
          enum:
            [
              equals,
              not_equals,
              in,
              not_in,
              contains,
              not_contains,
              regex,
              greater_than,
              greater_than_equals,
              less_than,
              less_than_equals,
              between,
              starts_with,
              ends_with,
              exists,
              not_exists,
            ]
        value_type:
          type: string
          enum: [string, number, boolean, array, object]
          default: string
        value:
          description: 條件值內容，依 value_type 決定型別
          oneOf:
            - type: string
            - type: number
            - type: boolean
            - type: array
              items: {}
            - type: object
          nullable: true
        metadata:
          type: object
          nullable: true
          description: "條件額外設定 (例如數值單位、比較模式)"
          additionalProperties: true
    NotificationPolicy:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        priority: { type: string, enum: [low, medium, high, critical] }
        match_type: { type: string, enum: [all, any] }
        is_enabled: { type: boolean }
        resource_group:
          type: object
          nullable: true
          properties:
            id: { type: string }
            name: { type: string }
        responsible_team:
          type: object
          nullable: true
          properties:
            id: { type: string }
            name: { type: string }
        channels:
          type: array
          items:
            $ref: "#/components/schemas/NotificationPolicyChannel"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/NotificationPolicyCondition"
        trigger_count: { type: integer }
        last_triggered_at: { type: string, format: "date-time", nullable: true }
        notes: { type: string, nullable: true }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    NotificationPolicyCreateRequest:
      type: object
      required:
        [name, resource_group_id, responsible_team_id, priority, channel_ids]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        priority: { type: string, enum: [low, medium, high, critical] }
        match_type: { type: string, enum: [all, any], default: all }
        resource_group_id: { type: string }
        responsible_team_id: { type: string }
        channel_ids:
          type: array
          items: { type: string }
          minItems: 1
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/NotificationPolicyConditionInput"
        notes: { type: string, nullable: true }
        is_enabled: { type: boolean, default: true }
    NotificationPolicyUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationPolicyCreateRequest"
    NotificationPolicyCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/NotificationPolicy"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    NotificationChannel:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type:
          {
            type: string,
            enum: [email, slack, webhook, pagerduty, sms, line_notify, teams],
          }
        description: { type: string, nullable: true }
        template_key: { type: string, nullable: true }
        config:
          type: object
          additionalProperties: true
          nullable: true
        is_enabled: { type: boolean }
        last_test_status:
          { type: string, enum: [success, failed, pending], nullable: true }
        last_test_message: { type: string, nullable: true }
        last_test_at: { type: string, format: "date-time", nullable: true }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    NotificationChannelCreateRequest:
      type: object
      required: [name, type]
      properties:
        name: { type: string }
        type:
          {
            type: string,
            enum: [email, slack, webhook, pagerduty, sms, line_notify, teams],
          }
        description: { type: string, nullable: true }
        template_key: { type: string, nullable: true }
        config:
          type: object
          additionalProperties: true
          nullable: true
        is_enabled: { type: boolean, default: true }
    NotificationChannelUpdateRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationChannelCreateRequest"
    NotificationChannelCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/NotificationChannel"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    NotificationChannelTestResponse:
      type: object
      properties:
        status: { type: string, enum: [success, failed, pending] }
        message: { type: string }
        tested_at: { type: string, format: "date-time" }
    AuditActor:
      type: object
      properties:
        id:
          type: string
          nullable: true
          description: "操作者 ID"
        username:
          type: string
          nullable: true
          description: "操作者帳號"
        display_name:
          type: string
          nullable: true
          description: "操作者顯示名稱"
    AuditLog:
      type: object
      properties:
        id: { type: string }
        action_type:
          type: string
          enum: [create, update, delete, login, logout, access, export]
          description: "操作類型"
        resource_type:
          type: string
          description: "被操作的資源類型"
        resource_id:
          type: string
          nullable: true
          description: "被操作的資源 ID"
        result:
          type: string
          enum: [success, failure, partial]
          description: "操作結果"
        risk_level:
          type: string
          enum: [low, medium, high, critical]
          description: "風險等級"
        user:
          $ref: "#/components/schemas/AuditActor"
        ip_address:
          type: string
          nullable: true
          description: "來源 IP"
        user_agent:
          type: string
          nullable: true
          description: "User-Agent 字串"
        details:
          type: object
          nullable: true
          description: "包含變更 diff 或額外資訊"
          additionalProperties: true
        created_at:
          type: string
          format: date-time
          description: "操作時間"
    AuditLogCollection:
      type: object
      properties:
        items:
          type: array
          description: "審計日誌清單"
          items:
            $ref: "#/components/schemas/AuditLog"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    NotificationHistory:
      type: object
      properties:
        id: { type: string }
        event_id: { type: string, nullable: true }
        policy_id: { type: string, nullable: true }
        policy_name: { type: string, nullable: true }
        channel_id: { type: string, nullable: true }
        channel_name: { type: string }
        channel_type:
          {
            type: string,
            enum: [email, slack, webhook, pagerduty, sms, line_notify, teams],
            nullable: true,
          }
        recipient: { type: string }
        status: { type: string, enum: [pending, success, failed, delivered] }
        message: { type: string, nullable: true }
        error_message: { type: string, nullable: true }
        raw_payload:
          {
            type: object,
            nullable: true,
            description: "發送時的原始通知內容快照",
          }
        actor: { type: string }
        sent_at: { type: string, format: "date-time", nullable: true }
        created_at: { type: string, format: "date-time" }
    NotificationHistoryCollection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/NotificationHistory"
        pagination:
          $ref: "#/components/schemas/PaginationMeta"
    NotificationResendResponse:
      type: object
      properties:
        status: { type: string, enum: [queued, skipped] }
        message: { type: string }
        queued_at: { type: string, format: "date-time" }
