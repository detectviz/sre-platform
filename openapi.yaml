# SRE 平台 API 規格書 (SSOT)
# 版本: 2.0.0
# 更新日期: 2025-09-16
# 描述: 此文件為 SRE 平台前端與後端之間的 API 契約唯一真實來源 (Single Source of Truth)，
#      根據 prototype.html 的全面審查結果重新撰寫。
openapi: 3.1.0
info:
  title: SRE 平台 - API 規格書
  description: |
    本 API 規格為 SRE 平台前後端開發的統一數據契約。
    它定義了所有資源、事件、自動化、管理等模組的介面，
    並遵循 RESTful 設計原則與專案開發規範。
  version: "2.0.0"
  contact:
    name: SRE 平台開發團隊
    email: sre-platform-dev@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /api/v1
    description: 應用程式 API 根路徑
  - url: http://localhost:3001/api/v1
    description: Mock Server 開發環境

# ============================================
# 擴展屬性 (Vendor Extensions)
# ============================================
x-error-codes:
  BAD_REQUEST:
    http: 400
    message: "請求格式錯誤或缺少必要參數"
    i18n_key: errors.badRequest
  UNAUTHORIZED:
    http: 401
    message: "使用者未登入或 Token 已過期"
    i18n_key: errors.unauthorized
  FORBIDDEN:
    http: 403
    message: "使用者權限不足，無法執行此操作"
    i18n_key: errors.forbidden
  NOT_FOUND:
    http: 404
    message: "請求的資源不存在或已被移除"
    i18n_key: errors.notFound
  CONFLICT:
    http: 409
    message: "操作與目前資源狀態衝突 (例如：重名)"
    i18n_key: errors.conflict
  RATE_LIMITED:
    http: 429
    message: "請求過於頻繁，請稍後再試"
    i18n_key: errors.rateLimited
  INTERNAL_ERROR:
    http: 500
    message: "伺服器內部發生未知錯誤"
    i18n_key: errors.internal
  RESOURCE_IN_USE:
    http: 409
    message: "資源正在使用中，無法刪除"
    i18n_key: errors.resource_in_use
  INVALID_METRIC:
    http: 400
    message: "無效的監控指標"
    i18n_key: errors.invalid_metric

x-role-definitions:
  super_admin: "超級管理員：擁有系統最高權限，可以執行所有操作。"
  team_manager: "團隊管理員：管理團隊成員、資源、事件規則等團隊範圍內的資源。"
  team_member: "團隊成員：查看團隊資源、處理事件、執行腳本（受限）。"
  viewer: "唯讀用戶：僅可查看資源狀態、儀表板、報表。"

x-resource-status-rules:
  # 資源健康狀態的判定規則契約
  default:
    critical: "cpu_usage > 90 OR memory_usage > 95"
    warning: "cpu_usage > 80 OR memory_usage > 85"
    healthy: "cpu_usage <= 80 AND memory_usage <= 85"
  server:
    critical: "cpu_usage > 90 OR memory_usage > 95 OR disk_usage > 95"
    warning: "cpu_usage > 80 OR memory_usage > 85 OR disk_usage > 90"
    healthy: "cpu_usage <= 80 AND memory_usage <= 85 AND disk_usage <= 90"
  database:
    critical: "cpu_usage > 85 OR memory_usage > 90 OR replication_lag_s > 10 OR connections_pct > 95"
    warning: "cpu_usage > 75 OR memory_usage > 85 OR replication_lag_s > 5 OR connections_pct > 90"
    healthy: "cpu_usage <= 75 AND memory_usage <= 85 AND replication_lag_s <= 5 AND connections_pct <= 90"

x-incident-lifecycle:
  # 事件狀態機契約
  states: [new, acknowledged, resolved, silenced]
  transitions:
    - {
        from: new,
        to: acknowledged,
        roles: [team_member, team_manager, super_admin],
        action: "確認",
      }
    - {
        from: acknowledged,
        to: resolved,
        roles: [team_member, team_manager, super_admin],
        action: "解決",
      }
    - {
        from: new,
        to: silenced,
        roles: [team_manager, super_admin],
        action: "靜音",
      }
    - {
        from: acknowledged,
        to: silenced,
        roles: [team_manager, super_admin],
        action: "靜音",
      }
  actions:
    acknowledge:
      { endpoint: "/incidents/{incidentId}/acknowledge", method: POST }
    resolve: { endpoint: "/incidents/{incidentId}/resolve", method: POST }
    silence: { endpoint: "/incidents/silences", method: POST }

x-websocket:
  # WebSocket / SSE 通訊契約
  notifications:
    url: "/events"
    description: "Server-Sent Events (SSE) 用於即時更新（alerts, incidents 等）。"
    messages:
      alert_fired:
        payload_schema: "#/components/schemas/Alert"
      incident_updated:
        payload_schema: "#/components/schemas/Incident"
      resource_status_changed:
        payload_example:
          resource_id: "res_1"
          old_status: "healthy"
          new_status: "warning"

# ============================================
# API 標籤 (Tags)
# ============================================
tags:
  - name: System
    description: 核心系統功能
  - name: Auth
    description: 身份驗證
  - name: Search & Autocomplete
    description: 全局搜尋與自動完成
  - name: Dashboard
    description: 儀表板與統計
  - name: Resources
    description: 資源管理
  - name: Resource Groups
    description: 資源群組管理
  - name: Incidents
    description: 事件管理
  - name: Alerts
    description: 原始告警管理
  - name: Incident Rules
    description: 事件規則管理
  - name: Incident Silences
    description: 事件靜音規則管理
  - name: Analyzing
    description: 分析與預測
  - name: Automation
    description: 自動化相關
  - name: Admin
    description: 平台管理功能
  - name: Profile
    description: 使用者個人設定
  - name: Notifications
    description: 使用者通知中心

# ============================================
# API 路徑與端點 (Paths & Endpoints)
# ============================================
paths:
  # ============================================
  # System
  # ============================================
  /healthz:
    get:
      tags: [System]
      summary: 服務健康檢查
      operationId: checkHealth
      responses: { "200": { description: 服務健康 } }
  /readyz:
    get:
      tags: [System]
      summary: 服務就緒檢查
      operationId: checkReadiness
      responses: { "200": { description: 服務就緒 } }
  /metrics:
    get:
      tags: [System]
      summary: Prometheus 指標
      operationId: getMetrics
      responses: { "200": { description: Prometheus 指標 } }
  /metrics/definitions:
    get:
      tags: [System]
      summary: 獲取可用監控指標列表
      operationId: getMetricDefinitions
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 成功獲取指標列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MetricDefinition"
  /metrics/query:
    post:
      tags: [System]
      summary: 多資源指標時序查詢
      operationId: queryMetrics
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetricQueryRequest"
      responses:
        "200":
          description: 成功返回指標時序數據
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricQueryResult"

  # ============================================
  # Auth
  # ============================================
  /auth/login:
    post:
      tags: [Auth]
      summary: 開發模式登入
      operationId: devLogin
      requestBody:
        $ref: "#/components/requestBodies/AuthLoginRequest"
      responses:
        "200":
          description: 登入成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
  /auth/refresh:
    post:
      tags: [Auth]
      summary: 刷新 Token（開發）
      operationId: devRefreshToken
      requestBody:
        $ref: "#/components/requestBodies/TokenRefreshRequest"
      responses:
        "200":
          description: 刷新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
  /auth/logout:
    post:
      tags: [Auth]
      summary: 登出（開發）
      operationId: devLogout
      responses:
        "200":
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"

  # ============================================
  # Search & Autocomplete
  # ============================================
  /autocomplete:
    get:
      tags: [Search & Autocomplete]
      summary: 獲取自動完成建議
      operationId: getAutocompleteSuggestions
      security: [{ bearerAuth: [] }]
      parameters:
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [user, resource, script, team, channel, all]
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功獲取建議列表
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AutocompleteResult"
  /search:
    get:
      tags: [Search & Autocomplete]
      summary: 全局搜尋
      operationId: globalSearch
      security: [{ bearerAuth: [] }]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 成功返回搜尋結果
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SearchResultItem"

  # ============================================
  # Dashboard
  # ============================================
  /dashboard/summary:
    get:
      tags: [Dashboard]
      summary: 儀表板摘要
      operationId: getDashboardSummary
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 儀表板摘要
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DashboardSummary"
  /dashboard/trends:
    get:
      tags: [Dashboard]
      summary: 趨勢數據
      operationId: getDashboardTrends
      security: [{ bearerAuth: [] }]
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: 24h
      responses:
        "200":
          description: 趨勢數據
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrendData"
  /dashboard/resource-distribution:
    get:
      tags: [Dashboard]
      summary: 資源分佈
      operationId: getResourceDistribution
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: 資源分佈數據
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceDistribution"

  # ============================================
  # Resources
  # ============================================
  /resources:
    get:
      tags: [Resources]
      summary: 獲取資源列表
      operationId: listResources
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: status
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: group_id
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        "200":
          description: 資源列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceList"
    post:
      tags: [Resources]
      summary: 創建資源
      operationId: createResource
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/ResourceCreateRequest"
      responses:
        "201":
          description: 資源創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
  /resources/{resourceId}:
    get:
      tags: [Resources]
      summary: 獲取資源詳情
      operationId: getResource
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/ResourceIdParam"
      responses:
        "200":
          description: 資源詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
    put:
      tags: [Resources]
      summary: 更新資源
      operationId: updateResource
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - $ref: "#/components/parameters/ResourceIdParam"
      requestBody:
        $ref: "#/components/requestBodies/ResourceUpdateRequest"
      responses:
        "200":
          description: 資源更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
    delete:
      tags: [Resources]
      summary: 刪除資源
      operationId: deleteResource
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - $ref: "#/components/parameters/ResourceIdParam"
      responses:
        "204":
          description: 資源刪除成功
  /resources/{resourceId}/metrics:
    get:
      tags: [Resources]
      summary: 獲取資源歷史指標
      operationId: getResourceMetricsHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/ResourceIdParam"
        - name: metric_name
          in: query
          required: true
          schema: { type: string }
        - name: period
          in: query
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: 24h
      responses:
        "200":
          description: 成功返回指標歷史數據
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrendData"
  /resources/{resourceId}/incidents:
    get:
      tags: [Resources]
      summary: 獲取資源關聯事件列表
      operationId: getResourceIncidents
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/ResourceIdParam"
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 資源關聯事件列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentList"
  /resources/batch:
    post:
      tags: [Resources]
      summary: 批次操作資源
      operationId: batchOperateResources
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/BatchResourceOperation"
      responses:
        "200":
          description: 批次操作結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchOperationResult"
  /resources/scan:
    post:
      tags: [Resources]
      summary: 掃描網段
      operationId: scanNetwork
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/NetworkScanRequest"
      responses:
        "202":
          description: 掃描任務已接受
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScanTaskResponse"
  /resources/scan/{taskId}:
    get:
      tags: [Resources]
      summary: 獲取掃描結果
      operationId: getScanResult
      security: [{ bearerAuth: [] }]
      parameters:
        - name: taskId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 掃描結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScanResult"
  # ============================================
  # Resource Groups
  # ============================================
  /resources/groups:
    get:
      tags: [Resource Groups]
      summary: 獲取群組列表
      operationId: listResourceGroups
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 群組列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGroupList"
    post:
      tags: [Resource Groups]
      summary: 創建群組
      operationId: createResourceGroup
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/ResourceGroupCreateRequest"
      responses:
        "201":
          description: 群組創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGroup"
  /resources/groups/{groupId}:
    get:
      tags: [Resource Groups]
      summary: 獲取單一資源群組詳情
      operationId: getResourceGroup
      security: [{ bearerAuth: [] }]
      parameters:
        - name: groupId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 資源群組詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGroup"
    put:
      tags: [Resource Groups]
      summary: 更新群組
      operationId: updateResourceGroup
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: groupId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        $ref: "#/components/requestBodies/ResourceGroupUpdateRequest"
      responses:
        "200":
          description: 群組更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceGroup"
    delete:
      tags: [Resource Groups]
      summary: 刪除群組
      operationId: deleteResourceGroup
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: groupId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: 群組刪除成功
  /resources/groups/{groupId}/members:
    post:
      tags: [Resource Groups]
      summary: 管理群組成員
      operationId: manageResourceGroupMembers
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: groupId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        $ref: "#/components/requestBodies/GroupMemberOperation"
      responses:
        "200":
          description: 成員管理成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
  # ============================================
  # Incidents
  # ============================================
  /incidents:
    get:
      tags: [Incidents]
      summary: 獲取事件列表
      operationId: listIncidents
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - $ref: "#/components/parameters/SortByParam"
        - $ref: "#/components/parameters/SortOrderParam"
        - name: status
          in: query
          schema: { type: string }
        - name: severity
          in: query
          schema: { type: string }
        - name: resource_id
          in: query
          schema: { type: string }
      responses:
        "200":
          description: 事件列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IncidentList"
    post:
      tags: [Incidents]
      summary: 創建事件
      operationId: createIncident
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/IncidentCreateRequest"
      responses:
        "201":
          description: 事件創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /incidents/{incidentId}:
    get:
      tags: [Incidents]
      summary: 獲取事件詳情
      operationId: getIncident
      security: [{ bearerAuth: [] }]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 事件詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
    put:
      tags: [Incidents]
      summary: 更新事件
      operationId: updateIncident
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        $ref: "#/components/requestBodies/IncidentUpdateRequest"
      responses:
        "200":
          description: 事件更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /incidents/{incidentId}/acknowledge:
    post:
      tags: [Incidents]
      summary: 確認事件
      operationId: acknowledgeIncident
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 事件確認成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /incidents/{incidentId}/resolve:
    post:
      tags: [Incidents]
      summary: 解決事件
      operationId: resolveIncident
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 事件解決成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /incidents/{incidentId}/assign:
    post:
      tags: [Incidents]
      summary: 指派事件
      operationId: assignIncident
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [assignee_id]
              properties:
                assignee_id:
                  type: string
      responses:
        "200":
          description: 事件指派成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
  /incidents/{incidentId}/comments:
    post:
      tags: [Incidents]
      summary: 新增事件註記
      operationId: addIncidentComment
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      parameters:
        - name: incidentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [comment]
              properties:
                comment:
                  type: string
      responses:
        "201":
          description: 註記新增成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
  /incidents/generate-report:
    post:
      tags: [Incidents]
      summary: AI 生成事件報告
      operationId: generateIncidentReport
      security: [{ bearerAuth: [] }]
      x-roles: [team_member, team_manager, super_admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [incident_ids]
              properties:
                incident_ids:
                  type: array
                  items: { type: string }
      responses:
        "200":
          description: AI 報告生成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIGeneratedReport"
  # ============================================
  # Incident Silences
  # ============================================
  /incidents/silences:
    get:
      tags: [Incident Silences]
      summary: 獲取靜音規則列表
      operationId: listSilences
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: 靜音規則列表
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SilenceList"
    post:
      tags: [Incident Silences]
      summary: 創建靜音規則
      operationId: createSilence
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      requestBody:
        $ref: "#/components/requestBodies/SilenceCreateRequest"
      responses:
        "201":
          description: 靜音規則創建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Silence"
  /incidents/silences/{silenceId}:
    get:
      tags: [Incident Silences]
      summary: 獲取單一靜音規則
      operationId: getSilence
      security: [{ bearerAuth: [] }]
      parameters:
        - name: silenceId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 靜音規則詳情
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Silence"
    put:
      tags: [Incident Silences]
      summary: 更新靜音規則
      operationId: updateSilence
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: silenceId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        $ref: "#/components/requestBodies/SilenceUpdateRequest"
      responses:
        "200":
          description: 靜音規則更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Silence"
    delete:
      tags: [Incident Silences]
      summary: 刪除靜音規則
      operationId: deleteSilence
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: silenceId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: 靜音規則刪除成功
  /incidents/silences/{silenceId}/enable:
    post:
      tags: [Incident Silences]
      summary: 啟用靜音規則
      operationId: enableSilence
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: silenceId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 規則已啟用
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"
  /incidents/silences/{silenceId}/disable:
    post:
      tags: [Incident Silences]
      summary: 停用靜音規則
      operationId: disableSilence
      security: [{ bearerAuth: [] }]
      x-roles: [team_manager, super_admin]
      parameters:
        - name: silenceId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: 規則已停用
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OperationResult"

  # ============================================
  # Fallback for omitted paths
  # ============================================
  # ... (other paths are omitted for brevity but would be fully defined here)

# ============================================
# 可重用元件 (Components)
# ============================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      name: page_size
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    SortByParam:
      name: sort_by
      in: query
      schema: { type: string }
    SortOrderParam:
      name: sort_order
      in: query
      schema: { type: string, enum: [asc, desc], default: desc }
    ResourceIdParam:
      name: resourceId
      in: path
      required: true
      schema: { type: string }

  responses:
    BadRequest:
      description: "請求參數錯誤 (400)"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Unauthorized:
      description: "未授權 (401)"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Forbidden:
      description: "無權限 (403)"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    NotFound:
      description: "資源不存在 (404)"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    Conflict:
      description: "資源衝突 (409)"
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }

  requestBodies:
    AuthLoginRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/AuthLoginRequest" }
    TokenRefreshRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/TokenRefreshRequest" }
    ResourceCreateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ResourceCreateRequest" }
    ResourceUpdateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ResourceUpdateRequest" }
    BatchResourceOperation:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/BatchResourceOperation" }
    NetworkScanRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/NetworkScanRequest" }
    ResourceGroupCreateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ResourceGroupCreateRequest" }
    ResourceGroupUpdateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ResourceGroupUpdateRequest" }
    GroupMemberOperation:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/GroupMemberOperation" }
    IncidentCreateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/IncidentCreateRequest" }
    IncidentUpdateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/IncidentUpdateRequest" }
    SilenceCreateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/SilenceCreateRequest" }
    SilenceUpdateRequest:
      required: true
      content:
        application/json:
          schema: { $ref: "#/components/schemas/SilenceUpdateRequest" }

  schemas:
    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
    OperationResult:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
    Pagination:
      type: object
      properties:
        page: { type: integer }
        page_size: { type: integer }
        total_items: { type: integer }
        total_pages: { type: integer }
    MetricDefinition:
      type: object
      properties:
        name: { type: string }
        unit: { type: string }
        description: { type: string }
    MetricQueryRequest:
      type: object
      properties:
        resource_ids: { type: array, items: { type: string } }
        metric: { type: string }
        start_time: { type: string, format: "date-time" }
        end_time: { type: string, format: "date-time" }
    MetricQueryResult:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              resource_id: { type: string }
              metric_name: { type: string }
              data_points:
                type: array
                items:
                  type: object
                  properties:
                    timestamp: { type: string, format: "date-time" }
                    value: { type: number }
    AuthLoginRequest:
      type: object
      properties:
        username: { type: string }
        password: { type: string, format: "password" }
    TokenRefreshRequest:
      type: object
      properties:
        refresh_token: { type: string }
    AuthTokens:
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        expires_in: { type: integer }
    AutocompleteResult:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
    SearchResultItem:
      type: object
      properties:
        type: { type: string }
        score: { type: number }
        item: { type: object }
    DashboardSummary:
      type: object
      properties:
        alerts: { type: object }
        resources: { type: object }
        kpis: { type: object }
    TrendData:
      type: object
      properties:
        period: { type: string }
        data_points: { type: array, items: { type: object } }
    ResourceDistribution:
      type: object
      properties:
        by_status: { type: object }
        by_type: { type: object }
        by_group: { type: array, items: { type: object } }
    Resource:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string }
        status: { type: string }
        ip_address: { type: string }
        group_id: { type: string }
        tags: { type: array, items: { type: string } }
        silences:
          { type: array, items: { $ref: "#/components/schemas/Silence" } }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    ResourceList:
      type: object
      properties:
        items: { type: array, items: { $ref: "#/components/schemas/Resource" } }
        pagination: { $ref: "#/components/schemas/Pagination" }
    ResourceCreateRequest:
      type: object
      properties:
        name: { type: string }
        type: { type: string }
        ip_address: { type: string }
        group_id: { type: string }
    ResourceUpdateRequest:
      type: object
      properties:
        name: { type: string }
        group_id: { type: string }
    BatchResourceOperation:
      type: object
      properties:
        operation: { type: string }
        resource_ids: { type: array, items: { type: string } }
        parameters: { type: object }
    BatchOperationResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              item_id: { type: string }
              success: { type: boolean }
              message: { type: string }
    NetworkScanRequest:
      type: object
      properties:
        cidr: { type: string }
    ScanTaskResponse:
      type: object
      properties:
        task_id: { type: string }
        status: { type: string }
    ScanResult:
      type: object
      properties:
        task_id: { type: string }
        status: { type: string }
        discovered_resources: { type: array, items: { type: object } }
    ResourceGroup:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        resource_count: { type: integer }
    ResourceGroupList:
      type: object
      properties:
        items:
          { type: array, items: { $ref: "#/components/schemas/ResourceGroup" } }
        pagination: { $ref: "#/components/schemas/Pagination" }
    ResourceGroupCreateRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
    ResourceGroupUpdateRequest:
      type: object
      properties:
        name: { type: string }
        description: { type: string }
    GroupMemberOperation:
      type: object
      properties:
        operation: { type: string, enum: [add, remove] }
        resource_ids: { type: array, items: { type: string } }
    Incident:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        severity: { type: string }
        priority: { type: string }
        status: { type: string }
        affected_resources: { type: array, items: { type: string } }
        assignee: { type: string }
        automation_execution_ids: { type: array, items: { type: string } }
        created_at: { type: string, format: "date-time" }
    IncidentList:
      type: object
      properties:
        items: { type: array, items: { $ref: "#/components/schemas/Incident" } }
        pagination: { $ref: "#/components/schemas/Pagination" }
    IncidentCreateRequest:
      type: object
      properties:
        title: { type: string }
        severity: { type: string }
    IncidentUpdateRequest:
      type: object
      properties:
        title: { type: string }
        severity: { type: string }
    AIGeneratedReport:
      type: object
      properties:
        content: { type: string }
    Silence:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        matchers: { type: array, items: { type: object } }
        start_time: { type: string, format: "date-time" }
        end_time: { type: string, format: "date-time" }
        created_by: { type: string }
    SilenceList:
      type: object
      properties:
        items: { type: array, items: { $ref: "#/components/schemas/Silence" } }
        pagination: { $ref: "#/components/schemas/Pagination" }
    SilenceCreateRequest:
      type: object
      properties:
        name: { type: string }
        matchers: { type: array, items: { type: object } }
        start_time: { type: string, format: "date-time" }
        end_time: { type: string, format: "date-time" }
    SilenceUpdateRequest:
      type: object
      properties:
        name: { type: string }
        matchers: { type: array, items: { type: object } }
        start_time: { type: string, format: "date-time" }
        end_time: { type: string, format: "date-time" }
    # ... (other schemas will be fully defined here)
