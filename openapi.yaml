# SRE 平台 API 規格書 (SSOT)
# 版本: 3.0.0
# 更新日期: 2025-09-18
# 描述: 此文件為 SRE 平台前端與後端之間的 API 契約唯一真實來源 (Single Source of Truth)，
#      根據 pages.md 的全面分析進行了重構。
openapi: 3.1.0
info:
  title: SRE 平台 - API 規格書
  description: |
    本 API 規格為 SRE 平台前後端開發的統一數據契約。

    ## 主要功能模組
    - **身份與存取管理**：用戶、團隊、角色和權限管理
    - **資源管理**：基礎設施資源監控和群組管理
    - **事件管理**：告警規則、靜音規則和事件處理
    - **自動化中心**：腳本管理、排程任務和執行日誌
    - **儀表板**：基礎設施洞察和 SRE 戰情室
    - **通知管理**：通知策略、管道和歷史記錄
    - **分析中心**：容量規劃和性能分析
    - **平台設定**：標籤管理、郵件設定、身份驗證

    它定義了所有資源、事件、自動化、管理等模組的介面，
    並遵循 RESTful 設計原則與專案開發規範。
  version: "3.0.0"
  contact:
    name: SRE 平台開發團隊
    email: sre-platform-dev@detectviz.com
    url: https://github.com/detectviz/sre-platform
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://detectviz.com/terms

servers:
  - url: /api/v1
    description: 相對路徑 (適用於代理配置)

# ============================================
# 擴展屬性 (Vendor Extensions)
# ============================================
x-event-lifecycle:
  # 事件狀態機契約
  states: [new, acknowledged, resolved, silenced]
  transitions:
    - { from: new, to: acknowledged, action: "確認" }
    - { from: acknowledged, to: resolved, action: "解決" }
    - { from: new, to: silenced, action: "靜音" }
    - { from: acknowledged, to: silenced, action: "靜音" }

# ============================================
# API 標籤 (Tags)
# ============================================
tags:
  - name: 系統 (System)
    description: "核心系統功能，如健康檢查。"
  - name: 身份驗證 (Auth)
    description: "使用者登入、登出與 SSO 相關功能 (Keycloak 代理)。"
  - name: 儀表板 (Dashboards)
    description: "儀表板管理與資料視覺化 (Grafana 代理)。"
  - name: 事件管理 (Event Management)
    description: "事件、事件規則、靜音規則的管理 (Grafana 代理)。"
  - name: 資源管理 (Resource Management)
    description: "平台納管的基礎設施資源 (CMDB) 與資源群組。"
  - name: 自動化中心 (Automation)
    description: "自動化腳本、排程任務與執行日誌的管理。"
  - name: 分析中心 (Analysis)
    description: "容量規劃、AI 分析等決策支援功能。"
  - name: 平台設定 (Platform Settings)
    description: "平台層級的管理與設定功能，如標籤治理、權限角色等。"
  - name: 個人中心 (User Profile)
    description: "使用者個人資料與偏好設定。"
  - name: 通知管理 (Notification Management)
    description: "通知管道、策略與歷史記錄的管理。"

# ============================================
# API 路徑與端點 (Paths & Endpoints)
# ============================================
paths:
  # ============================================
  # 系統 (System)
  # ============================================
  /healthz:
    get:
      tags: [系統 (System)]
      summary: 服務健康檢查
      operationId: checkHealth
      security: []
      responses: { "200": { description: 服務健康 } }
  /readyz:
    get:
      tags: [系統 (System)]
      summary: 服務就緒檢查
      operationId: checkReadiness
      security: []
      responses: { "200": { description: 服務就緒 } }

  # ============================================
  # 身份驗證 (Auth)
  # ============================================
  /auth/sso/redirect:
    get:
      tags: [身份驗證 (Auth)]
      summary: 獲取 SSO 登入重定向 URL
      operationId: getSsoRedirectUrl
      security: []
      responses: { "200": { description: "成功獲取重定向 URL" } }
  /auth/sso/callback:
    get:
      tags: [身份驗證 (Auth)]
      summary: SSO 登入回呼
      operationId: handleSsoCallback
      security: []
      responses: { "302": { description: "登入成功，重定向至前端應用" } }
  /auth/sso/logout:
    post:
      tags: [身份驗證 (Auth)]
      summary: SSO 登出
      operationId: ssoLogout
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功取得登出 URL" } }

  # ============================================
  # 個人中心 (User Profile)
  # ============================================
  /users/me:
    get:
      tags: [個人中心 (User Profile)]
      summary: 獲取當前登入使用者資訊
      operationId: getCurrentUser
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /users/me/preferences:
    get:
      tags: [個人中心 (User Profile)]
      summary: 獲取個人偏好設定
      operationId: getUserPreferences
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [個人中心 (User Profile)]
      summary: 更新個人偏好設定
      operationId: updateUserPreferences
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }

  # ============================================
  # 平台設定 (Platform Settings) - 人員、團隊、角色
  # ============================================
  /users:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取人員列表
      operationId: listUsers
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /invitations:
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 邀請新人員
      operationId: inviteUser
      security: [{ bearerAuth: [] }]
      responses: { "202": { description: "邀請已成功發送" } }
  /users/{userId}:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取指定人員詳情
      operationId: getUser
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新人員的平台權限
      operationId: updateUserPlatformRoles
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除人員 (軟刪除)
      operationId: deleteUser
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /users/{userId}/internal-status:
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新人員的平台內部啟用狀態
      operationId: updateUserInternalStatus
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
  /teams:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取團隊列表
      operationId: listTeams
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建團隊
      operationId: createTeam
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /teams/{teamId}:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取團隊詳情
      operationId: getTeam
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新團隊
      operationId: updateTeam
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除團隊 (軟刪除)
      operationId: deleteTeam
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /roles:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取角色列表
      operationId: listRoles
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建角色
      operationId: createRole
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /roles/{roleId}:
    put:
      tags: [平台設定 (Platform Settings)]
      summary: 更新角色
      operationId: updateRole
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [平台設定 (Platform Settings)]
      summary: 刪除角色
      operationId: deleteRole
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /permissions:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取所有可用權限列表
      operationId: listPermissions
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /tags:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤治理規則列表
      operationId: listTagGovernanceRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [平台設定 (Platform Settings)]
      summary: 創建新的標籤治理規則
      operationId: createTagGovernanceRule
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /tags/{tagKeyId}/values:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤的允許值列表
      operationId: listTagAllowedValues
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /tags/compliance-report:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取標籤合規性報告
      operationId: getTagComplianceReport
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /audit-logs:
    get:
      tags: [平台設定 (Platform Settings)]
      summary: 獲取審計日誌
      operationId: getAuditLogs
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }

  # ============================================
  # 資源管理 (Resource Management)
  # ============================================
  /resources:
    get:
      tags: [資源管理 (Resource Management)]
      summary: 獲取資源列表
      operationId: listResources
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /resource-groups:
    get:
      tags: [資源管理 (Resource Management)]
      summary: 獲取資源群組列表
      operationId: listResourceGroups
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }

  # ============================================
  # 事件管理 (Event Management)
  # ============================================
  /events:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件列表
      operationId: listEvents
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /events/{eventId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件詳情
      operationId: getEvent
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /events/{eventId}/comments:
    post:
      tags: [事件管理 (Event Management)]
      summary: 為事件新增註記
      operationId: addEventComment
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "新增成功" } }
  /events/{eventId}/comments:
    post:
      tags: [事件管理 (Event Management)]
      summary: 為事件新增註記
      description: "為指定的事件添加一條評論或處理歷史記錄。支援 Markdown 和 @提及。"
      operationId: addEventComment
      security: [{ bearerAuth: [] }]
      parameters:
        - name: eventId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventCommentRequest"
      responses:
        "201":
          description: "註記新增成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHistory"
  /incidents:
    post:
      tags: [事件管理 (Event Management)]
      summary: 合併多個事件為一個事故
      description: "將一組關聯的事件合併成一個更高層級的事故，以便集中處理和追蹤。"
      operationId: createIncidentFromEvents
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IncidentCreateRequest"
      responses:
        "201":
          description: "事故創建成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Incident"
  /event-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則列表
      operationId: listEventRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [事件管理 (Event Management)]
      summary: 創建事件規則
      operationId: createEventRule
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /event-rules/{ruleId}:
    put:
      tags: [事件管理 (Event Management)]
      summary: 更新事件規則
      operationId: updateEventRule
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [事件管理 (Event Management)]
      summary: 刪除事件規則
      operationId: deleteEventRule
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }
  /event-rule-templates:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則範本列表
      operationId: listEventRuleTemplates
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /event-rules/scope-preview:
    post:
      tags: [事件管理 (Event Management)]
      summary: 預覽事件規則影響範圍
      operationId: previewEventRuleScope
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /event-rules/metrics:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取事件規則可用指標
      operationId: listEventRuleMetrics
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /silence-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取靜音規則列表 (一次性)
      operationId: listSilenceRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /recurring-silence-rules:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取週期性靜音規則列表
      operationId: listRecurringSilenceRules
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    post:
      tags: [事件管理 (Event Management)]
      summary: 創建週期性靜音規則
      operationId: createRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "201": { description: "創建成功" } }
  /recurring-silence-rules/{ruleId}:
    get:
      tags: [事件管理 (Event Management)]
      summary: 獲取單一週期性靜音規則
      operationId: getRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
    put:
      tags: [事件管理 (Event Management)]
      summary: 更新週期性靜音規則
      operationId: updateRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "更新成功" } }
    delete:
      tags: [事件管理 (Event Management)]
      summary: 刪除週期性靜音規則
      operationId: deleteRecurringSilenceRule
      security: [{ bearerAuth: [] }]
      responses: { "204": { description: "刪除成功" } }

  # ============================================
  # 通知管理 (Notification Management)
  # ============================================
  /notification-policies:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知策略列表
      operationId: listNotificationPolicies
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /notification-channels:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知管道列表
      operationId: listNotificationChannels
      security: [{ bearerAuth: [] }]
      responses: { "200": { description: "成功" } }
  /notification-history:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取通知歷史記錄
      operationId: getNotificationHistory
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/PageParam"
        - $ref: "#/components/parameters/PageSizeParam"
        - name: status
          in: query
          schema:
            type: string
            enum: [sent, failed, delivered, pending]
      responses:
        "200":
          description: "成功獲取通知歷史列表"
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationHistory"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
  /notification-history/{historyId}:
    get:
      tags: [通知管理 (Notification Management)]
      summary: 獲取單筆通知歷史詳情
      operationId: getNotificationHistoryDetail
      security: [{ bearerAuth: [] }]
      parameters:
        - name: historyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationHistory"
  /notification-history/{historyId}/resend:
    post:
      tags: [通知管理 (Notification Management)]
      summary: 重新發送單條失敗的通知
      operationId: resendNotification
      security: [{ bearerAuth: [] }]
      parameters:
        - name: historyId
          in: path
          required: true
          schema: { type: string }
      responses:
        "202":
          description: "重送請求已接受"

# ============================================
# 可重用元件 (Components)
# ============================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParam:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    PageSizeParam:
      name: page_size
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    SortByParam:
      name: sort_by
      in: query
      schema: { type: string }
    SortOrderParam:
      name: sort_order
      in: query
      schema: { type: string, enum: [asc, desc], default: desc }
  schemas:
    # ============================================
    # 事件管理 Schemas
    # ============================================
    Event:
      type: object
      description: "代表一個完整的事件，包含所有用於UI展示的豐富化資訊"
      properties:
        id: { type: string, example: "evt_2a7d3e9f" }
        summary: { type: string, example: "CPU high on db-mysql-prod-02" }
        severity: { type: string, enum: [CRITICAL, WARNING, INFO] }
        status: { type: string, enum: [FIRING, ACKNOWLEDGED, RESOLVED, MERGED] }
        source: { type: string, example: "Prometheus" }
        triggered_at: { type: string, format: "date-time" }
        acknowledged_at: { type: string, format: "date-time", nullable: true }
        resolved_at: { type: string, format: "date-time", nullable: true }
        assignee:
          type: object
          properties:
            id: { type: string, example: "usr_1a2b3c" }
            name: { type: string, example: "陳大文" }
        resource:
          type: object
          properties:
            id: { type: string, example: "res_b4c5d6" }
            name: { type: string, example: "db-mysql-prod-02" }
            type: { type: string, example: "DATABASE" }
        rule:
          type: object
          properties:
            id: { type: string, example: "rule_e7f8g9" }
            name: { type: string, example: "高 CPU 使用率" }
        trigger_details:
          type: object
          properties:
            threshold: { type: string, example: "CPU > 90%" }
            value: { type: string, example: "92.5%" }
        tags:
          type: array
          items:
            type: object
            properties:
              key: { type: string }
              value: { type: string }
              color: { type: string }
        quick_links:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              url: { type: string, format: "uri" }
        available_actions:
          type: array
          items:
            type: object
            properties:
              key: { type: string }
              label: { type: string }
              api_endpoint: { type: string }
              method: { type: string }
        history_logs:
          type: array
          items:
            $ref: "#/components/schemas/EventHistory"
        related_events:
          type: array
          items:
            $ref: "#/components/schemas/RelatedEvent"
        automation_runs:
          type: array
          items:
            $ref: "#/components/schemas/AutomationRunSummary"
    EventHistory:
      type: object
      properties:
        id: { type: string }
        type: { type: string, enum: [SYSTEM_STATE_CHANGE, USER_COMMENT, AUTOMATION_RUN, ASSIGNEE_CHANGE] }
        actor:
          type: object
          properties:
            type: { type: string, enum: [system, user, rule] }
            id: { type: string }
            name: { type: string }
            avatar_url: { type: string, format: "uri" }
        content: { type: string, description: "支援 Markdown" }
        metadata: { type: object }
        created_at: { type: string, format: "date-time" }
    RelatedEvent:
      type: object
      properties:
        id: { type: string }
        summary: { type: string }
        severity: { type: string }
        status: { type: string }
        triggered_at: { type: string, format: "date-time" }
        correlation_reason:
          type: object
          properties:
            type: { type: string, enum: [TOPOLOGY_DOWNSTREAM, TOPOLOGY_UPSTREAM, TIME, CONTENT, AI] }
            description: { type: string }
            confidence_score: { type: number, format: float }
    AutomationRunSummary:
      type: object
      properties:
        run_id: { type: string }
        script_id: { type: string }
        script_name: { type: string }
        status: { type: string, enum: [SUCCESS, FAILED, RUNNING] }
        triggered_by: { type: string }
        started_at: { type: string, format: "date-time" }
        duration_ms: { type: integer }
        summary_log: { type: string }
    EventCommentRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          description: "評論內容，支援 Markdown 和 @提及"
    IncidentCreateRequest:
      type: object
      required: [title, severity, event_ids]
      properties:
        title: { type: string, description: "新事故的標題" }
        severity: { type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW] }
        assignee_id: { type: string, description: "指派處理事故的使用者或團隊ID" }
        event_ids:
          type: array
          items:
            type: string
          description: "要合併到此事故中的事件ID列表"
    Incident:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        status: { type: string, enum: [investigating, identified, monitoring, resolved] }
        severity: { type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW] }
        assignee_id: { type: string, nullable: true }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    UserPlatformRolesUpdateRequest:
      type: object
      properties:
        team_ids:
          type: array
          items: { type: string }
        role_ids:
          type: array
          items: { type: string }
    # ============================================
    # 事件規則 (Grafana 代理) Schemas
    # ============================================
    EventRule:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        # ... and other fields representing a simplified rule
    EventRuleTemplate:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        template_data: { type: object, description: "預填所有精靈步驟的數據" }
    EventRuleScopePreview:
      type: object
      properties:
        matched_resources_count: { type: integer }
        sample_resources:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              name: { type: string }
    EventRuleMetric:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string }
        query_template: { type: string, description: "後端用於生成查詢的模板" }

    # Other placeholder schemas
    User:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        email: { type: string }
        name: { type: string }
        avatar_url: { type: string, nullable: true }
        is_active: { type: boolean }
        last_login_at: { type: string, format: "date-time", nullable: true }
        roles:
          type: array
          items: { type: string }
        teams:
          type: array
          items: { type: string }
    Team:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        leader_id: { type: string, nullable: true }
        member_count: { type: integer }
        subscriber_count: { type: integer }
    Role:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        is_built_in: { type: boolean }
        user_count: { type: integer, description: "使用此角色的用戶數量" }
    Resource:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string }
        status: { type: string }
        ip_address: { type: string, nullable: true }
        team_id: { type: string, nullable: true }
        tags:
          type: array
          items:
            type: object
            properties:
              key: { type: string }
              value: { type: string }
    Silence:
      type: object
      description: "代表一個從 Grafana API 獲取的一次性靜音規則"
      properties:
        id: { type: string }
        matchers:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              value: { type: string }
              isEqual: { type: boolean }
              isRegex: { type: boolean }
        startsAt: { type: string, format: "date-time" }
        endsAt: { type: string, format: "date-time" }
        createdBy: { type: string }
        comment: { type: string }
        status:
          type: object
          properties:
            state: { type: string, enum: [expired, active, pending] }
    RecurringSilenceRule:
      type: object
      description: "平台核心功能：週期性靜音規則"
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        matchers:
          type: array
          items:
            type: object
            properties:
              name: { type: string }
              value: { type: string }
              isRegex: { type: boolean }
        cron_expression: { type: string }
        duration_minutes: { type: integer }
        timezone: { type: string }
        is_enabled: { type: boolean }
        creator_id: { type: string, nullable: true }
        created_at: { type: string, format: "date-time" }
        updated_at: { type: string, format: "date-time" }
    # ============================================
    # 標籤治理 Schemas
    # ============================================
    TagKey:
      type: object
      description: "標籤治理規則的定義"
      properties:
        id: { type: string }
        key_name: { type: string }
        description: { type: string, nullable: true }
        is_required: { type: boolean }
        validation_regex: { type: string, nullable: true }
        compliance_category: { type: string, nullable: true }
        usage_count: { type: integer }
        enforcement_level: { type: string, enum: [advisory, warning, blocking] }
    TagAllowedValue:
      type: object
      description: "標籤鍵的預定義允許值"
      properties:
        id: { type: string }
        tag_key_id: { type: string }
        value: { type: string }
        color: { type: string, nullable: true }
    TagComplianceViolation:
      type: object
      description: "單一的標籤不合規記錄"
      properties:
        resource_id: { type: string }
        resource_name: { type: string }
        violation_type: { type: string, enum: [missing_required, invalid_value, unknown_key] }
        tag_key: { type: string }
        expected_value: { type: string, nullable: true }
        actual_value: { type: string, nullable: true }
        severity: { type: string, enum: [low, medium, high] }
        detected_at: { type: string, format: "date-time" }
    TagComplianceReport:
      type: object
      description: "標籤合規性的總結報告"
      properties:
        summary:
          type: object
          properties:
            compliance_score: { type: number, format: float }
            total_resources_scanned: { type: integer }
            violating_resources_count: { type: integer }
        violations:
          type: array
          items:
            $ref: "#/components/schemas/TagComplianceViolation"
    NotificationHistory:
      type: object
      properties:
        id: { type: string }
        event_id: { type: string, nullable: true }
        policy_id: { type: string, nullable: true }
        channel_name: { type: string }
        recipient: { type: string }
        status: { type: string, enum: [pending, sent, failed, delivered] }
        error_message: { type: string, nullable: true }
        raw_payload: { type: object, description: "從 Grafana Webhook 接收到的原始 JSON" }
        sent_at: { type: string, format: "date-time", nullable: true }
        created_at: { type: string, format: "date-time" }
