/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得事件列表
         * @description 依條件查詢事件列表，支援狀態、嚴重性、資源與時間範圍等過濾條件。
         */
        get: operations["listEvents"];
        put?: never;
        /**
         * 建立事件
         * @description 手動建立事件記錄，常用於導入外部事件或測試用途。
         */
        post: operations["createEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件唯一識別碼。 */
                event_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得事件詳情
         * @description 回傳事件基本資訊、處理歷史、關聯事件與自動化執行情況。
         */
        get: operations["getEvent"];
        /**
         * 更新事件
         * @description 覆寫事件主要欄位與狀態，適用於同步外部資料。
         */
        put: operations["updateEvent"];
        post?: never;
        /**
         * 刪除事件
         * @description 移除指定事件，僅限測試或資料清理使用。
         */
        delete: operations["deleteEvent"];
        options?: never;
        head?: never;
        /**
         * 局部更新事件
         * @description 僅更新事件狀態、指派人員或標籤等欄位。
         */
        patch: operations["patchEvent"];
        trace?: never;
    };
    "/event-rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得事件規則列表
         * @description 查詢事件規則，支援依啟用狀態與嚴重性篩選。
         */
        get: operations["listEventRules"];
        put?: never;
        /**
         * 建立事件規則
         * @description 建立新的事件觸發規則並設定自動化動作。
         */
        post: operations["createEventRule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event-rules/{rule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件規則唯一識別碼。 */
                rule_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得事件規則詳情
         * @description 回傳指定規則的觸發條件、自動化設定與標籤篩選條件。
         */
        get: operations["getEventRule"];
        /**
         * 更新事件規則
         * @description 覆寫規則設定，包含條件、標籤與自動化腳本。
         */
        put: operations["updateEventRule"];
        post?: never;
        /**
         * 刪除事件規則
         * @description 移除不再使用的事件規則。
         */
        delete: operations["deleteEventRule"];
        options?: never;
        head?: never;
        /**
         * 局部更新事件規則
         * @description 更新規則啟用狀態、描述或自動化設定等部分欄位。
         */
        patch: operations["patchEventRule"];
        trace?: never;
    };
    "/silences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得靜音規則列表
         * @description 查詢靜音規則，支援依靜音類型與啟用狀態篩選。
         */
        get: operations["listSilences"];
        put?: never;
        /**
         * 建立靜音規則
         * @description 建立新的靜音規則並設定範圍與排程。
         */
        post: operations["createSilence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/silences/{silence_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 靜音規則唯一識別碼。 */
                silence_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得靜音規則詳情
         * @description 回傳靜音規則排程、範圍與通知設定。
         */
        get: operations["getSilence"];
        /**
         * 更新靜音規則
         * @description 覆寫靜音排程與範圍設定。
         */
        put: operations["updateSilence"];
        post?: never;
        /**
         * 刪除靜音規則
         * @description 移除靜音規則並恢復通知。
         */
        delete: operations["deleteSilence"];
        options?: never;
        head?: never;
        /**
         * 局部更新靜音規則
         * @description 更新啟用狀態或通知選項等部分欄位。
         */
        patch: operations["patchSilence"];
        trace?: never;
    };
    "/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得資源列表
         * @description 查詢資源清單，支援依狀態、類型、標籤與群組篩選。
         */
        get: operations["listResources"];
        put?: never;
        /**
         * 建立資源
         * @description 新增受監控的資源並指派所屬群組與標籤。
         */
        post: operations["createResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/{resource_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源唯一識別碼。 */
                resource_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得資源詳情
         * @description 回傳資源的健康狀態、效能指標與標籤設定。
         */
        get: operations["getResource"];
        /**
         * 更新資源
         * @description 覆寫資源基本資訊與健康狀態。
         */
        put: operations["updateResource"];
        post?: never;
        /**
         * 刪除資源
         * @description 移除不再需要監控的資源。
         */
        delete: operations["deleteResource"];
        options?: never;
        head?: never;
        /**
         * 局部更新資源
         * @description 更新資源狀態或標籤等部分欄位。
         */
        patch: operations["patchResource"];
        trace?: never;
    };
    "/resource-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得資源群組列表
         * @description 查詢資源群組，包含成員統計與健康狀態摘要。
         */
        get: operations["listResourceGroups"];
        put?: never;
        /**
         * 建立資源群組
         * @description 建立新的資源群組並配置負責團隊與成員。
         */
        post: operations["createResourceGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resource-groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源群組唯一識別碼。 */
                group_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得資源群組詳情
         * @description 回傳資源群組成員、健康統計與訂閱者資訊。
         */
        get: operations["getResourceGroup"];
        /**
         * 更新資源群組
         * @description 覆寫群組基本資訊與資源成員設定。
         */
        put: operations["updateResourceGroup"];
        post?: never;
        /**
         * 刪除資源群組
         * @description 移除資源群組並釋放成員。
         */
        delete: operations["deleteResourceGroup"];
        options?: never;
        head?: never;
        /**
         * 局部更新資源群組
         * @description 更新負責團隊或訂閱者等部分欄位。
         */
        patch: operations["patchResourceGroup"];
        trace?: never;
    };
    "/topology": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得拓撲視圖列表
         * @description 回傳可用的拓撲視圖設定與節點資料。
         */
        get: operations["listTopologies"];
        put?: never;
        /**
         * 建立拓撲視圖
         * @description 建立新的拓撲配置與節點關聯。
         */
        post: operations["createTopology"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topology/{topology_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 拓撲視圖唯一識別碼。 */
                topology_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得拓撲視圖詳情
         * @description 回傳拓撲節點、連線與最後同步時間。
         */
        get: operations["getTopology"];
        /**
         * 更新拓撲視圖
         * @description 覆寫拓撲節點與連線設定。
         */
        put: operations["updateTopology"];
        post?: never;
        /**
         * 刪除拓撲視圖
         * @description 移除不再使用的拓撲配置。
         */
        delete: operations["deleteTopology"];
        options?: never;
        head?: never;
        /**
         * 局部更新拓撲視圖
         * @description 更新拓撲說明或布局設定。
         */
        patch: operations["patchTopology"];
        trace?: never;
    };
    "/dashboards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得儀表板列表
         * @description 查詢儀表板資訊，支援依分類與是否發布篩選。
         */
        get: operations["listDashboards"];
        put?: never;
        /**
         * 建立儀表板
         * @description 建立新儀表板與布局設定。
         */
        post: operations["createDashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dashboards/{dashboard_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 儀表板唯一識別碼。 */
                dashboard_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得儀表板詳情
         * @description 回傳儀表板卡片配置、KPI 與權限設定。
         */
        get: operations["getDashboard"];
        /**
         * 更新儀表板
         * @description 覆寫儀表板卡片與權限設定。
         */
        put: operations["updateDashboard"];
        post?: never;
        /**
         * 刪除儀表板
         * @description 移除不再使用的儀表板。
         */
        delete: operations["deleteDashboard"];
        options?: never;
        head?: never;
        /**
         * 局部更新儀表板
         * @description 更新儀表板發布狀態或標籤等部分欄位。
         */
        patch: operations["patchDashboard"];
        trace?: never;
    };
    "/insights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得分析洞察列表
         * @description 查詢 AI 洞察與容量規劃報告。
         */
        get: operations["listInsights"];
        put?: never;
        /**
         * 建立分析洞察
         * @description 建立新的分析報告或預測結果。
         */
        post: operations["createInsight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/insights/{insight_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 洞察報告唯一識別碼。 */
                insight_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得分析洞察詳情
         * @description 回傳洞察內容、圖表資料與建議。
         */
        get: operations["getInsight"];
        /**
         * 更新分析洞察
         * @description 覆寫洞察內容與建議。
         */
        put: operations["updateInsight"];
        post?: never;
        /**
         * 刪除分析洞察
         * @description 移除已過期或不需要的洞察報告。
         */
        delete: operations["deleteInsight"];
        options?: never;
        head?: never;
        /**
         * 局部更新分析洞察
         * @description 更新洞察狀態或標籤等部分欄位。
         */
        patch: operations["patchInsight"];
        trace?: never;
    };
    "/war-room": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得戰情室列表
         * @description 查詢 SRE 戰情室儀表板與進行中的會議資訊。
         */
        get: operations["listWarRooms"];
        put?: never;
        /**
         * 建立戰情室
         * @description 建立新的戰情室會議與儀表板設定。
         */
        post: operations["createWarRoom"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/war-room/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 戰情室會議唯一識別碼。 */
                session_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得戰情室詳情
         * @description 回傳戰情室時間軸、關聯事件與參與者。
         */
        get: operations["getWarRoom"];
        /**
         * 更新戰情室
         * @description 覆寫戰情室時間軸與參與者設定。
         */
        put: operations["updateWarRoom"];
        post?: never;
        /**
         * 關閉戰情室
         * @description 結束戰情室並歸檔紀錄。
         */
        delete: operations["deleteWarRoom"];
        options?: never;
        head?: never;
        /**
         * 局部更新戰情室
         * @description 更新戰情室狀態或筆記等部分欄位。
         */
        patch: operations["patchWarRoom"];
        trace?: never;
    };
    "/scripts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得腳本列表
         * @description 查詢自動化腳本清單與最後執行狀態。
         */
        get: operations["listScripts"];
        put?: never;
        /**
         * 建立腳本
         * @description 建立新的自動化腳本並設定內容。
         */
        post: operations["createScript"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scripts/{script_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 自動化腳本唯一識別碼。 */
                script_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得腳本詳情
         * @description 回傳腳本內容、版本資訊與標籤。
         */
        get: operations["getScript"];
        /**
         * 更新腳本
         * @description 覆寫腳本內容與描述。
         */
        put: operations["updateScript"];
        post?: never;
        /**
         * 刪除腳本
         * @description 移除不再使用的腳本。
         */
        delete: operations["deleteScript"];
        options?: never;
        head?: never;
        /**
         * 局部更新腳本
         * @description 更新腳本標籤或描述等部分欄位。
         */
        patch: operations["patchScript"];
        trace?: never;
    };
    "/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得排程列表
         * @description 查詢自動化排程設定與下一次執行時間。
         */
        get: operations["listSchedules"];
        put?: never;
        /**
         * 建立排程
         * @description 建立腳本排程並設定 Cron 與通知策略。
         */
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schedules/{schedule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排程唯一識別碼。 */
                schedule_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得排程詳情
         * @description 回傳排程時間設定、並發與重試策略。
         */
        get: operations["getSchedule"];
        /**
         * 更新排程
         * @description 覆寫排程設定與通知策略。
         */
        put: operations["updateSchedule"];
        post?: never;
        /**
         * 刪除排程
         * @description 移除排程並停止執行。
         */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        /**
         * 局部更新排程
         * @description 更新排程啟用狀態或通知設定。
         */
        patch: operations["patchSchedule"];
        trace?: never;
    };
    "/executions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得執行日誌列表
         * @description 查詢腳本執行歷史與狀態。
         */
        get: operations["listExecutions"];
        put?: never;
        /**
         * 建立執行記錄
         * @description 手動建立腳本執行記錄或觸發腳本。
         */
        post: operations["createExecution"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/executions/{execution_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 執行記錄唯一識別碼。 */
                execution_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得執行記錄詳情
         * @description 回傳執行輸出、錯誤資訊與關聯事件。
         */
        get: operations["getExecution"];
        /**
         * 更新執行記錄
         * @description 覆寫執行紀錄內容或補充資訊。
         */
        put: operations["updateExecution"];
        post?: never;
        /**
         * 刪除執行記錄
         * @description 移除舊的執行記錄。
         */
        delete: operations["deleteExecution"];
        options?: never;
        head?: never;
        /**
         * 局部更新執行記錄
         * @description 更新執行狀態或註解。
         */
        patch: operations["patchExecution"];
        trace?: never;
    };
    "/notification-policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得通知策略列表
         * @description 查詢通知策略與關聯管道。
         */
        get: operations["listNotificationPolicies"];
        put?: never;
        /**
         * 建立通知策略
         * @description 建立新的通知策略並設定接收者與管道。
         */
        post: operations["createNotificationPolicy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification-policies/{policy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知策略唯一識別碼。 */
                policy_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得通知策略詳情
         * @description 回傳策略條件、管道與接收者設定。
         */
        get: operations["getNotificationPolicy"];
        /**
         * 更新通知策略
         * @description 覆寫通知策略條件、接收者與管道設定。
         */
        put: operations["updateNotificationPolicy"];
        post?: never;
        /**
         * 刪除通知策略
         * @description 移除不再使用的通知策略。
         */
        delete: operations["deleteNotificationPolicy"];
        options?: never;
        head?: never;
        /**
         * 局部更新通知策略
         * @description 更新通知策略狀態或優先級。
         */
        patch: operations["patchNotificationPolicy"];
        trace?: never;
    };
    "/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得通知管道列表
         * @description 查詢通知管道狀態與設定。
         */
        get: operations["listNotificationChannels"];
        put?: never;
        /**
         * 建立通知管道
         * @description 建立新的通知管道並測試連線。
         */
        post: operations["createNotificationChannel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channel_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知管道唯一識別碼。 */
                channel_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得通知管道詳情
         * @description 回傳通知管道設定與測試結果。
         */
        get: operations["getNotificationChannel"];
        /**
         * 更新通知管道
         * @description 覆寫通知管道設定。
         */
        put: operations["updateNotificationChannel"];
        post?: never;
        /**
         * 刪除通知管道
         * @description 移除通知管道並釋放相關策略。
         */
        delete: operations["deleteNotificationChannel"];
        options?: never;
        head?: never;
        /**
         * 局部更新通知管道
         * @description 更新通知管道狀態或描述。
         */
        patch: operations["patchNotificationChannel"];
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得通知歷史列表
         * @description 查詢通知發送記錄與狀態。
         */
        get: operations["listNotifications"];
        put?: never;
        /**
         * 建立通知記錄
         * @description 手動建立通知歷史，常用於測試。
         */
        post: operations["createNotification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/{notification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知記錄唯一識別碼。 */
                notification_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得通知記錄詳情
         * @description 回傳通知發送內容、嘗試紀錄與技術細節。
         */
        get: operations["getNotification"];
        put?: never;
        post?: never;
        /**
         * 刪除通知記錄
         * @description 清理歷史通知紀錄。
         */
        delete: operations["deleteNotification"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得標籤列表
         * @description 查詢系統內建與自訂標籤。
         */
        get: operations["listLabels"];
        put?: never;
        /**
         * 建立標籤
         * @description 建立新的標籤鍵值組。
         */
        post: operations["createLabel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/labels/{label_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 標籤唯一識別碼。 */
                label_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得標籤詳情
         * @description 回傳標籤分類、描述與建立者資訊。
         */
        get: operations["getLabel"];
        /**
         * 更新標籤
         * @description 覆寫標籤資訊與描述。
         */
        put: operations["updateLabel"];
        post?: never;
        /**
         * 刪除標籤
         * @description 移除標籤定義。
         */
        delete: operations["deleteLabel"];
        options?: never;
        head?: never;
        /**
         * 局部更新標籤
         * @description 更新標籤描述或顏色。
         */
        patch: operations["patchLabel"];
        trace?: never;
    };
    "/mail-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得郵件設定列表
         * @description 查詢 SMTP 郵件設定與狀態。
         */
        get: operations["listMailSettings"];
        put?: never;
        /**
         * 建立郵件設定
         * @description 建立新的 SMTP 郵件設定。
         */
        post: operations["createMailSetting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mail-settings/{setting_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 郵件設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得郵件設定詳情
         * @description 回傳 SMTP 參數與測試狀態。
         */
        get: operations["getMailSetting"];
        /**
         * 更新郵件設定
         * @description 覆寫 SMTP 連線資訊與寄件者設定。
         */
        put: operations["updateMailSetting"];
        post?: never;
        /**
         * 刪除郵件設定
         * @description 移除 SMTP 設定並停止寄送。
         */
        delete: operations["deleteMailSetting"];
        options?: never;
        head?: never;
        /**
         * 局部更新郵件設定
         * @description 更新啟用狀態或測試收件者。
         */
        patch: operations["patchMailSetting"];
        trace?: never;
    };
    "/auth-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得身份驗證設定列表
         * @description 查詢 OIDC 身份驗證設定。
         */
        get: operations["listAuthSettings"];
        put?: never;
        /**
         * 建立身份驗證設定
         * @description 建立新的 OIDC 認證設定。
         */
        post: operations["createAuthSetting"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth-settings/{setting_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 身份驗證設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得身份驗證設定詳情
         * @description 回傳 OIDC 端點、用戶端憑證與測試狀態。
         */
        get: operations["getAuthSetting"];
        /**
         * 更新身份驗證設定
         * @description 覆寫 OIDC 連線資訊與授權範圍。
         */
        put: operations["updateAuthSetting"];
        post?: never;
        /**
         * 刪除身份驗證設定
         * @description 移除 OIDC 整合設定。
         */
        delete: operations["deleteAuthSetting"];
        options?: never;
        head?: never;
        /**
         * 局部更新身份驗證設定
         * @description 更新啟用狀態或同步選項。
         */
        patch: operations["patchAuthSetting"];
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得使用者個人資料列表
         * @description 回傳可存取的使用者個人資料，預設僅包含目前登入者。
         */
        get: operations["listProfiles"];
        put?: never;
        /**
         * 建立使用者個人資料
         * @description 由管理員建立新使用者資料。
         */
        post: operations["createProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 使用者唯一識別碼，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得使用者個人資料
         * @description 回傳指定使用者的個人資訊與角色。
         */
        get: operations["getProfile"];
        /**
         * 更新使用者個人資料
         * @description 覆寫使用者顯示名稱、語言與時區。
         */
        put: operations["updateProfile"];
        post?: never;
        /**
         * 刪除使用者個人資料
         * @description 移除使用者資料並停用帳號。
         */
        delete: operations["deleteProfile"];
        options?: never;
        head?: never;
        /**
         * 局部更新個人資料
         * @description 更新語言、時區或狀態等欄位。
         */
        patch: operations["patchProfile"];
        trace?: never;
    };
    "/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 取得偏好設定列表
         * @description 查詢使用者偏好設定資料。
         */
        get: operations["listPreferences"];
        put?: never;
        /**
         * 建立偏好設定
         * @description 建立使用者偏好設定記錄。
         */
        post: operations["createPreference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preferences/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 偏好設定對應的使用者 ID，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        /**
         * 取得指定使用者偏好設定
         * @description 回傳使用者的主題、通知與顯示偏好。
         */
        get: operations["getPreference"];
        /**
         * 更新偏好設定
         * @description 覆寫使用者偏好設定。
         */
        put: operations["updatePreference"];
        post?: never;
        /**
         * 刪除偏好設定
         * @description 移除偏好設定並還原為系統預設值。
         */
        delete: operations["deletePreference"];
        options?: never;
        head?: never;
        /**
         * 局部更新偏好設定
         * @description 更新通知或顯示相關設定。
         */
        patch: operations["patchPreference"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorResponse: {
            /** @description 錯誤代碼，對應 x-error-codes。 */
            code: string;
            /** @description 錯誤訊息描述。 */
            message: string;
            /** @description 進一步的錯誤細節。 */
            details?: string[];
        };
        /** @description 簡化的使用者參考資訊。 */
        UserReference: {
            /** Format: uuid */
            id: string;
            username: string;
            display_name?: string;
            /** Format: email */
            email?: string;
        };
        /** @description 使用者所屬團隊資訊。 */
        TeamReference: {
            id: string;
            name: string;
        };
        /** @description 通知接收者資訊。 */
        RecipientReference: {
            id: string;
            display_name?: string;
            /** @description 接收者類型 (user/team/role)。 */
            type?: string;
        };
        /** @description 單次通知嘗試紀錄。 */
        NotificationAttempt: {
            /** Format: date-time */
            attempt_at?: string;
            /** @enum {string} */
            status?: "success" | "failed" | "retrying";
            response_code?: number;
            response_body?: string;
            error_message?: string;
        };
        /** @description 事件處理歷史項目。 */
        EventTimelineEntry: {
            /** Format: date-time */
            timestamp?: string;
            action?: string;
            actor?: components["schemas"]["UserReference"];
            notes?: string;
            metadata?: {
                [key: string]: unknown;
            };
        };
        /** @description 關聯事件資訊。 */
        EventRelatedItem: {
            event_id?: string;
            summary?: string;
            /** @enum {string} */
            severity?: "critical" | "warning" | "info";
            /** @enum {string} */
            status?: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
        };
        /** @description 事件觸發的自動化動作。 */
        AutomationAction: {
            script_id?: string;
            script_name?: string;
            /** @enum {string} */
            status?: "pending" | "running" | "success" | "failed";
            /** Format: date-time */
            started_at?: string;
            /** Format: date-time */
            completed_at?: string;
            output_summary?: string;
        };
        /** @description 事件列表所需欄位。 */
        Event: {
            /** Format: uuid */
            id: string;
            /** @description 外部事件識別碼。 */
            event_key?: string;
            summary: string;
            description?: string;
            /** @enum {string} */
            status: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
            /** @enum {string} */
            severity: "critical" | "warning" | "info";
            service_impact?: string;
            resource_id?: string;
            resource_name?: string;
            rule_id?: string;
            rule_name?: string;
            metric?: string;
            trigger_threshold?: string;
            trigger_value?: string;
            unit?: string;
            /** Format: date-time */
            trigger_time: string;
            assignee?: components["schemas"]["UserReference"];
            /** Format: date-time */
            acknowledged_at?: string;
            /** Format: date-time */
            resolved_at?: string;
            tags?: string[];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        EventDetail: components["schemas"]["Event"] & {
            description?: string;
            detection_source?: string;
            timeline?: components["schemas"]["EventTimelineEntry"][];
            related_events?: components["schemas"]["EventRelatedItem"][];
            automation_actions?: components["schemas"]["AutomationAction"][];
            attachments?: string[];
        };
        EventCreateRequest: {
            summary: string;
            description?: string;
            /** @enum {string} */
            status: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
            /** @enum {string} */
            severity: "critical" | "warning" | "info";
            service_impact?: string;
            resource_id?: string;
            rule_id?: string;
            metric?: string;
            trigger_threshold?: string;
            trigger_value?: string;
            unit?: string;
            /** Format: date-time */
            trigger_time: string;
            tags?: string[];
        };
        EventUpdateRequest: components["schemas"]["EventCreateRequest"] & {
            /** @enum {string} */
            status?: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
            assignee_id?: string;
            /** Format: date-time */
            acknowledged_at?: string;
            /** Format: date-time */
            resolved_at?: string;
            detection_source?: string;
        };
        EventPatchRequest: {
            /** @enum {string} */
            status?: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
            assignee_id?: string;
            tags?: string[];
            /** Format: date-time */
            acknowledged_at?: string;
            /** Format: date-time */
            resolved_at?: string;
            notes?: string;
        };
        EventListResponse: {
            items?: components["schemas"]["Event"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        LabelSelector: {
            key: string;
            /**
             * @default equals
             * @enum {string}
             */
            operator: "equals" | "not_equals" | "exists";
            value?: string;
        };
        RuleCondition: {
            metric: string;
            /** @enum {string} */
            comparison: ">" | ">=" | "<" | "<=" | "==";
            threshold: number;
            unit?: string;
            duration_minutes?: number;
            /** @enum {string} */
            severity?: "critical" | "warning" | "info";
        };
        ConditionGroup: {
            group_id?: string;
            /**
             * @description group_id 內條件的邏輯關係。
             * @enum {string}
             */
            logic?: "all" | "any";
            conditions: components["schemas"]["RuleCondition"][];
        };
        EventRule: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
            enabled: boolean;
            /** @enum {string} */
            severity: "critical" | "warning" | "info";
            /** @description 監控對象類型 (resource/resource_group/tag)。 */
            target_type?: string;
            label_selectors?: components["schemas"]["LabelSelector"][];
            condition_groups?: components["schemas"]["ConditionGroup"][];
            automation_enabled?: boolean;
            script_id?: string;
            script_name?: string;
            automation_parameters?: {
                [key: string]: unknown;
            };
            created_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        EventRuleCreateRequest: {
            name: string;
            description?: string;
            /** @enum {string} */
            severity: "critical" | "warning" | "info";
            target_type?: string;
            label_selectors?: components["schemas"]["LabelSelector"][];
            condition_groups: components["schemas"]["ConditionGroup"][];
            automation_enabled?: boolean;
            script_id?: string;
            automation_parameters?: {
                [key: string]: unknown;
            };
        };
        EventRuleUpdateRequest: components["schemas"]["EventRuleCreateRequest"] & {
            enabled?: boolean;
        };
        EventRulePatchRequest: {
            name?: string;
            description?: string;
            enabled?: boolean;
            /** @enum {string} */
            severity?: "critical" | "warning" | "info";
            automation_enabled?: boolean;
            script_id?: string;
        };
        EventRuleListResponse: {
            items?: components["schemas"]["EventRule"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        SilenceMatcher: {
            key: string;
            /**
             * @default equals
             * @enum {string}
             */
            operator: "equals" | "not_equals" | "regex";
            value: string;
        };
        SilenceRepeatPattern: {
            /** @enum {string} */
            repeat_mode?: "once" | "daily" | "weekly" | "monthly";
            days_of_week?: string[];
            days_of_month?: number[];
            duration_hours?: number;
            /** Format: date-time */
            end_at?: string;
            max_repeats?: number;
        };
        Silence: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
            /** @enum {string} */
            silence_type: "single" | "recurring" | "condition";
            /** @enum {string} */
            scope: "global" | "resource" | "resource_group" | "team" | "labels";
            matchers?: components["schemas"]["SilenceMatcher"][];
            /** Format: date-time */
            start_time?: string;
            /** Format: date-time */
            end_time?: string;
            timezone?: string;
            repeat_pattern?: components["schemas"]["SilenceRepeatPattern"];
            is_enabled?: boolean;
            notify_on_start?: boolean;
            notify_on_end?: boolean;
            created_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        SilenceCreateRequest: {
            name: string;
            description?: string;
            /** @enum {string} */
            silence_type: "single" | "recurring" | "condition";
            /** @enum {string} */
            scope: "global" | "resource" | "resource_group" | "team" | "labels";
            matchers?: components["schemas"]["SilenceMatcher"][];
            /** Format: date-time */
            start_time: string;
            /** Format: date-time */
            end_time: string;
            timezone?: string;
            repeat_pattern?: components["schemas"]["SilenceRepeatPattern"];
            notify_on_start?: boolean;
            notify_on_end?: boolean;
        };
        SilenceUpdateRequest: components["schemas"]["SilenceCreateRequest"] & {
            is_enabled?: boolean;
        };
        SilencePatchRequest: {
            name?: string;
            description?: string;
            is_enabled?: boolean;
            notify_on_start?: boolean;
            notify_on_end?: boolean;
            /** Format: date-time */
            end_time?: string;
        };
        SilenceListResponse: {
            items?: components["schemas"]["Silence"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        Resource: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            status: "healthy" | "warning" | "critical" | "maintenance";
            /** @enum {string} */
            type: "server" | "database" | "cache" | "gateway" | "service";
            ip_address?: string;
            location?: string;
            environment?: string;
            team?: string;
            os?: string;
            cpu_usage?: number;
            memory_usage?: number;
            disk_usage?: number;
            network_in_mbps?: number;
            network_out_mbps?: number;
            tags?: string[];
            label_values?: components["schemas"]["Label"][];
            group_ids?: string[];
            last_event_count?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ResourceCreateRequest: {
            name: string;
            /** @enum {string} */
            status: "healthy" | "warning" | "critical" | "maintenance";
            /** @enum {string} */
            type: "server" | "database" | "cache" | "gateway" | "service";
            ip_address: string;
            location?: string;
            environment?: string;
            team?: string;
            os?: string;
            tags?: string[];
            group_ids?: string[];
        };
        ResourceUpdateRequest: components["schemas"]["ResourceCreateRequest"] & {
            last_event_count?: number;
        };
        ResourcePatchRequest: {
            /** @enum {string} */
            status?: "healthy" | "warning" | "critical" | "maintenance";
            team?: string;
            tags?: string[];
            group_ids?: string[];
        };
        ResourceListResponse: {
            items?: components["schemas"]["Resource"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        ResourceGroup: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
            owner?: components["schemas"]["UserReference"];
            owner_team?: string;
            member_count?: number;
            subscriber_count?: number;
            status_summary?: {
                healthy?: number;
                warning?: number;
                critical?: number;
            };
            resource_ids?: string[];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ResourceGroupCreateRequest: {
            name: string;
            description?: string;
            owner_id?: string;
            owner_team?: string;
            resource_ids?: string[];
        };
        ResourceGroupUpdateRequest: components["schemas"]["ResourceGroupCreateRequest"] & {
            subscriber_ids?: string[];
        };
        ResourceGroupPatchRequest: {
            description?: string;
            owner_id?: string;
            owner_team?: string;
            resource_ids?: string[];
            subscriber_ids?: string[];
        };
        ResourceGroupListResponse: {
            items?: components["schemas"]["ResourceGroup"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        TopologyNode: {
            id?: string;
            resource_id?: string;
            name?: string;
            type?: string;
            status?: string;
            environment?: string;
            team?: string;
            position?: {
                x?: number;
                y?: number;
            };
        };
        TopologyEdge: {
            id?: string;
            source_id?: string;
            target_id?: string;
            connection_type?: string;
            latency_ms?: number;
            throughput_mbps?: number;
        };
        TopologyView: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
            /** @enum {string} */
            layout?: "force_directed" | "hierarchical" | "grid";
            nodes: components["schemas"]["TopologyNode"][];
            edges: components["schemas"]["TopologyEdge"][];
            /** Format: date-time */
            last_synced_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        TopologyCreateRequest: {
            name: string;
            description?: string;
            layout?: string;
            nodes: components["schemas"]["TopologyNode"][];
            edges: components["schemas"]["TopologyEdge"][];
        };
        TopologyUpdateRequest: components["schemas"]["TopologyCreateRequest"] & {
            /** Format: date-time */
            last_synced_at?: string;
        };
        TopologyPatchRequest: {
            description?: string;
            layout?: string;
            nodes?: components["schemas"]["TopologyNode"][];
            edges?: components["schemas"]["TopologyEdge"][];
        };
        TopologyListResponse: {
            items?: components["schemas"]["TopologyView"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        Dashboard: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            category: "war_room" | "infrastructure" | "custom";
            description?: string;
            owner?: components["schemas"]["UserReference"];
            tags?: string[];
            is_published?: boolean;
            is_default?: boolean;
            /** Format: date-time */
            published_at?: string;
            kpi_summary?: {
                [key: string]: number;
            };
            /** @description 儀表板小工具配置。 */
            widgets?: {
                [key: string]: unknown;
            }[];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        DashboardCreateRequest: {
            name: string;
            /** @enum {string} */
            category: "war_room" | "infrastructure" | "custom";
            description?: string;
            tags?: string[];
            widgets?: {
                [key: string]: unknown;
            }[];
            is_published?: boolean;
        };
        DashboardUpdateRequest: components["schemas"]["DashboardCreateRequest"] & {
            owner_id?: string;
            kpi_summary?: {
                [key: string]: number;
            };
        };
        DashboardPatchRequest: {
            name?: string;
            description?: string;
            is_published?: boolean;
            is_default?: boolean;
            tags?: string[];
        };
        DashboardListResponse: {
            items?: components["schemas"]["Dashboard"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        InsightMetric: {
            name?: string;
            current_value?: number;
            baseline_value?: number;
            trend?: string;
        };
        InsightRecommendation: {
            title?: string;
            description?: string;
            /** @enum {string} */
            priority?: "high" | "medium" | "low";
        };
        Insight: {
            /** Format: uuid */
            id: string;
            title: string;
            /** @enum {string} */
            category: "capacity" | "performance" | "risk" | "ai_insight";
            summary?: string;
            /** @enum {string} */
            status?: "draft" | "published" | "archived";
            chart_type?: string;
            metrics?: components["schemas"]["InsightMetric"][];
            recommendations?: components["schemas"]["InsightRecommendation"][];
            /** Format: date-time */
            generated_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        InsightCreateRequest: {
            title: string;
            /** @enum {string} */
            category: "capacity" | "performance" | "risk" | "ai_insight";
            summary?: string;
            metrics?: components["schemas"]["InsightMetric"][];
            recommendations?: components["schemas"]["InsightRecommendation"][];
        };
        InsightUpdateRequest: components["schemas"]["InsightCreateRequest"] & {
            /** @enum {string} */
            status?: "draft" | "published" | "archived";
        };
        InsightPatchRequest: {
            title?: string;
            summary?: string;
            /** @enum {string} */
            status?: "draft" | "published" | "archived";
            recommendations?: components["schemas"]["InsightRecommendation"][];
        };
        InsightListResponse: {
            items?: components["schemas"]["Insight"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        WarRoomTimelineEntry: {
            /** Format: date-time */
            timestamp?: string;
            description?: string;
            actor?: components["schemas"]["UserReference"];
            event_id?: string;
        };
        WarRoom: {
            /** Format: uuid */
            id: string;
            title: string;
            /** @enum {string} */
            status: "active" | "monitoring" | "resolved";
            /** @enum {string} */
            severity_focus?: "critical" | "high" | "medium";
            facilitator?: components["schemas"]["UserReference"];
            participants?: components["schemas"]["UserReference"][];
            incident_ids?: string[];
            timeline?: components["schemas"]["WarRoomTimelineEntry"][];
            notes?: string;
            /** Format: date-time */
            started_at?: string;
            /** Format: date-time */
            ended_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        WarRoomCreateRequest: {
            title: string;
            /** @enum {string} */
            severity_focus?: "critical" | "high" | "medium";
            facilitator_id?: string;
            participants?: string[];
            incident_ids?: string[];
        };
        WarRoomUpdateRequest: components["schemas"]["WarRoomCreateRequest"] & {
            /** @enum {string} */
            status?: "active" | "monitoring" | "resolved";
            timeline?: components["schemas"]["WarRoomTimelineEntry"][];
            notes?: string;
        };
        WarRoomPatchRequest: {
            /** @enum {string} */
            status?: "active" | "monitoring" | "resolved";
            notes?: string;
            /** Format: date-time */
            ended_at?: string;
        };
        WarRoomListResponse: {
            items?: components["schemas"]["WarRoom"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        Script: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            type: "shell" | "python" | "ansible" | "terraform";
            description?: string;
            version?: string;
            content?: string;
            tags?: string[];
            /** @enum {string} */
            last_execution_status?: "success" | "failed" | "running" | "never";
            /** Format: date-time */
            last_execution_at?: string;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ScriptCreateRequest: {
            name: string;
            /** @enum {string} */
            type: "shell" | "python" | "ansible" | "terraform";
            description?: string;
            content: string;
            tags?: string[];
        };
        ScriptUpdateRequest: components["schemas"]["ScriptCreateRequest"] & {
            version?: string;
        };
        ScriptPatchRequest: {
            description?: string;
            tags?: string[];
            content?: string;
        };
        ScriptListResponse: {
            items?: components["schemas"]["Script"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        ScheduleRetryPolicy: {
            max_retries?: number;
            interval_seconds?: number;
        };
        Schedule: {
            /** Format: uuid */
            id: string;
            name: string;
            script_id: string;
            script_name?: string;
            /** @enum {string} */
            type: "one_time" | "recurring";
            cron_expression?: string;
            timezone?: string;
            /** Format: date-time */
            next_run_time?: string;
            /** Format: date-time */
            last_run_time?: string;
            /** @enum {string} */
            status?: "enabled" | "disabled" | "running";
            /** @enum {string} */
            concurrency_policy?: "allow" | "forbid";
            retry_policy?: components["schemas"]["ScheduleRetryPolicy"];
            notify_on_success?: boolean;
            notify_on_failure?: boolean;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        ScheduleCreateRequest: {
            name: string;
            script_id: string;
            /** @enum {string} */
            type: "one_time" | "recurring";
            cron_expression?: string;
            timezone?: string;
            /** @enum {string} */
            concurrency_policy?: "allow" | "forbid";
            retry_policy?: components["schemas"]["ScheduleRetryPolicy"];
            notify_on_success?: boolean;
            notify_on_failure?: boolean;
        };
        ScheduleUpdateRequest: components["schemas"]["ScheduleCreateRequest"] & {
            /** @enum {string} */
            status?: "enabled" | "disabled" | "running";
        };
        SchedulePatchRequest: {
            /** @enum {string} */
            status?: "enabled" | "disabled" | "running";
            cron_expression?: string;
            timezone?: string;
            notify_on_success?: boolean;
            notify_on_failure?: boolean;
        };
        ScheduleListResponse: {
            items?: components["schemas"]["Schedule"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        Execution: {
            /** Format: uuid */
            id: string;
            script_id: string;
            script_name?: string;
            schedule_id?: string;
            /** @enum {string} */
            trigger_source: "event" | "schedule" | "manual";
            /** Format: date-time */
            start_time?: string;
            /** Format: date-time */
            end_time?: string;
            duration_ms?: number;
            /** @enum {string} */
            status: "success" | "failed" | "running" | "cancelled";
            triggered_by?: components["schemas"]["UserReference"];
            parameters?: {
                [key: string]: unknown;
            };
            stdout?: string;
            stderr?: string;
            error_message?: string;
            related_event_ids?: string[];
            attempt_count?: number;
        };
        ExecutionCreateRequest: {
            script_id: string;
            schedule_id?: string;
            /** @enum {string} */
            trigger_source?: "event" | "schedule" | "manual";
            parameters?: {
                [key: string]: unknown;
            };
        };
        ExecutionUpdateRequest: components["schemas"]["ExecutionCreateRequest"] & {
            /** @enum {string} */
            status?: "success" | "failed" | "running" | "cancelled";
            /** Format: date-time */
            start_time?: string;
            /** Format: date-time */
            end_time?: string;
            stdout?: string;
            stderr?: string;
            error_message?: string;
        };
        ExecutionPatchRequest: {
            /** @enum {string} */
            status?: "success" | "failed" | "running" | "cancelled";
            notes?: string;
        };
        ExecutionListResponse: {
            items?: components["schemas"]["Execution"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        NotificationPolicy: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
            enabled: boolean;
            /** @enum {string} */
            priority?: "high" | "medium" | "low";
            severity_filters?: ("critical" | "warning" | "info")[];
            channel_ids?: string[];
            recipients?: components["schemas"]["RecipientReference"][];
            escalation_delay_minutes?: number;
            repeat_frequency_minutes?: number;
            trigger_condition?: {
                [key: string]: unknown;
            };
            resource_filters?: {
                [key: string]: unknown;
            };
            silence_ids?: string[];
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        NotificationPolicyCreateRequest: {
            name: string;
            description?: string;
            enabled?: boolean;
            /** @enum {string} */
            priority?: "high" | "medium" | "low";
            severity_filters: ("critical" | "warning" | "info")[];
            channel_ids?: string[];
            recipients?: components["schemas"]["RecipientReference"][];
            trigger_condition?: {
                [key: string]: unknown;
            };
            resource_filters?: {
                [key: string]: unknown;
            };
        };
        NotificationPolicyUpdateRequest: components["schemas"]["NotificationPolicyCreateRequest"] & {
            escalation_delay_minutes?: number;
            repeat_frequency_minutes?: number;
            silence_ids?: string[];
        };
        NotificationPolicyPatchRequest: {
            name?: string;
            description?: string;
            enabled?: boolean;
            /** @enum {string} */
            priority?: "high" | "medium" | "low";
            channel_ids?: string[];
            recipients?: components["schemas"]["RecipientReference"][];
        };
        NotificationPolicyListResponse: {
            items?: components["schemas"]["NotificationPolicy"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        NotificationChannel: {
            /** Format: uuid */
            id: string;
            name: string;
            /** @enum {string} */
            type: "email" | "slack" | "teams" | "webhook" | "line" | "sms";
            description?: string;
            /** @enum {string} */
            status?: "active" | "inactive" | "error";
            config?: {
                [key: string]: unknown;
            };
            /** Format: date-time */
            last_tested_at?: string;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        NotificationChannelCreateRequest: {
            name: string;
            /** @enum {string} */
            type: "email" | "slack" | "teams" | "webhook" | "line" | "sms";
            description?: string;
            config?: {
                [key: string]: unknown;
            };
        };
        NotificationChannelUpdateRequest: components["schemas"]["NotificationChannelCreateRequest"] & {
            /** @enum {string} */
            status?: "active" | "inactive" | "error";
        };
        NotificationChannelPatchRequest: {
            description?: string;
            /** @enum {string} */
            status?: "active" | "inactive" | "error";
            config?: {
                [key: string]: unknown;
            };
        };
        NotificationChannelListResponse: {
            items?: components["schemas"]["NotificationChannel"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        NotificationRecord: {
            /** Format: uuid */
            id: string;
            policy_id?: string;
            policy_name?: string;
            channel_id?: string;
            /** @enum {string} */
            channel_type: "email" | "slack" | "teams" | "webhook" | "line" | "sms";
            /** @enum {string} */
            status: "success" | "failed" | "retrying" | "cancelled";
            recipients?: components["schemas"]["RecipientReference"][];
            /** Format: date-time */
            sent_at?: string;
            /** Format: date-time */
            completed_at?: string;
            retry_count?: number;
            duration_ms?: number;
            error_message?: string;
            payload_excerpt?: string;
            attempts?: components["schemas"]["NotificationAttempt"][];
            metadata?: {
                [key: string]: unknown;
            };
            related_event_id?: string;
        };
        NotificationCreateRequest: {
            policy_id: string;
            channel_id: string;
            /** @enum {string} */
            status?: "success" | "failed" | "retrying" | "cancelled";
            recipients?: components["schemas"]["RecipientReference"][];
            payload?: {
                [key: string]: unknown;
            };
        };
        NotificationHistoryListResponse: {
            items?: components["schemas"]["NotificationRecord"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        Label: {
            /** Format: uuid */
            id: string;
            key: string;
            value: string;
            category?: string;
            color?: string;
            description?: string;
            is_system?: boolean;
            usage_count?: number;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        LabelCreateRequest: {
            key: string;
            value: string;
            category?: string;
            color?: string;
            description?: string;
            is_system?: boolean;
        };
        LabelUpdateRequest: components["schemas"]["LabelCreateRequest"];
        LabelPatchRequest: {
            category?: string;
            color?: string;
            description?: string;
            is_system?: boolean;
        };
        LabelListResponse: {
            items?: components["schemas"]["Label"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        MailSetting: {
            /** Format: uuid */
            id: string;
            smtp_host: string;
            smtp_port: number;
            username?: string;
            sender_name?: string;
            /** Format: email */
            sender_email?: string;
            /** Format: email */
            reply_to?: string;
            /** @enum {string} */
            encryption?: "none" | "tls" | "ssl";
            /** Format: email */
            test_recipient?: string;
            is_enabled?: boolean;
            /** Format: date-time */
            last_tested_at?: string;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        MailSettingCreateRequest: {
            smtp_host: string;
            smtp_port: number;
            username?: string;
            /** Format: password */
            password?: string;
            sender_name?: string;
            /** Format: email */
            sender_email: string;
            /** Format: email */
            reply_to?: string;
            /** @enum {string} */
            encryption?: "none" | "tls" | "ssl";
            /** Format: email */
            test_recipient?: string;
            is_enabled?: boolean;
        };
        MailSettingUpdateRequest: components["schemas"]["MailSettingCreateRequest"];
        MailSettingPatchRequest: {
            /** @enum {string} */
            encryption?: "none" | "tls" | "ssl";
            /** Format: email */
            test_recipient?: string;
            is_enabled?: boolean;
        };
        MailSettingListResponse: {
            items?: components["schemas"]["MailSetting"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        AuthSetting: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            provider: "keycloak" | "auth0" | "google" | "microsoft" | "custom";
            oidc_enabled?: boolean;
            realm?: string;
            client_id?: string;
            client_secret_hint?: string;
            /** Format: uri */
            auth_url?: string;
            /** Format: uri */
            token_url?: string;
            /** Format: uri */
            userinfo_url?: string;
            /** Format: uri */
            redirect_uri?: string;
            /** Format: uri */
            logout_url?: string;
            scopes?: string[];
            user_sync?: boolean;
            /** Format: date-time */
            last_tested_at?: string;
            created_by?: components["schemas"]["UserReference"];
            updated_by?: components["schemas"]["UserReference"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        AuthSettingCreateRequest: {
            /** @enum {string} */
            provider: "keycloak" | "auth0" | "google" | "microsoft" | "custom";
            oidc_enabled?: boolean;
            realm?: string;
            client_id: string;
            /** Format: password */
            client_secret?: string;
            /** Format: uri */
            auth_url: string;
            /** Format: uri */
            token_url: string;
            /** Format: uri */
            userinfo_url?: string;
            /** Format: uri */
            redirect_uri?: string;
            /** Format: uri */
            logout_url?: string;
            scopes?: string[];
            user_sync?: boolean;
        };
        AuthSettingUpdateRequest: {
            client_secret_hint?: string;
        } & components["schemas"]["AuthSettingCreateRequest"];
        AuthSettingPatchRequest: {
            oidc_enabled?: boolean;
            user_sync?: boolean;
            scopes?: string[];
        };
        AuthSettingListResponse: {
            items?: components["schemas"]["AuthSetting"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        UserProfile: {
            /** Format: uuid */
            id: string;
            username: string;
            display_name?: string;
            /** Format: email */
            email?: string;
            role?: string;
            /** @enum {string} */
            status?: "active" | "inactive" | "suspended";
            language?: string;
            timezone?: string;
            teams?: components["schemas"]["TeamReference"][];
            /** Format: date-time */
            last_login_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        UserProfileCreateRequest: {
            username: string;
            display_name?: string;
            /** Format: email */
            email: string;
            role?: string;
            language?: string;
            timezone?: string;
        };
        UserProfileUpdateRequest: components["schemas"]["UserProfileCreateRequest"] & {
            /** @enum {string} */
            status?: "active" | "inactive" | "suspended";
        };
        UserProfilePatchRequest: {
            display_name?: string;
            language?: string;
            timezone?: string;
            /** @enum {string} */
            status?: "active" | "inactive" | "suspended";
        };
        UserProfileListResponse: {
            items?: components["schemas"]["UserProfile"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
        NotificationPreferences: {
            email_notification?: boolean;
            slack_notification?: boolean;
            merge_notification?: boolean;
        };
        DisplayOptions: {
            animation?: boolean;
            tooltips?: boolean;
            compact_mode?: boolean;
        };
        UserPreference: {
            /** Format: uuid */
            id: string;
            user_id: string;
            /** @enum {string} */
            theme?: "light" | "dark" | "auto";
            /** @enum {string} */
            default_page?: "war_room" | "events" | "resources" | "dashboards";
            language?: string;
            timezone?: string;
            notification_preferences?: components["schemas"]["NotificationPreferences"];
            display_options?: components["schemas"]["DisplayOptions"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        UserPreferenceCreateRequest: {
            user_id: string;
            /** @enum {string} */
            theme?: "light" | "dark" | "auto";
            /** @enum {string} */
            default_page?: "war_room" | "events" | "resources" | "dashboards";
            language?: string;
            timezone?: string;
            notification_preferences?: components["schemas"]["NotificationPreferences"];
            display_options?: components["schemas"]["DisplayOptions"];
        };
        UserPreferenceUpdateRequest: components["schemas"]["UserPreferenceCreateRequest"];
        UserPreferencePatchRequest: {
            /** @enum {string} */
            theme?: "light" | "dark" | "auto";
            /** @enum {string} */
            default_page?: "war_room" | "events" | "resources" | "dashboards";
            notification_preferences?: components["schemas"]["NotificationPreferences"];
            display_options?: components["schemas"]["DisplayOptions"];
        };
        UserPreferenceListResponse: {
            items?: components["schemas"]["UserPreference"][];
            page?: number;
            page_size?: number;
            total?: number;
            has_more?: boolean;
        };
    };
    responses: {
        /** @description 請求參數錯誤或資料驗證失敗。 */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 驗證失敗或尚未登入。 */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 權限不足。 */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 資料不存在或已被移除。 */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 資料狀態衝突或重複。 */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description 伺服器內部錯誤。 */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: {
        /** @description 目前頁碼，預設為 1。 */
        PageParam: number;
        /** @description 每頁筆數，預設為 20。 */
        PageSizeParam: number;
        /** @description 排序欄位，依各資源支援欄位決定。 */
        SortByParam: string;
        /** @description 排序方向，預設為遞減。 */
        SortOrderParam: "asc" | "desc";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listEvents: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 依事件狀態篩選。 */
                status?: "new" | "acknowledged" | "in_progress" | "resolved" | "silenced";
                /** @description 依事件嚴重性篩選。 */
                severity?: "critical" | "warning" | "info";
                /** @description 指定資源 ID 篩選。 */
                resource_id?: string;
                /** @description 指定觸發規則 ID。 */
                rule_id?: string;
                /** @description 指定處理人。 */
                assignee_id?: string;
                /** @description 起始時間 (ISO 8601)。 */
                start_time?: string;
                /** @description 結束時間 (ISO 8601)。 */
                end_time?: string;
                /** @description 摘要或描述關鍵字。 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得事件列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventCreateRequest"];
            };
        };
        responses: {
            /** @description 事件建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件唯一識別碼。 */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得事件詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDetail"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件唯一識別碼。 */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventUpdateRequest"];
            };
        };
        responses: {
            /** @description 事件更新成功。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDetail"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件唯一識別碼。 */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 事件刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件唯一識別碼。 */
                event_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventPatchRequest"];
            };
        };
        responses: {
            /** @description 事件部分欄位更新成功。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDetail"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listEventRules: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 是否僅顯示啟用規則。 */
                enabled?: boolean;
                /** @description 指定規則嚴重性。 */
                severity?: "critical" | "warning" | "info";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得事件規則列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRuleListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createEventRule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRuleCreateRequest"];
            };
        };
        responses: {
            /** @description 成功建立事件規則。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getEventRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件規則唯一識別碼。 */
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得事件規則詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRule"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateEventRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件規則唯一識別碼。 */
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRuleUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新事件規則。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteEventRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件規則唯一識別碼。 */
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 事件規則刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchEventRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 事件規則唯一識別碼。 */
                rule_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventRulePatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新事件規則。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventRule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listSilences: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 指定靜音類型。 */
                silence_type?: "single" | "recurring" | "condition";
                /** @description 是否僅顯示啟用規則。 */
                enabled?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得靜音規則列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SilenceListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createSilence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SilenceCreateRequest"];
            };
        };
        responses: {
            /** @description 靜音規則建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Silence"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getSilence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 靜音規則唯一識別碼。 */
                silence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得靜音規則詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Silence"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateSilence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 靜音規則唯一識別碼。 */
                silence_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SilenceUpdateRequest"];
            };
        };
        responses: {
            /** @description 靜音規則更新成功。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Silence"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteSilence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 靜音規則唯一識別碼。 */
                silence_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 靜音規則刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchSilence: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 靜音規則唯一識別碼。 */
                silence_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SilencePatchRequest"];
            };
        };
        responses: {
            /** @description 靜音規則部分欄位更新成功。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Silence"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listResources: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 依資源狀態篩選。 */
                status?: "healthy" | "warning" | "critical" | "maintenance";
                /** @description 依資源類型篩選。 */
                type?: "server" | "database" | "cache" | "gateway" | "service";
                /** @description 指定資源群組。 */
                group_id?: string;
                /** @description 資源名稱或 IP 關鍵字。 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得資源列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createResource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceCreateRequest"];
            };
        };
        responses: {
            /** @description 資源建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源唯一識別碼。 */
                resource_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得資源詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源唯一識別碼。 */
                resource_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新資源。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源唯一識別碼。 */
                resource_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 資源刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchResource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源唯一識別碼。 */
                resource_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourcePatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新資源。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Resource"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listResourceGroups: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 群組名稱或描述關鍵字。 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得資源群組列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceGroupListResponse"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createResourceGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceGroupCreateRequest"];
            };
        };
        responses: {
            /** @description 資源群組建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceGroup"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getResourceGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源群組唯一識別碼。 */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得資源群組詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceGroup"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateResourceGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源群組唯一識別碼。 */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceGroupUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新資源群組。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceGroup"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteResourceGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源群組唯一識別碼。 */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 資源群組刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchResourceGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 資源群組唯一識別碼。 */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResourceGroupPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新資源群組。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResourceGroup"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listTopologies: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得拓撲視圖列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopologyListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createTopology: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopologyCreateRequest"];
            };
        };
        responses: {
            /** @description 拓撲視圖建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopologyView"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getTopology: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 拓撲視圖唯一識別碼。 */
                topology_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得拓撲視圖。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopologyView"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateTopology: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 拓撲視圖唯一識別碼。 */
                topology_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopologyUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新拓撲視圖。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopologyView"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteTopology: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 拓撲視圖唯一識別碼。 */
                topology_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 拓撲視圖刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchTopology: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 拓撲視圖唯一識別碼。 */
                topology_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopologyPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新拓撲視圖。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopologyView"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listDashboards: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 儀表板分類。 */
                category?: "war_room" | "infrastructure" | "custom";
                /** @description 是否僅顯示已發布儀表板。 */
                is_published?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得儀表板列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardCreateRequest"];
            };
        };
        responses: {
            /** @description 儀表板建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dashboard"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 儀表板唯一識別碼。 */
                dashboard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得儀表板詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dashboard"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 儀表板唯一識別碼。 */
                dashboard_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新儀表板。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dashboard"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 儀表板唯一識別碼。 */
                dashboard_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 儀表板刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 儀表板唯一識別碼。 */
                dashboard_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新儀表板。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Dashboard"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listInsights: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 洞察報告類別。 */
                category?: "capacity" | "performance" | "risk" | "ai_insight";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得分析洞察列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsightListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createInsight: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InsightCreateRequest"];
            };
        };
        responses: {
            /** @description 分析洞察建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Insight"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    getInsight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 洞察報告唯一識別碼。 */
                insight_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得分析洞察詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Insight"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateInsight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 洞察報告唯一識別碼。 */
                insight_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InsightUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新分析洞察。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Insight"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteInsight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 洞察報告唯一識別碼。 */
                insight_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 分析洞察刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchInsight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 洞察報告唯一識別碼。 */
                insight_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InsightPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新分析洞察。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Insight"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listWarRooms: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 依戰情室狀態篩選。 */
                status?: "active" | "monitoring" | "resolved";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得戰情室列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarRoomListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createWarRoom: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarRoomCreateRequest"];
            };
        };
        responses: {
            /** @description 戰情室建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarRoom"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    getWarRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 戰情室會議唯一識別碼。 */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得戰情室詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarRoom"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateWarRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 戰情室會議唯一識別碼。 */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarRoomUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新戰情室。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarRoom"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteWarRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 戰情室會議唯一識別碼。 */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 戰情室結束成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchWarRoom: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 戰情室會議唯一識別碼。 */
                session_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WarRoomPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新戰情室。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WarRoom"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listScripts: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                /** @description 依腳本類型篩選。 */
                type?: "shell" | "python" | "ansible" | "terraform";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得腳本列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createScript: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScriptCreateRequest"];
            };
        };
        responses: {
            /** @description 腳本建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Script"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getScript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 自動化腳本唯一識別碼。 */
                script_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得腳本詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Script"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateScript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 自動化腳本唯一識別碼。 */
                script_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScriptUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新腳本。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Script"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteScript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 自動化腳本唯一識別碼。 */
                script_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 腳本刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchScript: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 自動化腳本唯一識別碼。 */
                script_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScriptPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新腳本。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Script"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listSchedules: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                status?: "enabled" | "disabled" | "running";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得排程列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduleListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleCreateRequest"];
            };
        };
        responses: {
            /** @description 排程建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排程唯一識別碼。 */
                schedule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得排程詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排程唯一識別碼。 */
                schedule_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新排程。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排程唯一識別碼。 */
                schedule_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 排程刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 排程唯一識別碼。 */
                schedule_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SchedulePatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新排程。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schedule"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listExecutions: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                status?: "success" | "failed" | "running" | "cancelled";
                script_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得執行日誌列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExecutionListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createExecution: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecutionCreateRequest"];
            };
        };
        responses: {
            /** @description 執行記錄建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Execution"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    getExecution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 執行記錄唯一識別碼。 */
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得執行記錄詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Execution"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateExecution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 執行記錄唯一識別碼。 */
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecutionUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新執行記錄。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Execution"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteExecution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 執行記錄唯一識別碼。 */
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 執行記錄刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchExecution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 執行記錄唯一識別碼。 */
                execution_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecutionPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新執行記錄。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Execution"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listNotificationPolicies: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                enabled?: boolean;
                severity?: "critical" | "warning" | "info";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知策略列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPolicyListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createNotificationPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationPolicyCreateRequest"];
            };
        };
        responses: {
            /** @description 通知策略建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPolicy"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getNotificationPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知策略唯一識別碼。 */
                policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知策略詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPolicy"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateNotificationPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知策略唯一識別碼。 */
                policy_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationPolicyUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新通知策略。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPolicy"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteNotificationPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知策略唯一識別碼。 */
                policy_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 通知策略刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchNotificationPolicy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知策略唯一識別碼。 */
                policy_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationPolicyPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新通知策略。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPolicy"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listNotificationChannels: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                type?: "email" | "slack" | "teams" | "webhook" | "line" | "sms";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知管道列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationChannelListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createNotificationChannel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationChannelCreateRequest"];
            };
        };
        responses: {
            /** @description 通知管道建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationChannel"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getNotificationChannel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知管道唯一識別碼。 */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知管道詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationChannel"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateNotificationChannel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知管道唯一識別碼。 */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationChannelUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新通知管道。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationChannel"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteNotificationChannel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知管道唯一識別碼。 */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 通知管道刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchNotificationChannel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知管道唯一識別碼。 */
                channel_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationChannelPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新通知管道。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationChannel"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listNotifications: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                status?: "success" | "failed" | "retrying" | "cancelled";
                channel_type?: "email" | "slack" | "teams" | "webhook" | "line" | "sms";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知歷史列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationHistoryListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createNotification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationCreateRequest"];
            };
        };
        responses: {
            /** @description 通知記錄建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRecord"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    getNotification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知記錄唯一識別碼。 */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得通知記錄詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationRecord"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteNotification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 通知記錄唯一識別碼。 */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 通知記錄刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listLabels: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 排序欄位，依各資源支援欄位決定。 */
                sort_by?: components["parameters"]["SortByParam"];
                /** @description 排序方向，預設為遞減。 */
                sort_order?: components["parameters"]["SortOrderParam"];
                category?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得標籤列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LabelListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createLabel: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LabelCreateRequest"];
            };
        };
        responses: {
            /** @description 標籤建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 標籤唯一識別碼。 */
                label_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得標籤詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 標籤唯一識別碼。 */
                label_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LabelUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新標籤。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 標籤唯一識別碼。 */
                label_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 標籤刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchLabel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 標籤唯一識別碼。 */
                label_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LabelPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新標籤。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Label"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listMailSettings: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得郵件設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailSettingListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createMailSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailSettingCreateRequest"];
            };
        };
        responses: {
            /** @description 郵件設定建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getMailSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 郵件設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得郵件設定詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailSetting"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateMailSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 郵件設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailSettingUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新郵件設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteMailSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 郵件設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 郵件設定刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchMailSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 郵件設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MailSettingPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新郵件設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MailSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listAuthSettings: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得身份驗證設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSettingListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createAuthSetting: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthSettingCreateRequest"];
            };
        };
        responses: {
            /** @description 身份驗證設定建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getAuthSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 身份驗證設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得身份驗證設定詳情。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSetting"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateAuthSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 身份驗證設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthSettingUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新身份驗證設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteAuthSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 身份驗證設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 身份驗證設定刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchAuthSetting: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 身份驗證設定唯一識別碼。 */
                setting_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthSettingPatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新身份驗證設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthSetting"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listProfiles: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 依使用者名稱或電子郵件搜尋。 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得個人資料列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileCreateRequest"];
            };
        };
        responses: {
            /** @description 個人資料建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            409: components["responses"]["Conflict"];
            500: components["responses"]["InternalError"];
        };
    };
    getProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 使用者唯一識別碼，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得使用者個人資料。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 使用者唯一識別碼，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新個人資料。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deleteProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 使用者唯一識別碼，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 個人資料刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 使用者唯一識別碼，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfilePatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新個人資料。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    listPreferences: {
        parameters: {
            query?: {
                /** @description 目前頁碼，預設為 1。 */
                page?: components["parameters"]["PageParam"];
                /** @description 每頁筆數，預設為 20。 */
                page_size?: components["parameters"]["PageSizeParam"];
                /** @description 指定使用者 ID，預設為目前登入者。 */
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得偏好設定列表。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreferenceListResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    createPreference: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferenceCreateRequest"];
            };
        };
        responses: {
            /** @description 偏好設定建立成功。 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreference"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            500: components["responses"]["InternalError"];
        };
    };
    getPreference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 偏好設定對應的使用者 ID，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功取得偏好設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreference"];
                };
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    updatePreference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 偏好設定對應的使用者 ID，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferenceUpdateRequest"];
            };
        };
        responses: {
            /** @description 成功更新偏好設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreference"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    deletePreference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 偏好設定對應的使用者 ID，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 偏好設定刪除成功。 */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
    patchPreference: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 偏好設定對應的使用者 ID，可使用 `me` 代表目前登入者。 */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPreferencePatchRequest"];
            };
        };
        responses: {
            /** @description 成功局部更新偏好設定。 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserPreference"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            403: components["responses"]["Forbidden"];
            404: components["responses"]["NotFound"];
            500: components["responses"]["InternalError"];
        };
    };
}
