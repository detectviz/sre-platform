/**
 * SRE Platform - Control Plane API
 * The Control Plane is the central management hub for the SRE Platform. It provides the Web UI and APIs for managing resources, users, incidents, and more. It orchestrates diagnostic tasks by calling the SRE Assistant service. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sre-platform@example.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AdminApi", () => {
  let instance: api.AdminApi
  beforeEach(function() {
    instance = new api.AdminApi(config)
  });

  test("getPlatformDiagnostics", () => {
    return expect(instance.getPlatformDiagnostics({})).resolves.toBe(null)
  })
})

describe("AlertRulesApi", () => {
  let instance: api.AlertRulesApi
  beforeEach(function() {
    instance = new api.AlertRulesApi(config)
  });

  test("createAlertRule", () => {
    const body: api.AlertRuleCreateRequest = undefined
    return expect(instance.createAlertRule(body, {})).resolves.toBe(null)
  })
  test("deleteAlertRule", () => {
    const ruleId: string = "ruleId_example"
    return expect(instance.deleteAlertRule(ruleId, {})).resolves.toBe(null)
  })
  test("disableAlertRule", () => {
    const ruleId: string = "ruleId_example"
    return expect(instance.disableAlertRule(ruleId, {})).resolves.toBe(null)
  })
  test("enableAlertRule", () => {
    const ruleId: string = "ruleId_example"
    return expect(instance.enableAlertRule(ruleId, {})).resolves.toBe(null)
  })
  test("getAlertRule", () => {
    const ruleId: string = "ruleId_example"
    return expect(instance.getAlertRule(ruleId, {})).resolves.toBe(null)
  })
  test("listAlertRules", () => {
    const enabled: boolean = true
    return expect(instance.listAlertRules(enabled, {})).resolves.toBe(null)
  })
  test("testAlertRule", () => {
    const ruleId: string = "ruleId_example"
    return expect(instance.testAlertRule(ruleId, {})).resolves.toBe(null)
  })
  test("updateAlertRule", () => {
    const body: api.AlertRuleUpdateRequest = undefined
    const ruleId: string = "ruleId_example"
    return expect(instance.updateAlertRule(body, ruleId, {})).resolves.toBe(null)
  })
})

describe("AuditApi", () => {
  let instance: api.AuditApi
  beforeEach(function() {
    instance = new api.AuditApi(config)
  });

  test("queryAuditLogs", () => {
    const page: number = 56
    const pageSize: number = 56
    const userId: string = "userId_example"
    const action: string = "action_example"
    const resourceType: string = "resourceType_example"
    const startTime: Date = 2013-10-20T19:20:30+01:00
    const endTime: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.queryAuditLogs(page, pageSize, userId, action, resourceType, startTime, endTime, {})).resolves.toBe(null)
  })
})

describe("AutocompleteApi", () => {
  let instance: api.AutocompleteApi
  beforeEach(function() {
    instance = new api.AutocompleteApi(config)
  });

  test("getAutocompleteSuggestions", () => {
    const type: string = "type_example"
    const q: string = "q_example"
    return expect(instance.getAutocompleteSuggestions(type, q, {})).resolves.toBe(null)
  })
})

describe("AutomationApi", () => {
  let instance: api.AutomationApi
  beforeEach(function() {
    instance = new api.AutomationApi(config)
  });

  test("createSchedule", () => {
    const body: api.ScheduleCreateRequest = undefined
    return expect(instance.createSchedule(body, {})).resolves.toBe(null)
  })
  test("createScript", () => {
    const body: api.ScriptCreateRequest = undefined
    return expect(instance.createScript(body, {})).resolves.toBe(null)
  })
  test("deleteSchedule", () => {
    const scheduleId: string = "scheduleId_example"
    return expect(instance.deleteSchedule(scheduleId, {})).resolves.toBe(null)
  })
  test("deleteScript", () => {
    const scriptId: string = "scriptId_example"
    return expect(instance.deleteScript(scriptId, {})).resolves.toBe(null)
  })
  test("executeScript", () => {
    const body: api.ScriptExecuteRequest = undefined
    return expect(instance.executeScript(body, {})).resolves.toBe(null)
  })
  test("getExecution", () => {
    const executionId: string = "executionId_example"
    return expect(instance.getExecution(executionId, {})).resolves.toBe(null)
  })
  test("getSchedule", () => {
    const scheduleId: string = "scheduleId_example"
    return expect(instance.getSchedule(scheduleId, {})).resolves.toBe(null)
  })
  test("getScript", () => {
    const scriptId: string = "scriptId_example"
    return expect(instance.getScript(scriptId, {})).resolves.toBe(null)
  })
  test("listExecutions", () => {
    const page: number = 56
    const pageSize: number = 56
    const scriptId: string = "scriptId_example"
    const status: string = "status_example"
    return expect(instance.listExecutions(page, pageSize, scriptId, status, {})).resolves.toBe(null)
  })
  test("listSchedules", () => {
    return expect(instance.listSchedules({})).resolves.toBe(null)
  })
  test("listScripts", () => {
    const category: string = "category_example"
    return expect(instance.listScripts(category, {})).resolves.toBe(null)
  })
  test("runScript", () => {
    const body: api.ScriptRunRequest = undefined
    const scriptId: string = "scriptId_example"
    return expect(instance.runScript(body, scriptId, {})).resolves.toBe(null)
  })
  test("updateSchedule", () => {
    const body: api.ScheduleUpdateRequest = undefined
    const scheduleId: string = "scheduleId_example"
    return expect(instance.updateSchedule(body, scheduleId, {})).resolves.toBe(null)
  })
  test("updateScript", () => {
    const body: api.ScriptUpdateRequest = undefined
    const scriptId: string = "scriptId_example"
    return expect(instance.updateScript(body, scriptId, {})).resolves.toBe(null)
  })
})

describe("CallbacksApi", () => {
  let instance: api.CallbacksApi
  beforeEach(function() {
    instance = new api.CallbacksApi(config)
  });

  test("diagnosisCallback", () => {
    const body: api.CallbacksDiagnosiscompleteBody = undefined
    return expect(instance.diagnosisCallback(body, {})).resolves.toBe(null)
  })
})

describe("CapacityPlanningApi", () => {
  let instance: api.CapacityPlanningApi
  beforeEach(function() {
    instance = new api.CapacityPlanningApi(config)
  });

  test("analyzeCapacity", () => {
    const body: api.CapacityAnalysisRequest = undefined
    return expect(instance.analyzeCapacity(body, {})).resolves.toBe(null)
  })
})

describe("CoreApi", () => {
  let instance: api.CoreApi
  beforeEach(function() {
    instance = new api.CoreApi(config)
  });

  test("cpCheckHealth", () => {
    return expect(instance.cpCheckHealth({})).resolves.toBe(null)
  })
  test("cpCheckReadiness", () => {
    return expect(instance.cpCheckReadiness({})).resolves.toBe(null)
  })
  test("cpGetMetrics", () => {
    return expect(instance.cpGetMetrics({})).resolves.toBe(null)
  })
  test("getMetricDefinitions", () => {
    return expect(instance.getMetricDefinitions({})).resolves.toBe(null)
  })
})

describe("DashboardApi", () => {
  let instance: api.DashboardApi
  beforeEach(function() {
    instance = new api.DashboardApi(config)
  });

  test("getDashboardSummary", () => {
    return expect(instance.getDashboardSummary({})).resolves.toBe(null)
  })
  test("getDashboardTrends", () => {
    const period: string = "period_example"
    return expect(instance.getDashboardTrends(period, {})).resolves.toBe(null)
  })
  test("getResourceDistribution", () => {
    return expect(instance.getResourceDistribution({})).resolves.toBe(null)
  })
})

describe("IncidentsApi", () => {
  let instance: api.IncidentsApi
  beforeEach(function() {
    instance = new api.IncidentsApi(config)
  });

  test("acknowledgeIncident", () => {
    const incidentId: string = "incidentId_example"
    const body: api.IncidentIdAcknowledgeBody = undefined
    return expect(instance.acknowledgeIncident(incidentId, body, {})).resolves.toBe(null)
  })
  test("addIncidentComment", () => {
    const body: api.IncidentIdCommentsBody = undefined
    const incidentId: string = "incidentId_example"
    return expect(instance.addIncidentComment(body, incidentId, {})).resolves.toBe(null)
  })
  test("assignIncident", () => {
    const body: api.IncidentIdAssignBody = undefined
    const incidentId: string = "incidentId_example"
    return expect(instance.assignIncident(body, incidentId, {})).resolves.toBe(null)
  })
  test("batchUpdateIncidents", () => {
    const body: api.BatchIncidentOperation = undefined
    return expect(instance.batchUpdateIncidents(body, {})).resolves.toBe(null)
  })
  test("createIncident", () => {
    const body: api.IncidentCreateRequest = undefined
    return expect(instance.createIncident(body, {})).resolves.toBe(null)
  })
  test("generateIncidentReport", () => {
    const body: api.IncidentsGeneratereportBody = undefined
    return expect(instance.generateIncidentReport(body, {})).resolves.toBe(null)
  })
  test("getCorrelatedIncidents", () => {
    const incidentId: string = "incidentId_example"
    return expect(instance.getCorrelatedIncidents(incidentId, {})).resolves.toBe(null)
  })
  test("getIncident", () => {
    const incidentId: string = "incidentId_example"
    return expect(instance.getIncident(incidentId, {})).resolves.toBe(null)
  })
  test("listAlerts", () => {
    const severity: string = "severity_example"
    const status: string = "status_example"
    const startTime: Date = 2013-10-20T19:20:30+01:00
    const endTime: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.listAlerts(severity, status, startTime, endTime, {})).resolves.toBe(null)
  })
  test("listIncidents", () => {
    const page: number = 56
    const pageSize: number = 56
    const status: string = "status_example"
    const severity: string = "severity_example"
    const startTime: Date = 2013-10-20T19:20:30+01:00
    const endTime: Date = 2013-10-20T19:20:30+01:00
    const resourceId: string = "resourceId_example"
    return expect(instance.listIncidents(page, pageSize, status, severity, startTime, endTime, resourceId, {})).resolves.toBe(null)
  })
  test("resolveIncident", () => {
    const incidentId: string = "incidentId_example"
    const body: api.IncidentIdResolveBody = undefined
    return expect(instance.resolveIncident(incidentId, body, {})).resolves.toBe(null)
  })
  test("updateIncident", () => {
    const body: api.IncidentUpdateRequest = undefined
    const incidentId: string = "incidentId_example"
    return expect(instance.updateIncident(body, incidentId, {})).resolves.toBe(null)
  })
})

describe("NotificationCenterApi", () => {
  let instance: api.NotificationCenterApi
  beforeEach(function() {
    instance = new api.NotificationCenterApi(config)
  });

  test("getUserNotificationSummary", () => {
    return expect(instance.getUserNotificationSummary({})).resolves.toBe(null)
  })
  test("listUserNotifications", () => {
    const page: number = 56
    const pageSize: number = 56
    const status: string = "status_example"
    return expect(instance.listUserNotifications(page, pageSize, status, {})).resolves.toBe(null)
  })
  test("markAllUserNotificationsAsRead", () => {
    return expect(instance.markAllUserNotificationsAsRead({})).resolves.toBe(null)
  })
  test("markUserNotificationAsRead", () => {
    const notificationId: string = "notificationId_example"
    return expect(instance.markUserNotificationAsRead(notificationId, {})).resolves.toBe(null)
  })
})

describe("NotificationsApi", () => {
  let instance: api.NotificationsApi
  beforeEach(function() {
    instance = new api.NotificationsApi(config)
  });

  test("createNotificationChannel", () => {
    const body: api.NotificationChannelCreateRequest = undefined
    return expect(instance.createNotificationChannel(body, {})).resolves.toBe(null)
  })
  test("deleteNotificationChannel", () => {
    const channelId: string = "channelId_example"
    return expect(instance.deleteNotificationChannel(channelId, {})).resolves.toBe(null)
  })
  test("getNotificationChannel", () => {
    const channelId: string = "channelId_example"
    return expect(instance.getNotificationChannel(channelId, {})).resolves.toBe(null)
  })
  test("listNotificationChannels", () => {
    return expect(instance.listNotificationChannels({})).resolves.toBe(null)
  })
  test("testNotificationChannel", () => {
    const channelId: string = "channelId_example"
    const body: api.ChannelIdTestBody = undefined
    return expect(instance.testNotificationChannel(channelId, body, {})).resolves.toBe(null)
  })
  test("updateNotificationChannel", () => {
    const body: api.NotificationChannelUpdateRequest = undefined
    const channelId: string = "channelId_example"
    return expect(instance.updateNotificationChannel(body, channelId, {})).resolves.toBe(null)
  })
})

describe("ResourceGroupsApi", () => {
  let instance: api.ResourceGroupsApi
  beforeEach(function() {
    instance = new api.ResourceGroupsApi(config)
  });

  test("createResourceGroup", () => {
    const body: api.ResourceGroupCreateRequest = undefined
    return expect(instance.createResourceGroup(body, {})).resolves.toBe(null)
  })
  test("deleteResourceGroup", () => {
    const groupId: string = "groupId_example"
    return expect(instance.deleteResourceGroup(groupId, {})).resolves.toBe(null)
  })
  test("getResourceGroup", () => {
    const groupId: string = "groupId_example"
    return expect(instance.getResourceGroup(groupId, {})).resolves.toBe(null)
  })
  test("listResourceGroups", () => {
    return expect(instance.listResourceGroups({})).resolves.toBe(null)
  })
  test("manageGroupMembers", () => {
    const body: api.GroupMemberOperation = undefined
    const groupId: string = "groupId_example"
    return expect(instance.manageGroupMembers(body, groupId, {})).resolves.toBe(null)
  })
  test("updateResourceGroup", () => {
    const body: api.ResourceGroupUpdateRequest = undefined
    const groupId: string = "groupId_example"
    return expect(instance.updateResourceGroup(body, groupId, {})).resolves.toBe(null)
  })
})

describe("ResourcesApi", () => {
  let instance: api.ResourcesApi
  beforeEach(function() {
    instance = new api.ResourcesApi(config)
  });

  test("batchOperateResources", () => {
    const body: api.BatchResourceOperation = undefined
    return expect(instance.batchOperateResources(body, {})).resolves.toBe(null)
  })
  test("createResource", () => {
    const body: api.ResourceCreateRequest = undefined
    return expect(instance.createResource(body, {})).resolves.toBe(null)
  })
  test("deleteResource", () => {
    const resourceId: string = "resourceId_example"
    return expect(instance.deleteResource(resourceId, {})).resolves.toBe(null)
  })
  test("getResource", () => {
    const resourceId: string = "resourceId_example"
    return expect(instance.getResource(resourceId, {})).resolves.toBe(null)
  })
  test("getResourceMetricsHistory", () => {
    const resourceId: string = "resourceId_example"
    const metric: string = "metric_example"
    const period: string = "period_example"
    return expect(instance.getResourceMetricsHistory(resourceId, metric, period, {})).resolves.toBe(null)
  })
  test("getScanResult", () => {
    const taskId: string = "taskId_example"
    return expect(instance.getScanResult(taskId, {})).resolves.toBe(null)
  })
  test("listResources", () => {
    const page: number = 56
    const pageSize: number = 56
    const status: string = "status_example"
    const type: string = "type_example"
    const groupId: string = "groupId_example"
    const search: string = "search_example"
    return expect(instance.listResources(page, pageSize, status, type, groupId, search, {})).resolves.toBe(null)
  })
  test("scanNetwork", () => {
    const body: api.NetworkScanRequest = undefined
    return expect(instance.scanNetwork(body, {})).resolves.toBe(null)
  })
  test("updateResource", () => {
    const body: api.ResourceUpdateRequest = undefined
    const resourceId: string = "resourceId_example"
    return expect(instance.updateResource(body, resourceId, {})).resolves.toBe(null)
  })
})

describe("RolesApi", () => {
  let instance: api.RolesApi
  beforeEach(function() {
    instance = new api.RolesApi(config)
  });

  test("getRoleDefinitions", () => {
    return expect(instance.getRoleDefinitions({})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("globalSearch", () => {
    const q: string = "q_example"
    return expect(instance.globalSearch(q, {})).resolves.toBe(null)
  })
})

describe("SettingsApi", () => {
  let instance: api.SettingsApi
  beforeEach(function() {
    instance = new api.SettingsApi(config)
  });

  test("createMaintenanceWindow", () => {
    const body: api.MaintenanceWindowCreateRequest = undefined
    return expect(instance.createMaintenanceWindow(body, {})).resolves.toBe(null)
  })
  test("deleteMaintenanceWindow", () => {
    const windowId: string = "windowId_example"
    return expect(instance.deleteMaintenanceWindow(windowId, {})).resolves.toBe(null)
  })
  test("getMaintenanceWindow", () => {
    const windowId: string = "windowId_example"
    return expect(instance.getMaintenanceWindow(windowId, {})).resolves.toBe(null)
  })
  test("getSettings", () => {
    return expect(instance.getSettings({})).resolves.toBe(null)
  })
  test("listMaintenanceWindows", () => {
    return expect(instance.listMaintenanceWindows({})).resolves.toBe(null)
  })
  test("updateMaintenanceWindow", () => {
    const body: api.MaintenanceWindowUpdateRequest = undefined
    const windowId: string = "windowId_example"
    return expect(instance.updateMaintenanceWindow(body, windowId, {})).resolves.toBe(null)
  })
  test("updateSettings", () => {
    const body: api.SystemSettings = undefined
    return expect(instance.updateSettings(body, {})).resolves.toBe(null)
  })
})

describe("TeamsApi", () => {
  let instance: api.TeamsApi
  beforeEach(function() {
    instance = new api.TeamsApi(config)
  });

  test("createTeam", () => {
    const body: api.TeamCreateRequest = undefined
    return expect(instance.createTeam(body, {})).resolves.toBe(null)
  })
  test("deleteTeam", () => {
    const teamId: string = "teamId_example"
    return expect(instance.deleteTeam(teamId, {})).resolves.toBe(null)
  })
  test("getTeam", () => {
    const teamId: string = "teamId_example"
    return expect(instance.getTeam(teamId, {})).resolves.toBe(null)
  })
  test("listTeams", () => {
    return expect(instance.listTeams({})).resolves.toBe(null)
  })
  test("manageTeamMembers", () => {
    const body: api.TeamIdMembersBody = undefined
    const teamId: string = "teamId_example"
    return expect(instance.manageTeamMembers(body, teamId, {})).resolves.toBe(null)
  })
  test("updateTeam", () => {
    const body: api.TeamUpdateRequest = undefined
    const teamId: string = "teamId_example"
    return expect(instance.updateTeam(body, teamId, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("changePassword", () => {
    const body: api.ProfileChangepasswordBody = undefined
    return expect(instance.changePassword(body, {})).resolves.toBe(null)
  })
  test("createUser", () => {
    const body: api.UserCreateRequest = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const userId: string = "userId_example"
    return expect(instance.deleteUser(userId, {})).resolves.toBe(null)
  })
  test("getProfile", () => {
    return expect(instance.getProfile({})).resolves.toBe(null)
  })
  test("getUser", () => {
    const userId: string = "userId_example"
    return expect(instance.getUser(userId, {})).resolves.toBe(null)
  })
  test("listUsers", () => {
    const page: number = 56
    const pageSize: number = 56
    const role: string = "role_example"
    const teamId: string = "teamId_example"
    return expect(instance.listUsers(page, pageSize, role, teamId, {})).resolves.toBe(null)
  })
  test("updateNotificationPreferences", () => {
    const body: api.NotificationPreferences = undefined
    return expect(instance.updateNotificationPreferences(body, {})).resolves.toBe(null)
  })
  test("updateProfile", () => {
    const body: api.ProfileUpdateRequest = undefined
    return expect(instance.updateProfile(body, {})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.UserUpdateRequest = undefined
    const userId: string = "userId_example"
    return expect(instance.updateUser(body, userId, {})).resolves.toBe(null)
  })
  test("verifyContact", () => {
    const body: api.ProfileVerifycontactBody = undefined
    return expect(instance.verifyContact(body, {})).resolves.toBe(null)
  })
})

