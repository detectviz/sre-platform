/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * SRE Platform - Control Plane API
 * The Control Plane is the central management hub for the SRE Platform. It provides the Web UI and APIs for managing resources, users, incidents, and more. It orchestrates diagnostic tasks by calling the SRE Assistant service. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sre-platform@example.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8081".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AIGeneratedReport
 */
export interface AIGeneratedReport {
    /**
     * 
     * @type {string}
     * @memberof AIGeneratedReport
     */
    reportType?: AIGeneratedReport.ReportTypeEnum;
    /**
     * AI 生成的報告內容（Markdown 格式）
     * @type {string}
     * @memberof AIGeneratedReport
     */
    content?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AIGeneratedReport
     */
    keyFindings?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AIGeneratedReport
     */
    recommendations?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof AIGeneratedReport
     */
    confidenceScore?: number;
    /**
     * 
     * @type {Date}
     * @memberof AIGeneratedReport
     */
    generatedAt?: Date;
}

/**
 * @export
 * @namespace AIGeneratedReport
 */
export namespace AIGeneratedReport {
    /**
     * @export
     * @enum {string}
     */
    export enum ReportTypeEnum {
        Summary = <any> 'summary',
        RootCause = <any> 'root_cause',
        ImpactAnalysis = <any> 'impact_analysis'
    }
}
/**
 * 
 * @export
 * @interface AlertAnalysisRequest
 */
export interface AlertAnalysisRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertAnalysisRequest
     */
    alertIds: Array<string>;
    /**
     * 關聯時間窗口（秒）
     * @type {number}
     * @memberof AlertAnalysisRequest
     */
    correlationWindow?: number;
}
/**
 * 
 * @export
 * @interface AlertRule
 */
export interface AlertRule {
    /**
     * 
     * @type {string}
     * @memberof AlertRule
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRule
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRule
     */
    description?: string;
    /**
     * 
     * @type {AlertRuleCondition}
     * @memberof AlertRule
     */
    condition: AlertRuleCondition;
    /**
     * 
     * @type {string}
     * @memberof AlertRule
     */
    severity?: AlertRule.SeverityEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AlertRule
     */
    enabled: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRule
     */
    notificationChannels?: Array<string>;
    /**
     * 
     * @type {AlertRuleResourceFilter}
     * @memberof AlertRule
     */
    resourceFilter?: AlertRuleResourceFilter;
    /**
     * 
     * @type {AlertRuleAutomation}
     * @memberof AlertRule
     */
    automation?: AlertRuleAutomation;
    /**
     * 
     * @type {Date}
     * @memberof AlertRule
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AlertRule
     */
    updatedAt?: Date;
}

/**
 * @export
 * @namespace AlertRule
 */
export namespace AlertRule {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 告警觸發時的自動化設定
 * @export
 * @interface AlertRuleAutomation
 */
export interface AlertRuleAutomation {
    /**
     * 
     * @type {boolean}
     * @memberof AlertRuleAutomation
     */
    enabled?: boolean;
    /**
     * 觸發告警時要執行的自動化腳本 ID
     * @type {string}
     * @memberof AlertRuleAutomation
     */
    scriptId?: string;
    /**
     * 傳遞給腳本的參數
     * @type {{ [key: string]: any; }}
     * @memberof AlertRuleAutomation
     */
    parameters?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface AlertRuleCondition
 */
export interface AlertRuleCondition {
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCondition
     */
    metric?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCondition
     */
    operator?: AlertRuleCondition.OperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof AlertRuleCondition
     */
    threshold?: number;
    /**
     * 持續時間（秒）
     * @type {number}
     * @memberof AlertRuleCondition
     */
    duration?: number;
}

/**
 * @export
 * @namespace AlertRuleCondition
 */
export namespace AlertRuleCondition {
    /**
     * @export
     * @enum {string}
     */
    export enum OperatorEnum {
        Gt = <any> 'gt',
        Gte = <any> 'gte',
        Lt = <any> 'lt',
        Lte = <any> 'lte',
        Eq = <any> 'eq',
        Neq = <any> 'neq'
    }
}
/**
 * 
 * @export
 * @interface AlertRuleCreateRequest
 */
export interface AlertRuleCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {AlertRuleCreateRequestCondition}
     * @memberof AlertRuleCreateRequest
     */
    condition: AlertRuleCreateRequestCondition;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCreateRequest
     */
    severity: AlertRuleCreateRequest.SeverityEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRuleCreateRequest
     */
    notificationChannels?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof AlertRuleCreateRequest
     */
    resourceFilter?: any;
}

/**
 * @export
 * @namespace AlertRuleCreateRequest
 */
export namespace AlertRuleCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface AlertRuleCreateRequestCondition
 */
export interface AlertRuleCreateRequestCondition {
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCreateRequestCondition
     */
    metric: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleCreateRequestCondition
     */
    operator: AlertRuleCreateRequestCondition.OperatorEnum;
    /**
     * 
     * @type {number}
     * @memberof AlertRuleCreateRequestCondition
     */
    threshold: number;
    /**
     * 
     * @type {number}
     * @memberof AlertRuleCreateRequestCondition
     */
    duration?: number;
}

/**
 * @export
 * @namespace AlertRuleCreateRequestCondition
 */
export namespace AlertRuleCreateRequestCondition {
    /**
     * @export
     * @enum {string}
     */
    export enum OperatorEnum {
        Gt = <any> 'gt',
        Gte = <any> 'gte',
        Lt = <any> 'lt',
        Lte = <any> 'lte',
        Eq = <any> 'eq',
        Neq = <any> 'neq'
    }
}
/**
 * 
 * @export
 * @interface AlertRuleList
 */
export interface AlertRuleList {
    /**
     * 
     * @type {Array<AlertRule>}
     * @memberof AlertRuleList
     */
    items?: Array<AlertRule>;
    /**
     * 
     * @type {number}
     * @memberof AlertRuleList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface AlertRuleResourceFilter
 */
export interface AlertRuleResourceFilter {
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRuleResourceFilter
     */
    groups?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRuleResourceFilter
     */
    types?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRuleResourceFilter
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface AlertRuleUpdateRequest
 */
export interface AlertRuleUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertRuleUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof AlertRuleUpdateRequest
     */
    condition?: any;
    /**
     * 
     * @type {string}
     * @memberof AlertRuleUpdateRequest
     */
    severity?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlertRuleUpdateRequest
     */
    notificationChannels?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof AlertRuleUpdateRequest
     */
    resourceFilter?: any;
}
/**
 * 
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuditLog
     */
    timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    action?: AuditLog.ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    resourceType?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    resourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    resourceName?: string;
    /**
     * 
     * @type {AuditLogChanges}
     * @memberof AuditLog
     */
    changes?: AuditLogChanges;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    result?: AuditLog.ResultEnum;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    errorMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLog
     */
    userAgent?: string;
}

/**
 * @export
 * @namespace AuditLog
 */
export namespace AuditLog {
    /**
     * @export
     * @enum {string}
     */
    export enum ActionEnum {
        Create = <any> 'create',
        Update = <any> 'update',
        Delete = <any> 'delete',
        Execute = <any> 'execute',
        Login = <any> 'login',
        Logout = <any> 'logout'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ResultEnum {
        Success = <any> 'success',
        Failure = <any> 'failure'
    }
}
/**
 * 
 * @export
 * @interface AuditLogChanges
 */
export interface AuditLogChanges {
    /**
     * 
     * @type {any}
     * @memberof AuditLogChanges
     */
    before?: any;
    /**
     * 
     * @type {any}
     * @memberof AuditLogChanges
     */
    after?: any;
}
/**
 * 
 * @export
 * @interface AuditLogList
 */
export interface AuditLogList {
    /**
     * 
     * @type {Array<AuditLog>}
     * @memberof AuditLogList
     */
    items?: Array<AuditLog>;
    /**
     * 
     * @type {Pagination}
     * @memberof AuditLogList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface AutocompleteResult
 */
export interface AutocompleteResult {
    /**
     * 實體 ID
     * @type {string}
     * @memberof AutocompleteResult
     */
    id?: string;
    /**
     * 實體名稱
     * @type {string}
     * @memberof AutocompleteResult
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface BatchIncidentOperation
 */
export interface BatchIncidentOperation {
    /**
     * 
     * @type {string}
     * @memberof BatchIncidentOperation
     */
    operation: BatchIncidentOperation.OperationEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof BatchIncidentOperation
     */
    incidentIds: Array<string>;
    /**
     * 用於 acknowledge 操作的批次備註
     * @type {string}
     * @memberof BatchIncidentOperation
     */
    comment?: string;
    /**
     * 用於 resolve 操作的批次解決方案描述
     * @type {string}
     * @memberof BatchIncidentOperation
     */
    resolution?: string;
}

/**
 * @export
 * @namespace BatchIncidentOperation
 */
export namespace BatchIncidentOperation {
    /**
     * @export
     * @enum {string}
     */
    export enum OperationEnum {
        Acknowledge = <any> 'acknowledge',
        Resolve = <any> 'resolve'
    }
}
/**
 * 
 * @export
 * @interface BatchOperationResult
 */
export interface BatchOperationResult {
    /**
     * 
     * @type {number}
     * @memberof BatchOperationResult
     */
    successCount?: number;
    /**
     * 
     * @type {number}
     * @memberof BatchOperationResult
     */
    failureCount?: number;
    /**
     * 
     * @type {Array<BatchOperationResultFailures>}
     * @memberof BatchOperationResult
     */
    failures?: Array<BatchOperationResultFailures>;
}
/**
 * 
 * @export
 * @interface BatchOperationResultFailures
 */
export interface BatchOperationResultFailures {
    /**
     * 
     * @type {string}
     * @memberof BatchOperationResultFailures
     */
    resourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof BatchOperationResultFailures
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface BatchResourceOperation
 */
export interface BatchResourceOperation {
    /**
     * 
     * @type {string}
     * @memberof BatchResourceOperation
     */
    operation: BatchResourceOperation.OperationEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof BatchResourceOperation
     */
    resourceIds: Array<string>;
    /**
     * 
     * @type {BatchResourceOperationParameters}
     * @memberof BatchResourceOperation
     */
    parameters?: BatchResourceOperationParameters;
}

/**
 * @export
 * @namespace BatchResourceOperation
 */
export namespace BatchResourceOperation {
    /**
     * @export
     * @enum {string}
     */
    export enum OperationEnum {
        Delete = <any> 'delete',
        AddToGroup = <any> 'add_to_group',
        RemoveFromGroup = <any> 'remove_from_group',
        UpdateTags = <any> 'update_tags'
    }
}
/**
 * 
 * @export
 * @interface BatchResourceOperationParameters
 */
export interface BatchResourceOperationParameters {
    /**
     * 
     * @type {string}
     * @memberof BatchResourceOperationParameters
     */
    groupId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BatchResourceOperationParameters
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface CallbacksDiagnosiscompleteBody
 */
export interface CallbacksDiagnosiscompleteBody {
    /**
     * 
     * @type {string}
     * @memberof CallbacksDiagnosiscompleteBody
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof CallbacksDiagnosiscompleteBody
     */
    status?: CallbacksDiagnosiscompleteBody.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof CallbacksDiagnosiscompleteBody
     */
    resultUrl?: string;
}

/**
 * @export
 * @namespace CallbacksDiagnosiscompleteBody
 */
export namespace CallbacksDiagnosiscompleteBody {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Completed = <any> 'completed',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface CapacityAnalysisRequest
 */
export interface CapacityAnalysisRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof CapacityAnalysisRequest
     */
    resourceIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisRequest
     */
    metricType: CapacityAnalysisRequest.MetricTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisRequest
     */
    forecastDays?: number;
}

/**
 * @export
 * @namespace CapacityAnalysisRequest
 */
export namespace CapacityAnalysisRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum MetricTypeEnum {
        Cpu = <any> 'cpu',
        Memory = <any> 'memory',
        Disk = <any> 'disk',
        Network = <any> 'network'
    }
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponse
 */
export interface CapacityAnalysisResponse {
    /**
     * 
     * @type {CapacityAnalysisResponseCurrentUsage}
     * @memberof CapacityAnalysisResponse
     */
    currentUsage?: CapacityAnalysisResponseCurrentUsage;
    /**
     * 
     * @type {CapacityAnalysisResponseForecast}
     * @memberof CapacityAnalysisResponse
     */
    forecast?: CapacityAnalysisResponseForecast;
    /**
     * 
     * @type {Array<CapacityAnalysisResponseRecommendations>}
     * @memberof CapacityAnalysisResponse
     */
    recommendations?: Array<CapacityAnalysisResponseRecommendations>;
    /**
     * 
     * @type {Array<CapacityAnalysisResponseChartData>}
     * @memberof CapacityAnalysisResponse
     */
    chartData?: Array<CapacityAnalysisResponseChartData>;
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseChartData
 */
export interface CapacityAnalysisResponseChartData {
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseChartData
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseChartData
     */
    historical?: number;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseChartData
     */
    predicted?: number;
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseCostImpact
 */
export interface CapacityAnalysisResponseCostImpact {
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseCostImpact
     */
    monthlyIncrease?: number;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseCostImpact
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseCurrentUsage
 */
export interface CapacityAnalysisResponseCurrentUsage {
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseCurrentUsage
     */
    average?: number;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseCurrentUsage
     */
    peak?: number;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseCurrentUsage
     */
    percentile95?: number;
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseForecast
 */
export interface CapacityAnalysisResponseForecast {
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseForecast
     */
    trend?: CapacityAnalysisResponseForecast.TrendEnum;
    /**
     * 預測多少天後達到容量上限
     * @type {number}
     * @memberof CapacityAnalysisResponseForecast
     */
    daysToCapacity?: number;
    /**
     * 月增長率百分比
     * @type {number}
     * @memberof CapacityAnalysisResponseForecast
     */
    growthRate?: number;
    /**
     * 
     * @type {Array<CapacityAnalysisResponseForecastCapacityAlerts>}
     * @memberof CapacityAnalysisResponseForecast
     */
    capacityAlerts?: Array<CapacityAnalysisResponseForecastCapacityAlerts>;
}

/**
 * @export
 * @namespace CapacityAnalysisResponseForecast
 */
export namespace CapacityAnalysisResponseForecast {
    /**
     * @export
     * @enum {string}
     */
    export enum TrendEnum {
        Increasing = <any> 'increasing',
        Stable = <any> 'stable',
        Decreasing = <any> 'decreasing'
    }
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseForecastCapacityAlerts
 */
export interface CapacityAnalysisResponseForecastCapacityAlerts {
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseForecastCapacityAlerts
     */
    alertType?: string;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseForecastCapacityAlerts
     */
    threshold?: string;
    /**
     * 
     * @type {Date}
     * @memberof CapacityAnalysisResponseForecastCapacityAlerts
     */
    estimatedDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseForecastCapacityAlerts
     */
    daysRemaining?: number;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseForecastCapacityAlerts
     */
    severity?: string;
}
/**
 * 
 * @export
 * @interface CapacityAnalysisResponseRecommendations
 */
export interface CapacityAnalysisResponseRecommendations {
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    type?: CapacityAnalysisResponseRecommendations.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    resource?: string;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    priority?: CapacityAnalysisResponseRecommendations.PriorityEnum;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    currentAllocation?: number;
    /**
     * 
     * @type {number}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    recommendedAllocation?: number;
    /**
     * 
     * @type {string}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    reasoning?: string;
    /**
     * 
     * @type {CapacityAnalysisResponseCostImpact}
     * @memberof CapacityAnalysisResponseRecommendations
     */
    costImpact?: CapacityAnalysisResponseCostImpact;
}

/**
 * @export
 * @namespace CapacityAnalysisResponseRecommendations
 */
export namespace CapacityAnalysisResponseRecommendations {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        ScaleUp = <any> 'scale_up',
        ScaleDown = <any> 'scale_down',
        Optimize = <any> 'optimize'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum PriorityEnum {
        Immediate = <any> 'immediate',
        High = <any> 'high',
        Medium = <any> 'medium',
        Low = <any> 'low'
    }
}
/**
 * 
 * @export
 * @interface ChannelIdTestBody
 */
export interface ChannelIdTestBody {
    /**
     * 
     * @type {string}
     * @memberof ChannelIdTestBody
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface DashboardSummary
 */
export interface DashboardSummary {
    /**
     * 
     * @type {DashboardSummaryAlerts}
     * @memberof DashboardSummary
     */
    alerts?: DashboardSummaryAlerts;
    /**
     * 
     * @type {DashboardSummaryResources}
     * @memberof DashboardSummary
     */
    resources?: DashboardSummaryResources;
    /**
     * 
     * @type {DashboardSummaryKpis}
     * @memberof DashboardSummary
     */
    kpis?: DashboardSummaryKpis;
}
/**
 * 
 * @export
 * @interface DashboardSummaryAlerts
 */
export interface DashboardSummaryAlerts {
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryAlerts
     */
    _new?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryAlerts
     */
    processing?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryAlerts
     */
    resolvedToday?: number;
}
/**
 * 
 * @export
 * @interface DashboardSummaryKpis
 */
export interface DashboardSummaryKpis {
    /**
     * 系統可用性百分比
     * @type {number}
     * @memberof DashboardSummaryKpis
     */
    availability?: number;
    /**
     * 平均修復時間（分鐘）
     * @type {number}
     * @memberof DashboardSummaryKpis
     */
    mttr?: number;
    /**
     * 事件發生率
     * @type {number}
     * @memberof DashboardSummaryKpis
     */
    incidentRate?: number;
}
/**
 * 
 * @export
 * @interface DashboardSummaryResources
 */
export interface DashboardSummaryResources {
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryResources
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryResources
     */
    healthy?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryResources
     */
    warning?: number;
    /**
     * 
     * @type {number}
     * @memberof DashboardSummaryResources
     */
    critical?: number;
}
/**
 * 
 * @export
 * @interface DiagnosticHistoryList
 */
export interface DiagnosticHistoryList {
    /**
     * 
     * @type {Array<DiagnosticHistoryListItems>}
     * @memberof DiagnosticHistoryList
     */
    items?: Array<DiagnosticHistoryListItems>;
    /**
     * 
     * @type {Pagination}
     * @memberof DiagnosticHistoryList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface DiagnosticHistoryListItems
 */
export interface DiagnosticHistoryListItems {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticHistoryListItems
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticHistoryListItems
     */
    incidentId?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticHistoryListItems
     */
    status?: string;
    /**
     * 
     * @type {Date}
     * @memberof DiagnosticHistoryListItems
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DiagnosticHistoryListItems
     */
    completedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticHistoryListItems
     */
    summary?: string;
}
/**
 * 
 * @export
 * @interface DiagnosticRequest
 */
export interface DiagnosticRequest {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticRequest
     */
    incidentId: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticRequest
     */
    severity: DiagnosticRequest.SeverityEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof DiagnosticRequest
     */
    affectedServices: Array<string>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DiagnosticRequest
     */
    context?: { [key: string]: any; };
}

/**
 * @export
 * @namespace DiagnosticRequest
 */
export namespace DiagnosticRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        P0 = <any> 'P0',
        P1 = <any> 'P1',
        P2 = <any> 'P2',
        P3 = <any> 'P3'
    }
}
/**
 * 
 * @export
 * @interface DiagnosticResult
 */
export interface DiagnosticResult {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticResult
     */
    summary?: string;
    /**
     * 
     * @type {Array<DiagnosticResultFindings>}
     * @memberof DiagnosticResult
     */
    findings?: Array<DiagnosticResultFindings>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DiagnosticResult
     */
    recommendedActions?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof DiagnosticResult
     */
    confidenceScore?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DiagnosticResult
     */
    toolsUsed?: Array<string>;
    /**
     * 執行時間（秒）
     * @type {number}
     * @memberof DiagnosticResult
     */
    executionTime?: number;
}
/**
 * 
 * @export
 * @interface DiagnosticResultFindings
 */
export interface DiagnosticResultFindings {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticResultFindings
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticResultFindings
     */
    severity?: DiagnosticResultFindings.SeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticResultFindings
     */
    message?: string;
    /**
     * 
     * @type {any}
     * @memberof DiagnosticResultFindings
     */
    evidence?: any;
    /**
     * 
     * @type {Date}
     * @memberof DiagnosticResultFindings
     */
    timestamp?: Date;
}

/**
 * @export
 * @namespace DiagnosticResultFindings
 */
export namespace DiagnosticResultFindings {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface DiagnosticStatus
 */
export interface DiagnosticStatus {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticStatus
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticStatus
     */
    status?: DiagnosticStatus.StatusEnum;
    /**
     * 
     * @type {number}
     * @memberof DiagnosticStatus
     */
    progress?: number;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticStatus
     */
    currentStep?: string;
    /**
     * 
     * @type {DiagnosticResult}
     * @memberof DiagnosticStatus
     */
    result?: DiagnosticResult;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticStatus
     */
    error?: string;
}

/**
 * @export
 * @namespace DiagnosticStatus
 */
export namespace DiagnosticStatus {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Processing = <any> 'processing',
        Completed = <any> 'completed',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface DiagnosticTaskResponse
 */
export interface DiagnosticTaskResponse {
    /**
     * 
     * @type {string}
     * @memberof DiagnosticTaskResponse
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticTaskResponse
     */
    status?: DiagnosticTaskResponse.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof DiagnosticTaskResponse
     */
    message?: string;
    /**
     * 預估完成時間（秒）
     * @type {number}
     * @memberof DiagnosticTaskResponse
     */
    estimatedTime?: number;
}

/**
 * @export
 * @namespace DiagnosticTaskResponse
 */
export namespace DiagnosticTaskResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Accepted = <any> 'accepted',
        Processing = <any> 'processing',
        Completed = <any> 'completed',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 錯誤代碼
     * @type {string}
     * @memberof ErrorResponse
     */
    error: string;
    /**
     * 錯誤訊息
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
    /**
     * 錯誤詳情
     * @type {any}
     * @memberof ErrorResponse
     */
    details?: any;
    /**
     * 請求追蹤 ID
     * @type {string}
     * @memberof ErrorResponse
     */
    requestId?: string;
}
/**
 * 
 * @export
 * @interface Execution
 */
export interface Execution {
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    scriptId?: string;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    scriptName?: string;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    status?: Execution.StatusEnum;
    /**
     * 
     * @type {any}
     * @memberof Execution
     */
    parameters?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof Execution
     */
    targetResources?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    output?: string;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    error?: string;
    /**
     * 
     * @type {Date}
     * @memberof Execution
     */
    startedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Execution
     */
    completedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Execution
     */
    executedBy?: string;
    /**
     * 觸發此次執行的告警事件 ID
     * @type {string}
     * @memberof Execution
     */
    triggeringIncidentId?: string;
}

/**
 * @export
 * @namespace Execution
 */
export namespace Execution {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Pending = <any> 'pending',
        Running = <any> 'running',
        Success = <any> 'success',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface ExecutionList
 */
export interface ExecutionList {
    /**
     * 
     * @type {Array<Execution>}
     * @memberof ExecutionList
     */
    items?: Array<Execution>;
    /**
     * 
     * @type {Pagination}
     * @memberof ExecutionList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface ExecutionTaskResponse
 */
export interface ExecutionTaskResponse {
    /**
     * 
     * @type {string}
     * @memberof ExecutionTaskResponse
     */
    executionId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecutionTaskResponse
     */
    status?: ExecutionTaskResponse.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ExecutionTaskResponse
     */
    message?: string;
}

/**
 * @export
 * @namespace ExecutionTaskResponse
 */
export namespace ExecutionTaskResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Pending = <any> 'pending',
        Running = <any> 'running',
        Success = <any> 'success',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface GroupMemberOperation
 */
export interface GroupMemberOperation {
    /**
     * 
     * @type {string}
     * @memberof GroupMemberOperation
     */
    operation: GroupMemberOperation.OperationEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupMemberOperation
     */
    resourceIds: Array<string>;
}

/**
 * @export
 * @namespace GroupMemberOperation
 */
export namespace GroupMemberOperation {
    /**
     * @export
     * @enum {string}
     */
    export enum OperationEnum {
        Add = <any> 'add',
        Remove = <any> 'remove'
    }
}
/**
 * 
 * @export
 * @interface HealthStatus
 */
export interface HealthStatus {
    /**
     * 
     * @type {string}
     * @memberof HealthStatus
     */
    status: HealthStatus.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof HealthStatus
     */
    timestamp: Date;
    /**
     * 
     * @type {string}
     * @memberof HealthStatus
     */
    version?: string;
    /**
     * 運行時間（秒）
     * @type {number}
     * @memberof HealthStatus
     */
    uptime?: number;
}

/**
 * @export
 * @namespace HealthStatus
 */
export namespace HealthStatus {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Healthy = <any> 'healthy',
        Unhealthy = <any> 'unhealthy'
    }
}
/**
 * 
 * @export
 * @interface Incident
 */
export interface Incident {
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    severity: Incident.SeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    status: Incident.StatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof Incident
     */
    affectedResources?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    assignee?: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    acknowledgedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    acknowledgedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    resolvedBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    resolvedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    resolution?: string;
    /**
     * 
     * @type {string}
     * @memberof Incident
     */
    rootCause?: string;
    /**
     * 
     * @type {Array<IncidentComments>}
     * @memberof Incident
     */
    comments?: Array<IncidentComments>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Incident
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Incident
     */
    updatedAt?: Date;
    /**
     * 由此告警事件觸發的自動化執行 ID 列表
     * @type {Array<string>}
     * @memberof Incident
     */
    automationExecutionIds?: Array<string>;
}

/**
 * @export
 * @namespace Incident
 */
export namespace Incident {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        New = <any> 'new',
        Acknowledged = <any> 'acknowledged',
        Resolved = <any> 'resolved'
    }
}
/**
 * 
 * @export
 * @interface IncidentComments
 */
export interface IncidentComments {
    /**
     * 
     * @type {string}
     * @memberof IncidentComments
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentComments
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentComments
     */
    comment?: string;
    /**
     * 
     * @type {Date}
     * @memberof IncidentComments
     */
    createdAt?: Date;
}
/**
 * 
 * @export
 * @interface IncidentCreateRequest
 */
export interface IncidentCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof IncidentCreateRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentCreateRequest
     */
    severity: IncidentCreateRequest.SeverityEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof IncidentCreateRequest
     */
    affectedResources?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IncidentCreateRequest
     */
    tags?: Array<string>;
}

/**
 * @export
 * @namespace IncidentCreateRequest
 */
export namespace IncidentCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface IncidentIdAcknowledgeBody
 */
export interface IncidentIdAcknowledgeBody {
    /**
     * 確認人
     * @type {string}
     * @memberof IncidentIdAcknowledgeBody
     */
    acknowledgedBy?: string;
    /**
     * 確認備註
     * @type {string}
     * @memberof IncidentIdAcknowledgeBody
     */
    comment?: string;
}
/**
 * 
 * @export
 * @interface IncidentIdAssignBody
 */
export interface IncidentIdAssignBody {
    /**
     * 被指派人 ID
     * @type {string}
     * @memberof IncidentIdAssignBody
     */
    assigneeId: string;
}
/**
 * 
 * @export
 * @interface IncidentIdCommentsBody
 */
export interface IncidentIdCommentsBody {
    /**
     * 註記內容
     * @type {string}
     * @memberof IncidentIdCommentsBody
     */
    comment: string;
}
/**
 * 
 * @export
 * @interface IncidentIdResolveBody
 */
export interface IncidentIdResolveBody {
    /**
     * 解決人
     * @type {string}
     * @memberof IncidentIdResolveBody
     */
    resolvedBy?: string;
    /**
     * 解決方案描述
     * @type {string}
     * @memberof IncidentIdResolveBody
     */
    resolution?: string;
    /**
     * 根本原因
     * @type {string}
     * @memberof IncidentIdResolveBody
     */
    rootCause?: string;
}
/**
 * 
 * @export
 * @interface IncidentList
 */
export interface IncidentList {
    /**
     * 
     * @type {Array<Incident>}
     * @memberof IncidentList
     */
    items?: Array<Incident>;
    /**
     * 
     * @type {Pagination}
     * @memberof IncidentList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface IncidentUpdateRequest
 */
export interface IncidentUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof IncidentUpdateRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IncidentUpdateRequest
     */
    severity?: IncidentUpdateRequest.SeverityEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof IncidentUpdateRequest
     */
    affectedResources?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IncidentUpdateRequest
     */
    tags?: Array<string>;
}

/**
 * @export
 * @namespace IncidentUpdateRequest
 */
export namespace IncidentUpdateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface IncidentsGeneratereportBody
 */
export interface IncidentsGeneratereportBody {
    /**
     * 要分析的事件 ID 列表
     * @type {Array<string>}
     * @memberof IncidentsGeneratereportBody
     */
    incidentIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IncidentsGeneratereportBody
     */
    reportType?: IncidentsGeneratereportBody.ReportTypeEnum;
}

/**
 * @export
 * @namespace IncidentsGeneratereportBody
 */
export namespace IncidentsGeneratereportBody {
    /**
     * @export
     * @enum {string}
     */
    export enum ReportTypeEnum {
        Summary = <any> 'summary',
        RootCause = <any> 'root_cause',
        ImpactAnalysis = <any> 'impact_analysis'
    }
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    message?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse200
     */
    matchedResources?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<InlineResponse2001Alerts>}
     * @memberof InlineResponse2001
     */
    alerts?: Array<InlineResponse2001Alerts>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    firingCount?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    resolvedCount?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Alerts
 */
export interface InlineResponse2001Alerts {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    severity?: InlineResponse2001Alerts.SeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    status?: InlineResponse2001Alerts.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    resourceName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Alerts
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponse2001Alerts
     */
    firedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponse2001Alerts
     */
    resolvedAt?: Date;
}

/**
 * @export
 * @namespace InlineResponse2001Alerts
 */
export namespace InlineResponse2001Alerts {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        P0 = <any> 'P0',
        P1 = <any> 'P1',
        P2 = <any> 'P2',
        P3 = <any> 'P3'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Firing = <any> 'firing',
        Resolved = <any> 'resolved',
        Pending = <any> 'pending'
    }
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2002
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface MaintenanceWindow
 */
export interface MaintenanceWindow {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindow
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindow
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindow
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindow
     */
    startTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindow
     */
    endTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MaintenanceWindow
     */
    recurring?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindow
     */
    recurrencePattern?: MaintenanceWindow.RecurrencePatternEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MaintenanceWindow
     */
    affectedResources?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindow
     */
    createdBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindow
     */
    createdAt?: Date;
}

/**
 * @export
 * @namespace MaintenanceWindow
 */
export namespace MaintenanceWindow {
    /**
     * @export
     * @enum {string}
     */
    export enum RecurrencePatternEnum {
        Daily = <any> 'daily',
        Weekly = <any> 'weekly',
        Monthly = <any> 'monthly'
    }
}
/**
 * 
 * @export
 * @interface MaintenanceWindowCreateRequest
 */
export interface MaintenanceWindowCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindowCreateRequest
     */
    startTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindowCreateRequest
     */
    endTime: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MaintenanceWindowCreateRequest
     */
    recurring?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowCreateRequest
     */
    recurrencePattern?: MaintenanceWindowCreateRequest.RecurrencePatternEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MaintenanceWindowCreateRequest
     */
    affectedResources?: Array<string>;
}

/**
 * @export
 * @namespace MaintenanceWindowCreateRequest
 */
export namespace MaintenanceWindowCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum RecurrencePatternEnum {
        Daily = <any> 'daily',
        Weekly = <any> 'weekly',
        Monthly = <any> 'monthly'
    }
}
/**
 * 
 * @export
 * @interface MaintenanceWindowList
 */
export interface MaintenanceWindowList {
    /**
     * 
     * @type {Array<MaintenanceWindow>}
     * @memberof MaintenanceWindowList
     */
    items?: Array<MaintenanceWindow>;
    /**
     * 
     * @type {number}
     * @memberof MaintenanceWindowList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface MaintenanceWindowUpdateRequest
 */
export interface MaintenanceWindowUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindowUpdateRequest
     */
    startTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MaintenanceWindowUpdateRequest
     */
    endTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof MaintenanceWindowUpdateRequest
     */
    recurring?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceWindowUpdateRequest
     */
    recurrencePattern?: MaintenanceWindowUpdateRequest.RecurrencePatternEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof MaintenanceWindowUpdateRequest
     */
    affectedResources?: Array<string>;
}

/**
 * @export
 * @namespace MaintenanceWindowUpdateRequest
 */
export namespace MaintenanceWindowUpdateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum RecurrencePatternEnum {
        Daily = <any> 'daily',
        Weekly = <any> 'weekly',
        Monthly = <any> 'monthly'
    }
}
/**
 * 
 * @export
 * @interface MetricDefinition
 */
export interface MetricDefinition {
    /**
     * 指標的唯一名稱 (e.g., cpu.usage.percentage)
     * @type {string}
     * @memberof MetricDefinition
     */
    name?: string;
    /**
     * 指標單位 (e.g., %, bytes, requests/sec)
     * @type {string}
     * @memberof MetricDefinition
     */
    unit?: string;
    /**
     * 指標的可讀描述
     * @type {string}
     * @memberof MetricDefinition
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface MetricDefinitionList
 */
export interface MetricDefinitionList {
    /**
     * 
     * @type {Array<MetricDefinition>}
     * @memberof MetricDefinitionList
     */
    items?: Array<MetricDefinition>;
}
/**
 * 
 * @export
 * @interface NetworkScanRequest
 */
export interface NetworkScanRequest {
    /**
     * CIDR 格式的網段（如 192.168.1.0/24）
     * @type {string}
     * @memberof NetworkScanRequest
     */
    cidr: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NetworkScanRequest
     */
    portRanges?: Array<string>;
    /**
     * 掃描超時時間（秒）
     * @type {number}
     * @memberof NetworkScanRequest
     */
    timeout?: number;
}
/**
 * 
 * @export
 * @interface NotificationChannel
 */
export interface NotificationChannel {
    /**
     * 
     * @type {string}
     * @memberof NotificationChannel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannel
     */
    type: NotificationChannel.TypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationChannel
     */
    enabled: boolean;
    /**
     * 
     * @type {NotificationChannelConfiguration}
     * @memberof NotificationChannel
     */
    configuration?: NotificationChannelConfiguration;
    /**
     * 
     * @type {NotificationChannelTestStatus}
     * @memberof NotificationChannel
     */
    testStatus?: NotificationChannelTestStatus;
    /**
     * 
     * @type {Date}
     * @memberof NotificationChannel
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NotificationChannel
     */
    updatedAt?: Date;
}

/**
 * @export
 * @namespace NotificationChannel
 */
export namespace NotificationChannel {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Email = <any> 'email',
        Webhook = <any> 'webhook',
        Slack = <any> 'slack',
        Line = <any> 'line',
        Sms = <any> 'sms'
    }
}
/**
 * 管道特定的配置
 * @export
 * @interface NotificationChannelConfiguration
 */
export interface NotificationChannelConfiguration {
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    smtpHost?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationChannelConfiguration
     */
    smtpPort?: number;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    smtpUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    smtpFrom?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    method?: string;
    /**
     * 
     * @type {any}
     * @memberof NotificationChannelConfiguration
     */
    headers?: any;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    webhookUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    channel?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    mention?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    apiEndpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    apiKey?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelConfiguration
     */
    senderId?: string;
}
/**
 * 
 * @export
 * @interface NotificationChannelCreateRequest
 */
export interface NotificationChannelCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelCreateRequest
     */
    type: NotificationChannelCreateRequest.TypeEnum;
    /**
     * 
     * @type {any}
     * @memberof NotificationChannelCreateRequest
     */
    configuration: any;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationChannelCreateRequest
     */
    enabled?: boolean;
}

/**
 * @export
 * @namespace NotificationChannelCreateRequest
 */
export namespace NotificationChannelCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Email = <any> 'email',
        Webhook = <any> 'webhook',
        Slack = <any> 'slack',
        Line = <any> 'line',
        Sms = <any> 'sms'
    }
}
/**
 * 
 * @export
 * @interface NotificationChannelList
 */
export interface NotificationChannelList {
    /**
     * 
     * @type {Array<NotificationChannel>}
     * @memberof NotificationChannelList
     */
    items?: Array<NotificationChannel>;
    /**
     * 
     * @type {number}
     * @memberof NotificationChannelList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface NotificationChannelTestStatus
 */
export interface NotificationChannelTestStatus {
    /**
     * 
     * @type {Date}
     * @memberof NotificationChannelTestStatus
     */
    lastTest?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationChannelTestStatus
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelTestStatus
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface NotificationChannelUpdateRequest
 */
export interface NotificationChannelUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationChannelUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {any}
     * @memberof NotificationChannelUpdateRequest
     */
    configuration?: any;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationChannelUpdateRequest
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @interface NotificationPreferences
 */
export interface NotificationPreferences {
    /**
     * 
     * @type {NotificationPreferencesEmail}
     * @memberof NotificationPreferences
     */
    email?: NotificationPreferencesEmail;
    /**
     * 
     * @type {NotificationPreferencesSms}
     * @memberof NotificationPreferences
     */
    sms?: NotificationPreferencesSms;
    /**
     * 
     * @type {NotificationPreferencesSms}
     * @memberof NotificationPreferences
     */
    line?: NotificationPreferencesSms;
    /**
     * 
     * @type {NotificationPreferencesQuietHours}
     * @memberof NotificationPreferences
     */
    quietHours?: NotificationPreferencesQuietHours;
}
/**
 * 
 * @export
 * @interface NotificationPreferencesEmail
 */
export interface NotificationPreferencesEmail {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationPreferencesEmail
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationPreferencesEmail
     */
    severityFilter?: Array<NotificationPreferencesEmail.SeverityFilterEnum>;
}

/**
 * @export
 * @namespace NotificationPreferencesEmail
 */
export namespace NotificationPreferencesEmail {
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityFilterEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface NotificationPreferencesQuietHours
 */
export interface NotificationPreferencesQuietHours {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationPreferencesQuietHours
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationPreferencesQuietHours
     */
    start?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationPreferencesQuietHours
     */
    end?: string;
}
/**
 * 
 * @export
 * @interface NotificationPreferencesSms
 */
export interface NotificationPreferencesSms {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationPreferencesSms
     */
    enabled?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationPreferencesSms
     */
    severityFilter?: Array<string>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 當前頁碼
     * @type {number}
     * @memberof Pagination
     */
    page?: number;
    /**
     * 每頁筆數
     * @type {number}
     * @memberof Pagination
     */
    pageSize?: number;
    /**
     * 總筆數
     * @type {number}
     * @memberof Pagination
     */
    total?: number;
    /**
     * 總頁數
     * @type {number}
     * @memberof Pagination
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface PlatformDiagnostics
 */
export interface PlatformDiagnostics {
    /**
     * 
     * @type {Array<PlatformDiagnosticsAutomationHealth>}
     * @memberof PlatformDiagnostics
     */
    automationHealth?: Array<PlatformDiagnosticsAutomationHealth>;
    /**
     * 
     * @type {Array<PlatformDiagnosticsNotificationHealth>}
     * @memberof PlatformDiagnostics
     */
    notificationHealth?: Array<PlatformDiagnosticsNotificationHealth>;
}
/**
 * 
 * @export
 * @interface PlatformDiagnosticsAutomationHealth
 */
export interface PlatformDiagnosticsAutomationHealth {
    /**
     * 
     * @type {string}
     * @memberof PlatformDiagnosticsAutomationHealth
     */
    scriptId?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformDiagnosticsAutomationHealth
     */
    scriptName?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformDiagnosticsAutomationHealth
     */
    totalRuns?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformDiagnosticsAutomationHealth
     */
    failureRate?: number;
}
/**
 * 
 * @export
 * @interface PlatformDiagnosticsNotificationHealth
 */
export interface PlatformDiagnosticsNotificationHealth {
    /**
     * 
     * @type {string}
     * @memberof PlatformDiagnosticsNotificationHealth
     */
    channelId?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformDiagnosticsNotificationHealth
     */
    channelName?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformDiagnosticsNotificationHealth
     */
    sentCount?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformDiagnosticsNotificationHealth
     */
    failureCount?: number;
}
/**
 * 
 * @export
 * @interface ProfileChangepasswordBody
 */
export interface ProfileChangepasswordBody {
    /**
     * 
     * @type {string}
     * @memberof ProfileChangepasswordBody
     */
    currentPassword: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileChangepasswordBody
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface ProfileUpdateRequest
 */
export interface ProfileUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateRequest
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateRequest
     */
    lineToken?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateRequest
     */
    department?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateRequest
     */
    avatarUrl?: string;
}
/**
 * 
 * @export
 * @interface ProfileVerifycontactBody
 */
export interface ProfileVerifycontactBody {
    /**
     * 
     * @type {string}
     * @memberof ProfileVerifycontactBody
     */
    method: ProfileVerifycontactBody.MethodEnum;
    /**
     * 聯絡方式的值（如 email 地址、手機號碼）
     * @type {string}
     * @memberof ProfileVerifycontactBody
     */
    value: string;
    /**
     * 驗證碼（如果是驗證步驟）
     * @type {string}
     * @memberof ProfileVerifycontactBody
     */
    verificationCode?: string;
}

/**
 * @export
 * @namespace ProfileVerifycontactBody
 */
export namespace ProfileVerifycontactBody {
    /**
     * @export
     * @enum {string}
     */
    export enum MethodEnum {
        Email = <any> 'email',
        Sms = <any> 'sms',
        Line = <any> 'line'
    }
}
/**
 * 
 * @export
 * @interface ReadinessStatus
 */
export interface ReadinessStatus {
    /**
     * 
     * @type {boolean}
     * @memberof ReadinessStatus
     */
    ready: boolean;
    /**
     * 
     * @type {ReadinessStatusChecks}
     * @memberof ReadinessStatus
     */
    checks: ReadinessStatusChecks;
}
/**
 * 
 * @export
 * @interface ReadinessStatusChecks
 */
export interface ReadinessStatusChecks {
    /**
     * 
     * @type {boolean}
     * @memberof ReadinessStatusChecks
     */
    database?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReadinessStatusChecks
     */
    redis?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReadinessStatusChecks
     */
    keycloak?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReadinessStatusChecks
     */
    sreAssistant?: boolean;
}
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    type: Resource.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    status: Resource.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    groupId?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    groupName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Resource
     */
    tags?: Array<string>;
    /**
     * 負責人
     * @type {string}
     * @memberof Resource
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    description?: string;
    /**
     * 
     * @type {MaintenanceWindow}
     * @memberof Resource
     */
    maintenanceWindow?: MaintenanceWindow;
    /**
     * 
     * @type {ResourceMetrics}
     * @memberof Resource
     */
    metrics?: ResourceMetrics;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Resource
     */
    metadata?: { [key: string]: any; };
    /**
     * 
     * @type {Date}
     * @memberof Resource
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Resource
     */
    updatedAt?: Date;
}

/**
 * @export
 * @namespace Resource
 */
export namespace Resource {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Server = <any> 'server',
        Network = <any> 'network',
        Database = <any> 'database',
        Application = <any> 'application',
        Container = <any> 'container'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Healthy = <any> 'healthy',
        Warning = <any> 'warning',
        Critical = <any> 'critical',
        Unknown = <any> 'unknown'
    }
}
/**
 * 
 * @export
 * @interface ResourceCreateRequest
 */
export interface ResourceCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    type: ResourceCreateRequest.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    ipAddress: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    groupId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceCreateRequest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof ResourceCreateRequest
     */
    metadata?: any;
}

/**
 * @export
 * @namespace ResourceCreateRequest
 */
export namespace ResourceCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Server = <any> 'server',
        Network = <any> 'network',
        Database = <any> 'database',
        Application = <any> 'application',
        Container = <any> 'container'
    }
}
/**
 * 
 * @export
 * @interface ResourceDistribution
 */
export interface ResourceDistribution {
    /**
     * 
     * @type {ResourceDistributionByStatus}
     * @memberof ResourceDistribution
     */
    byStatus?: ResourceDistributionByStatus;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof ResourceDistribution
     */
    byType?: { [key: string]: number; };
    /**
     * 
     * @type {Array<ResourceDistributionByGroup>}
     * @memberof ResourceDistribution
     */
    byGroup?: Array<ResourceDistributionByGroup>;
}
/**
 * 
 * @export
 * @interface ResourceDistributionByGroup
 */
export interface ResourceDistributionByGroup {
    /**
     * 
     * @type {string}
     * @memberof ResourceDistributionByGroup
     */
    groupId?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceDistributionByGroup
     */
    groupName?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByGroup
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByGroup
     */
    healthy?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByGroup
     */
    warning?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByGroup
     */
    critical?: number;
}
/**
 * 
 * @export
 * @interface ResourceDistributionByStatus
 */
export interface ResourceDistributionByStatus {
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByStatus
     */
    healthy?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByStatus
     */
    warning?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByStatus
     */
    critical?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceDistributionByStatus
     */
    unknown?: number;
}
/**
 * 
 * @export
 * @interface ResourceGroup
 */
export interface ResourceGroup {
    /**
     * 
     * @type {string}
     * @memberof ResourceGroup
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroup
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroup
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroup
     */
    parentGroupId?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourceGroup
     */
    resourceCount?: number;
    /**
     * 
     * @type {ResourceGroupStatusSummary}
     * @memberof ResourceGroup
     */
    statusSummary?: ResourceGroupStatusSummary;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceGroup
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof ResourceGroup
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResourceGroup
     */
    updatedAt?: Date;
}
/**
 * 
 * @export
 * @interface ResourceGroupCreateRequest
 */
export interface ResourceGroupCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupCreateRequest
     */
    parentGroupId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceGroupCreateRequest
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface ResourceGroupList
 */
export interface ResourceGroupList {
    /**
     * 
     * @type {Array<ResourceGroup>}
     * @memberof ResourceGroupList
     */
    items?: Array<ResourceGroup>;
    /**
     * 
     * @type {number}
     * @memberof ResourceGroupList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface ResourceGroupStatusSummary
 */
export interface ResourceGroupStatusSummary {
    /**
     * 
     * @type {number}
     * @memberof ResourceGroupStatusSummary
     */
    healthy?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceGroupStatusSummary
     */
    warning?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceGroupStatusSummary
     */
    critical?: number;
}
/**
 * 
 * @export
 * @interface ResourceGroupUpdateRequest
 */
export interface ResourceGroupUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceGroupUpdateRequest
     */
    parentGroupId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceGroupUpdateRequest
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface ResourceList
 */
export interface ResourceList {
    /**
     * 
     * @type {Array<Resource>}
     * @memberof ResourceList
     */
    items?: Array<Resource>;
    /**
     * 
     * @type {Pagination}
     * @memberof ResourceList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface ResourceMetrics
 */
export interface ResourceMetrics {
    /**
     * 
     * @type {number}
     * @memberof ResourceMetrics
     */
    cpuUsage?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceMetrics
     */
    memoryUsage?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceMetrics
     */
    diskUsage?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceMetrics
     */
    networkIo?: number;
}
/**
 * 
 * @export
 * @interface ResourceUpdateRequest
 */
export interface ResourceUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ResourceUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceUpdateRequest
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceUpdateRequest
     */
    groupId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResourceUpdateRequest
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ResourceUpdateRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {any}
     * @memberof ResourceUpdateRequest
     */
    metadata?: any;
}
/**
 * 
 * @export
 * @interface RoleDefinition
 */
export interface RoleDefinition {
    /**
     * 角色的唯一識別名稱 (e.g., super_admin)
     * @type {string}
     * @memberof RoleDefinition
     */
    name?: string;
    /**
     * 角色的顯示名稱 (e.g., 超級管理員)
     * @type {string}
     * @memberof RoleDefinition
     */
    displayName?: string;
    /**
     * 角色的權限描述
     * @type {string}
     * @memberof RoleDefinition
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ScanResult
 */
export interface ScanResult {
    /**
     * 
     * @type {string}
     * @memberof ScanResult
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScanResult
     */
    status?: ScanResult.StatusEnum;
    /**
     * 
     * @type {Array<ScanResultDiscoveredResources>}
     * @memberof ScanResult
     */
    discoveredResources?: Array<ScanResultDiscoveredResources>;
    /**
     * 
     * @type {Date}
     * @memberof ScanResult
     */
    scanTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof ScanResult
     */
    error?: string;
}

/**
 * @export
 * @namespace ScanResult
 */
export namespace ScanResult {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Completed = <any> 'completed',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface ScanResultDiscoveredResources
 */
export interface ScanResultDiscoveredResources {
    /**
     * 
     * @type {string}
     * @memberof ScanResultDiscoveredResources
     */
    ipAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof ScanResultDiscoveredResources
     */
    hostname?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ScanResultDiscoveredResources
     */
    openPorts?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ScanResultDiscoveredResources
     */
    osDetection?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScanResultDiscoveredResources
     */
    services?: Array<string>;
}
/**
 * 
 * @export
 * @interface ScanTaskResponse
 */
export interface ScanTaskResponse {
    /**
     * 
     * @type {string}
     * @memberof ScanTaskResponse
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScanTaskResponse
     */
    status?: ScanTaskResponse.StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ScanTaskResponse
     */
    message?: string;
}

/**
 * @export
 * @namespace ScanTaskResponse
 */
export namespace ScanTaskResponse {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Pending = <any> 'pending',
        Scanning = <any> 'scanning',
        Completed = <any> 'completed',
        Failed = <any> 'failed'
    }
}
/**
 * 
 * @export
 * @interface Schedule
 */
export interface Schedule {
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    scriptId?: string;
    /**
     * 
     * @type {string}
     * @memberof Schedule
     */
    cronExpression?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Schedule
     */
    enabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof Schedule
     */
    parameters?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof Schedule
     */
    targetResources?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Schedule
     */
    nextRun?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Schedule
     */
    createdAt?: Date;
}
/**
 * 
 * @export
 * @interface ScheduleCreateRequest
 */
export interface ScheduleCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    scriptId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleCreateRequest
     */
    cronExpression: string;
    /**
     * 
     * @type {any}
     * @memberof ScheduleCreateRequest
     */
    parameters?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScheduleCreateRequest
     */
    targetResources?: Array<string>;
}
/**
 * 
 * @export
 * @interface ScheduleList
 */
export interface ScheduleList {
    /**
     * 
     * @type {Array<Schedule>}
     * @memberof ScheduleList
     */
    items?: Array<Schedule>;
    /**
     * 
     * @type {number}
     * @memberof ScheduleList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface ScheduleUpdateRequest
 */
export interface ScheduleUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ScheduleUpdateRequest
     */
    cronExpression?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleUpdateRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ScheduleUpdateRequest
     */
    parameters?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScheduleUpdateRequest
     */
    targetResources?: Array<string>;
}
/**
 * 
 * @export
 * @interface Script
 */
export interface Script {
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    category: Script.CategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    language: Script.LanguageEnum;
    /**
     * 腳本內容
     * @type {string}
     * @memberof Script
     */
    content?: string;
    /**
     * 
     * @type {Array<ScriptParameters>}
     * @memberof Script
     */
    parameters?: Array<ScriptParameters>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Script
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof Script
     */
    createdBy?: string;
    /**
     * 
     * @type {Date}
     * @memberof Script
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Script
     */
    updatedAt?: Date;
}

/**
 * @export
 * @namespace Script
 */
export namespace Script {
    /**
     * @export
     * @enum {string}
     */
    export enum CategoryEnum {
        Diagnostic = <any> 'diagnostic',
        Remediation = <any> 'remediation',
        Maintenance = <any> 'maintenance',
        Custom = <any> 'custom'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LanguageEnum {
        Python = <any> 'python',
        Bash = <any> 'bash',
        Powershell = <any> 'powershell',
        Javascript = <any> 'javascript'
    }
}
/**
 * 
 * @export
 * @interface ScriptCreateRequest
 */
export interface ScriptCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ScriptCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptCreateRequest
     */
    category: ScriptCreateRequest.CategoryEnum;
    /**
     * 
     * @type {string}
     * @memberof ScriptCreateRequest
     */
    language: ScriptCreateRequest.LanguageEnum;
    /**
     * 
     * @type {string}
     * @memberof ScriptCreateRequest
     */
    content: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof ScriptCreateRequest
     */
    parameters?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScriptCreateRequest
     */
    tags?: Array<string>;
}

/**
 * @export
 * @namespace ScriptCreateRequest
 */
export namespace ScriptCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum CategoryEnum {
        Diagnostic = <any> 'diagnostic',
        Remediation = <any> 'remediation',
        Maintenance = <any> 'maintenance',
        Custom = <any> 'custom'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LanguageEnum {
        Python = <any> 'python',
        Bash = <any> 'bash',
        Powershell = <any> 'powershell',
        Javascript = <any> 'javascript'
    }
}
/**
 * 
 * @export
 * @interface ScriptExecuteRequest
 */
export interface ScriptExecuteRequest {
    /**
     * 
     * @type {string}
     * @memberof ScriptExecuteRequest
     */
    scriptId: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ScriptExecuteRequest
     */
    parameters?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ScriptExecuteRequest
     */
    targetResources?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ScriptExecuteRequest
     */
    dryRun?: boolean;
}
/**
 * 
 * @export
 * @interface ScriptList
 */
export interface ScriptList {
    /**
     * 
     * @type {Array<Script>}
     * @memberof ScriptList
     */
    items?: Array<Script>;
    /**
     * 
     * @type {number}
     * @memberof ScriptList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface ScriptParameters
 */
export interface ScriptParameters {
    /**
     * 
     * @type {string}
     * @memberof ScriptParameters
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptParameters
     */
    type?: ScriptParameters.TypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ScriptParameters
     */
    required?: boolean;
    /**
     * 參數的預設值（可以是任何類型）
     * @type {string | number | boolean | Array<any> | any}
     * @memberof ScriptParameters
     */
    _default?: string | number | boolean | Array<any> | any;
    /**
     * 
     * @type {string}
     * @memberof ScriptParameters
     */
    description?: string;
}

/**
 * @export
 * @namespace ScriptParameters
 */
export namespace ScriptParameters {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        String = <any> 'string',
        Number = <any> 'number',
        Boolean = <any> 'boolean',
        Array = <any> 'array',
        Object = <any> 'object'
    }
}
/**
 * 
 * @export
 * @interface ScriptRunRequest
 */
export interface ScriptRunRequest {
    /**
     * 傳遞給腳本的參數
     * @type {{ [key: string]: any; }}
     * @memberof ScriptRunRequest
     */
    parameters?: { [key: string]: any; };
    /**
     * 執行腳本的目標資源 ID 列表
     * @type {Array<string>}
     * @memberof ScriptRunRequest
     */
    targetResourceIds?: Array<string>;
    /**
     * 手動執行的原因，用於審計
     * @type {string}
     * @memberof ScriptRunRequest
     */
    reason?: string;
}
/**
 * 
 * @export
 * @interface ScriptUpdateRequest
 */
export interface ScriptUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ScriptUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ScriptUpdateRequest
     */
    content?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof ScriptUpdateRequest
     */
    parameters?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScriptUpdateRequest
     */
    tags?: Array<string>;
}
/**
 * 
 * @export
 * @interface SearchResultItem
 */
export interface SearchResultItem {
    /**
     * 搜尋結果的實體類型
     * @type {string}
     * @memberof SearchResultItem
     */
    type?: SearchResultItem.TypeEnum;
    /**
     * 相關性分數
     * @type {number}
     * @memberof SearchResultItem
     */
    score?: number;
    /**
     * 
     * @type {Resource | Team | User | AlertRule | Script}
     * @memberof SearchResultItem
     */
    item?: Resource | Team | User | AlertRule | Script;
}

/**
 * @export
 * @namespace SearchResultItem
 */
export namespace SearchResultItem {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Resource = <any> 'resource',
        Team = <any> 'team',
        User = <any> 'user',
        AlertRule = <any> 'alert_rule',
        AutomationScript = <any> 'automation_script'
    }
}
/**
 * 
 * @export
 * @interface SystemSettings
 */
export interface SystemSettings {
    /**
     * 
     * @type {SystemSettingsGeneral}
     * @memberof SystemSettings
     */
    general?: SystemSettingsGeneral;
    /**
     * 
     * @type {SystemSettingsIntegration}
     * @memberof SystemSettings
     */
    integration?: SystemSettingsIntegration;
    /**
     * 
     * @type {SystemSettingsNotification}
     * @memberof SystemSettings
     */
    notification?: SystemSettingsNotification;
    /**
     * 
     * @type {SystemSettingsMaintenance}
     * @memberof SystemSettings
     */
    maintenance?: SystemSettingsMaintenance;
}
/**
 * 
 * @export
 * @interface SystemSettingsGeneral
 */
export interface SystemSettingsGeneral {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsGeneral
     */
    siteName?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsGeneral
     */
    siteUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsGeneral
     */
    timeZone?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsGeneral
     */
    language?: SystemSettingsGeneral.LanguageEnum;
}

/**
 * @export
 * @namespace SystemSettingsGeneral
 */
export namespace SystemSettingsGeneral {
    /**
     * @export
     * @enum {string}
     */
    export enum LanguageEnum {
        ZhTW = <any> 'zh-TW',
        ZhCN = <any> 'zh-CN',
        EnUS = <any> 'en-US'
    }
}
/**
 * 
 * @export
 * @interface SystemSettingsIntegration
 */
export interface SystemSettingsIntegration {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsIntegration
     */
    grafanaUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsIntegration
     */
    prometheusUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsIntegration
     */
    lokiUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsIntegration
     */
    keycloakUrl?: string;
}
/**
 * 
 * @export
 * @interface SystemSettingsMaintenance
 */
export interface SystemSettingsMaintenance {
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsMaintenance
     */
    autoAcknowledge?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SystemSettingsMaintenance
     */
    autoResolve?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsMaintenance
     */
    defaultAssignee?: string;
}
/**
 * 
 * @export
 * @interface SystemSettingsNotification
 */
export interface SystemSettingsNotification {
    /**
     * 
     * @type {string}
     * @memberof SystemSettingsNotification
     */
    defaultChannel?: string;
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsNotification
     */
    retryCount?: number;
    /**
     * 
     * @type {number}
     * @memberof SystemSettingsNotification
     */
    retryDelay?: number;
}
/**
 * 
 * @export
 * @interface Team
 */
export interface Team {
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    managerId?: string;
    /**
     * 
     * @type {string}
     * @memberof Team
     */
    managerName?: string;
    /**
     * 
     * @type {number}
     * @memberof Team
     */
    memberCount?: number;
    /**
     * 
     * @type {Array<TeamMembers>}
     * @memberof Team
     */
    members?: Array<TeamMembers>;
    /**
     * 
     * @type {TeamNotificationSettings}
     * @memberof Team
     */
    notificationSettings?: TeamNotificationSettings;
    /**
     * 
     * @type {Date}
     * @memberof Team
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Team
     */
    updatedAt?: Date;
}
/**
 * 
 * @export
 * @interface TeamCreateRequest
 */
export interface TeamCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamCreateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeamCreateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamCreateRequest
     */
    managerId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamCreateRequest
     */
    memberIds?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof TeamCreateRequest
     */
    notificationSettings?: any;
}
/**
 * 
 * @export
 * @interface TeamIdMembersBody
 */
export interface TeamIdMembersBody {
    /**
     * 
     * @type {string}
     * @memberof TeamIdMembersBody
     */
    operation: TeamIdMembersBody.OperationEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamIdMembersBody
     */
    userIds: Array<string>;
}

/**
 * @export
 * @namespace TeamIdMembersBody
 */
export namespace TeamIdMembersBody {
    /**
     * @export
     * @enum {string}
     */
    export enum OperationEnum {
        Add = <any> 'add',
        Remove = <any> 'remove'
    }
}
/**
 * 
 * @export
 * @interface TeamList
 */
export interface TeamList {
    /**
     * 
     * @type {Array<Team>}
     * @memberof TeamList
     */
    items?: Array<Team>;
    /**
     * 
     * @type {number}
     * @memberof TeamList
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface TeamMembers
 */
export interface TeamMembers {
    /**
     * 
     * @type {string}
     * @memberof TeamMembers
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamMembers
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamMembers
     */
    role?: string;
}
/**
 * 
 * @export
 * @interface TeamNotificationSettings
 */
export interface TeamNotificationSettings {
    /**
     * 
     * @type {string}
     * @memberof TeamNotificationSettings
     */
    primaryContact?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamNotificationSettings
     */
    escalationContact?: string;
    /**
     * 接收此團隊相關通知的訂閱者列表
     * @type {Array<TeamNotificationSettingsSubscribers>}
     * @memberof TeamNotificationSettings
     */
    subscribers?: Array<TeamNotificationSettingsSubscribers>;
}
/**
 * 
 * @export
 * @interface TeamNotificationSettingsSubscribers
 */
export interface TeamNotificationSettingsSubscribers {
    /**
     * 
     * @type {string}
     * @memberof TeamNotificationSettingsSubscribers
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamNotificationSettingsSubscribers
     */
    userName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TeamNotificationSettingsSubscribers
     */
    notifyOnSeverities?: Array<TeamNotificationSettingsSubscribers.NotifyOnSeveritiesEnum>;
}

/**
 * @export
 * @namespace TeamNotificationSettingsSubscribers
 */
export namespace TeamNotificationSettingsSubscribers {
    /**
     * @export
     * @enum {string}
     */
    export enum NotifyOnSeveritiesEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
}
/**
 * 
 * @export
 * @interface TeamUpdateRequest
 */
export interface TeamUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateRequest
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamUpdateRequest
     */
    managerId?: string;
    /**
     * 
     * @type {any}
     * @memberof TeamUpdateRequest
     */
    notificationSettings?: any;
}
/**
 * 
 * @export
 * @interface TrendData
 */
export interface TrendData {
    /**
     * 
     * @type {string}
     * @memberof TrendData
     */
    period?: string;
    /**
     * 
     * @type {Array<TrendDataDataPoints>}
     * @memberof TrendData
     */
    dataPoints?: Array<TrendDataDataPoints>;
}
/**
 * 
 * @export
 * @interface TrendDataDataPoints
 */
export interface TrendDataDataPoints {
    /**
     * 
     * @type {Date}
     * @memberof TrendDataDataPoints
     */
    timestamp?: Date;
    /**
     * 
     * @type {number}
     * @memberof TrendDataDataPoints
     */
    alerts?: number;
    /**
     * 
     * @type {number}
     * @memberof TrendDataDataPoints
     */
    incidents?: number;
    /**
     * 
     * @type {number}
     * @memberof TrendDataDataPoints
     */
    resourcesHealthy?: number;
    /**
     * 
     * @type {number}
     * @memberof TrendDataDataPoints
     */
    resourcesUnhealthy?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    role: User.RoleEnum;
    /**
     * 
     * @type {Array<UserTeams>}
     * @memberof User
     */
    teams?: Array<UserTeams>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    department?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    avatarUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    lastLogin?: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    status?: User.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    updatedAt?: Date;
}

/**
 * @export
 * @namespace User
 */
export namespace User {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        SuperAdmin = <any> 'super_admin',
        TeamManager = <any> 'team_manager',
        TeamMember = <any> 'team_member'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Inactive = <any> 'inactive',
        Suspended = <any> 'suspended'
    }
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    role: UserCreateRequest.RoleEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserCreateRequest
     */
    teamIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    department?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    phone?: string;
}

/**
 * @export
 * @namespace UserCreateRequest
 */
export namespace UserCreateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        SuperAdmin = <any> 'super_admin',
        TeamManager = <any> 'team_manager',
        TeamMember = <any> 'team_member'
    }
}
/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * 
     * @type {Array<User>}
     * @memberof UserList
     */
    items?: Array<User>;
    /**
     * 
     * @type {Pagination}
     * @memberof UserList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface UserNotification
 */
export interface UserNotification {
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    type?: UserNotification.TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    severity?: UserNotification.SeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof UserNotification
     */
    status?: UserNotification.StatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof UserNotification
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserNotification
     */
    readAt?: Date;
    /**
     * 相關資源的連結 URL
     * @type {string}
     * @memberof UserNotification
     */
    link?: string;
}

/**
 * @export
 * @namespace UserNotification
 */
export namespace UserNotification {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Alert = <any> 'alert',
        Incident = <any> 'incident',
        System = <any> 'system',
        Announcement = <any> 'announcement'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SeverityEnum {
        Critical = <any> 'critical',
        Error = <any> 'error',
        Warning = <any> 'warning',
        Info = <any> 'info'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Read = <any> 'read',
        Unread = <any> 'unread'
    }
}
/**
 * 
 * @export
 * @interface UserNotificationList
 */
export interface UserNotificationList {
    /**
     * 
     * @type {Array<UserNotification>}
     * @memberof UserNotificationList
     */
    items?: Array<UserNotification>;
    /**
     * 
     * @type {Pagination}
     * @memberof UserNotificationList
     */
    pagination?: Pagination;
}
/**
 * 
 * @export
 * @interface UserNotificationSummary
 */
export interface UserNotificationSummary {
    /**
     * 
     * @type {number}
     * @memberof UserNotificationSummary
     */
    unreadCount?: number;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    emailVerified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    phone?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    phoneVerified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    lineToken?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    lineVerified?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    avatarUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    department?: string;
    /**
     * 
     * @type {Array<UserTeams>}
     * @memberof UserProfile
     */
    teams?: Array<UserTeams>;
    /**
     * 
     * @type {NotificationPreferences}
     * @memberof UserProfile
     */
    notificationPreferences?: NotificationPreferences;
}
/**
 * 
 * @export
 * @interface UserTeams
 */
export interface UserTeams {
    /**
     * 
     * @type {string}
     * @memberof UserTeams
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeams
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface UserUpdateRequest
 */
export interface UserUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    role?: UserUpdateRequest.RoleEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserUpdateRequest
     */
    teamIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    department?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdateRequest
     */
    status?: UserUpdateRequest.StatusEnum;
}

/**
 * @export
 * @namespace UserUpdateRequest
 */
export namespace UserUpdateRequest {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        SuperAdmin = <any> 'super_admin',
        TeamManager = <any> 'team_manager',
        TeamMember = <any> 'team_member'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Active = <any> 'active',
        Inactive = <any> 'inactive',
        Suspended = <any> 'suspended'
    }
}
/**
 * AdminApi - fetch parameter creator
 * @export
 */
export const AdminApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 獲取平台關鍵健康指標，如自動化腳本和通知管道的失敗率。
         * @summary 獲取平台自身狀態診斷
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlatformDiagnostics(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/admin/diagnostics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 獲取平台關鍵健康指標，如自動化腳本和通知管道的失敗率。
         * @summary 獲取平台自身狀態診斷
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlatformDiagnostics(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PlatformDiagnostics> {
            const localVarFetchArgs = AdminApiFetchParamCreator(configuration).getPlatformDiagnostics(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 獲取平台關鍵健康指標，如自動化腳本和通知管道的失敗率。
         * @summary 獲取平台自身狀態診斷
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlatformDiagnostics(options?: any) {
            return AdminApiFp(configuration).getPlatformDiagnostics(options)(fetch, basePath);
        },
    };
};

/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * 獲取平台關鍵健康指標，如自動化腳本和通知管道的失敗率。
     * @summary 獲取平台自身狀態診斷
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getPlatformDiagnostics(options?: any): Promise<PlatformDiagnostics>;

}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * 獲取平台關鍵健康指標，如自動化腳本和通知管道的失敗率。
     * @summary 獲取平台自身狀態診斷
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getPlatformDiagnostics(options?: any) {
        return AdminApiFp(this.configuration).getPlatformDiagnostics(options)(this.fetch, this.basePath);
    }

}
/**
 * AlertRulesApi - fetch parameter creator
 * @export
 */
export const AlertRulesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建新的告警規則
         * @summary 創建告警規則
         * @param {AlertRuleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertRule(body: AlertRuleCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AlertRuleCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除告警規則。 **建議**: 為了提高平台的容錯能力和操作安全性，建議實作軟刪除 (Soft Delete) 機制。此操作可將規則標記為 `archived` 而非物理刪除，並提供相應的 API (如 `GET /alert-rules?status=archived` 和 `POST /alert-rules/{ruleId}/restore`) 來查看和恢復被誤刪的規則。 
         * @summary 刪除告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertRule(ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling deleteAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 停用告警規則
         * @summary 停用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableAlertRule(ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling disableAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}/disable`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 啟用告警規則
         * @summary 啟用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAlertRule(ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling enableAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}/enable`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定告警規則的詳情
         * @summary 獲取規則詳情
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertRule(ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling getAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有告警規則
         * @summary 獲取告警規則列表
         * @param {boolean} [enabled] 是否啟用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertRules(enabled?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/alert-rules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 測試告警規則是否正常運作
         * @summary 測試告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAlertRule(ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling testAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}/test`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新告警規則
         * @summary 更新告警規則
         * @param {AlertRuleUpdateRequest} body 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlertRule(body: AlertRuleUpdateRequest, ruleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAlertRule.');
            }
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling updateAlertRule.');
            }
            const localVarPath = `/api/v1/alert-rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AlertRuleUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertRulesApi - functional programming interface
 * @export
 */
export const AlertRulesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建新的告警規則
         * @summary 創建告警規則
         * @param {AlertRuleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertRule(body: AlertRuleCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRule> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).createAlertRule(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除告警規則。 **建議**: 為了提高平台的容錯能力和操作安全性，建議實作軟刪除 (Soft Delete) 機制。此操作可將規則標記為 `archived` 而非物理刪除，並提供相應的 API (如 `GET /alert-rules?status=archived` 和 `POST /alert-rules/{ruleId}/restore`) 來查看和恢復被誤刪的規則。 
         * @summary 刪除告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertRule(ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).deleteAlertRule(ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 停用告警規則
         * @summary 停用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableAlertRule(ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).disableAlertRule(ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 啟用告警規則
         * @summary 啟用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAlertRule(ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).enableAlertRule(ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定告警規則的詳情
         * @summary 獲取規則詳情
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertRule(ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRule> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).getAlertRule(ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有告警規則
         * @summary 獲取告警規則列表
         * @param {boolean} [enabled] 是否啟用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertRules(enabled?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRuleList> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).listAlertRules(enabled, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 測試告警規則是否正常運作
         * @summary 測試告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAlertRule(ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).testAlertRule(ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新告警規則
         * @summary 更新告警規則
         * @param {AlertRuleUpdateRequest} body 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlertRule(body: AlertRuleUpdateRequest, ruleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AlertRule> {
            const localVarFetchArgs = AlertRulesApiFetchParamCreator(configuration).updateAlertRule(body, ruleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AlertRulesApi - factory interface
 * @export
 */
export const AlertRulesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建新的告警規則
         * @summary 創建告警規則
         * @param {AlertRuleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAlertRule(body: AlertRuleCreateRequest, options?: any) {
            return AlertRulesApiFp(configuration).createAlertRule(body, options)(fetch, basePath);
        },
        /**
         * 刪除告警規則。 **建議**: 為了提高平台的容錯能力和操作安全性，建議實作軟刪除 (Soft Delete) 機制。此操作可將規則標記為 `archived` 而非物理刪除，並提供相應的 API (如 `GET /alert-rules?status=archived` 和 `POST /alert-rules/{ruleId}/restore`) 來查看和恢復被誤刪的規則。 
         * @summary 刪除告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAlertRule(ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).deleteAlertRule(ruleId, options)(fetch, basePath);
        },
        /**
         * 停用告警規則
         * @summary 停用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableAlertRule(ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).disableAlertRule(ruleId, options)(fetch, basePath);
        },
        /**
         * 啟用告警規則
         * @summary 啟用規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAlertRule(ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).enableAlertRule(ruleId, options)(fetch, basePath);
        },
        /**
         * 獲取特定告警規則的詳情
         * @summary 獲取規則詳情
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlertRule(ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).getAlertRule(ruleId, options)(fetch, basePath);
        },
        /**
         * 獲取所有告警規則
         * @summary 獲取告警規則列表
         * @param {boolean} [enabled] 是否啟用
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlertRules(enabled?: boolean, options?: any) {
            return AlertRulesApiFp(configuration).listAlertRules(enabled, options)(fetch, basePath);
        },
        /**
         * 測試告警規則是否正常運作
         * @summary 測試告警規則
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testAlertRule(ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).testAlertRule(ruleId, options)(fetch, basePath);
        },
        /**
         * 更新告警規則
         * @summary 更新告警規則
         * @param {AlertRuleUpdateRequest} body 
         * @param {string} ruleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAlertRule(body: AlertRuleUpdateRequest, ruleId: string, options?: any) {
            return AlertRulesApiFp(configuration).updateAlertRule(body, ruleId, options)(fetch, basePath);
        },
    };
};

/**
 * AlertRulesApi - interface
 * @export
 * @interface AlertRulesApi
 */
export interface AlertRulesApiInterface {
    /**
     * 創建新的告警規則
     * @summary 創建告警規則
     * @param {AlertRuleCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    createAlertRule(body: AlertRuleCreateRequest, options?: any): Promise<AlertRule>;

    /**
     * 刪除告警規則。 **建議**: 為了提高平台的容錯能力和操作安全性，建議實作軟刪除 (Soft Delete) 機制。此操作可將規則標記為 `archived` 而非物理刪除，並提供相應的 API (如 `GET /alert-rules?status=archived` 和 `POST /alert-rules/{ruleId}/restore`) 來查看和恢復被誤刪的規則。 
     * @summary 刪除告警規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    deleteAlertRule(ruleId: string, options?: any): Promise<{}>;

    /**
     * 停用告警規則
     * @summary 停用規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    disableAlertRule(ruleId: string, options?: any): Promise<{}>;

    /**
     * 啟用告警規則
     * @summary 啟用規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    enableAlertRule(ruleId: string, options?: any): Promise<{}>;

    /**
     * 獲取特定告警規則的詳情
     * @summary 獲取規則詳情
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    getAlertRule(ruleId: string, options?: any): Promise<AlertRule>;

    /**
     * 獲取所有告警規則
     * @summary 獲取告警規則列表
     * @param {boolean} [enabled] 是否啟用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    listAlertRules(enabled?: boolean, options?: any): Promise<AlertRuleList>;

    /**
     * 測試告警規則是否正常運作
     * @summary 測試告警規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    testAlertRule(ruleId: string, options?: any): Promise<InlineResponse200>;

    /**
     * 更新告警規則
     * @summary 更新告警規則
     * @param {AlertRuleUpdateRequest} body 
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApiInterface
     */
    updateAlertRule(body: AlertRuleUpdateRequest, ruleId: string, options?: any): Promise<AlertRule>;

}

/**
 * AlertRulesApi - object-oriented interface
 * @export
 * @class AlertRulesApi
 * @extends {BaseAPI}
 */
export class AlertRulesApi extends BaseAPI implements AlertRulesApiInterface {
    /**
     * 創建新的告警規則
     * @summary 創建告警規則
     * @param {AlertRuleCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public createAlertRule(body: AlertRuleCreateRequest, options?: any) {
        return AlertRulesApiFp(this.configuration).createAlertRule(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除告警規則。 **建議**: 為了提高平台的容錯能力和操作安全性，建議實作軟刪除 (Soft Delete) 機制。此操作可將規則標記為 `archived` 而非物理刪除，並提供相應的 API (如 `GET /alert-rules?status=archived` 和 `POST /alert-rules/{ruleId}/restore`) 來查看和恢復被誤刪的規則。 
     * @summary 刪除告警規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public deleteAlertRule(ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).deleteAlertRule(ruleId, options)(this.fetch, this.basePath);
    }

    /**
     * 停用告警規則
     * @summary 停用規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public disableAlertRule(ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).disableAlertRule(ruleId, options)(this.fetch, this.basePath);
    }

    /**
     * 啟用告警規則
     * @summary 啟用規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public enableAlertRule(ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).enableAlertRule(ruleId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定告警規則的詳情
     * @summary 獲取規則詳情
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public getAlertRule(ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).getAlertRule(ruleId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有告警規則
     * @summary 獲取告警規則列表
     * @param {boolean} [enabled] 是否啟用
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public listAlertRules(enabled?: boolean, options?: any) {
        return AlertRulesApiFp(this.configuration).listAlertRules(enabled, options)(this.fetch, this.basePath);
    }

    /**
     * 測試告警規則是否正常運作
     * @summary 測試告警規則
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public testAlertRule(ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).testAlertRule(ruleId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新告警規則
     * @summary 更新告警規則
     * @param {AlertRuleUpdateRequest} body 
     * @param {string} ruleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertRulesApi
     */
    public updateAlertRule(body: AlertRuleUpdateRequest, ruleId: string, options?: any) {
        return AlertRulesApiFp(this.configuration).updateAlertRule(body, ruleId, options)(this.fetch, this.basePath);
    }

}
/**
 * AuditApi - fetch parameter creator
 * @export
 */
export const AuditApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 查詢系統審計日誌
         * @summary 查詢審計日誌
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [userId] 
         * @param {string} [action] 
         * @param {string} [resourceType] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAuditLogs(page?: number, pageSize?: number, userId?: string, action?: string, resourceType?: string, startTime?: Date, endTime?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/audit-logs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (resourceType !== undefined) {
                localVarQueryParameter['resource_type'] = resourceType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any).toISOString();
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditApi - functional programming interface
 * @export
 */
export const AuditApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 查詢系統審計日誌
         * @summary 查詢審計日誌
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [userId] 
         * @param {string} [action] 
         * @param {string} [resourceType] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAuditLogs(page?: number, pageSize?: number, userId?: string, action?: string, resourceType?: string, startTime?: Date, endTime?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AuditLogList> {
            const localVarFetchArgs = AuditApiFetchParamCreator(configuration).queryAuditLogs(page, pageSize, userId, action, resourceType, startTime, endTime, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuditApi - factory interface
 * @export
 */
export const AuditApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 查詢系統審計日誌
         * @summary 查詢審計日誌
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [userId] 
         * @param {string} [action] 
         * @param {string} [resourceType] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryAuditLogs(page?: number, pageSize?: number, userId?: string, action?: string, resourceType?: string, startTime?: Date, endTime?: Date, options?: any) {
            return AuditApiFp(configuration).queryAuditLogs(page, pageSize, userId, action, resourceType, startTime, endTime, options)(fetch, basePath);
        },
    };
};

/**
 * AuditApi - interface
 * @export
 * @interface AuditApi
 */
export interface AuditApiInterface {
    /**
     * 查詢系統審計日誌
     * @summary 查詢審計日誌
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [userId] 
     * @param {string} [action] 
     * @param {string} [resourceType] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApiInterface
     */
    queryAuditLogs(page?: number, pageSize?: number, userId?: string, action?: string, resourceType?: string, startTime?: Date, endTime?: Date, options?: any): Promise<AuditLogList>;

}

/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export class AuditApi extends BaseAPI implements AuditApiInterface {
    /**
     * 查詢系統審計日誌
     * @summary 查詢審計日誌
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [userId] 
     * @param {string} [action] 
     * @param {string} [resourceType] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public queryAuditLogs(page?: number, pageSize?: number, userId?: string, action?: string, resourceType?: string, startTime?: Date, endTime?: Date, options?: any) {
        return AuditApiFp(this.configuration).queryAuditLogs(page, pageSize, userId, action, resourceType, startTime, endTime, options)(this.fetch, this.basePath);
    }

}
/**
 * AutocompleteApi - fetch parameter creator
 * @export
 */
export const AutocompleteApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根據實體類型和關鍵字提供輕量級的搜尋建議，用於 UI 的自動完成功能。
         * @summary 獲取自動完成建議
         * @param {string} type 要搜尋的實體類型
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutocompleteSuggestions(type: string, q: string, options: any = {}): FetchArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getAutocompleteSuggestions.');
            }
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling getAutocompleteSuggestions.');
            }
            const localVarPath = `/api/v1/autocomplete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutocompleteApi - functional programming interface
 * @export
 */
export const AutocompleteApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 根據實體類型和關鍵字提供輕量級的搜尋建議，用於 UI 的自動完成功能。
         * @summary 獲取自動完成建議
         * @param {string} type 要搜尋的實體類型
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutocompleteSuggestions(type: string, q: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AutocompleteResult>> {
            const localVarFetchArgs = AutocompleteApiFetchParamCreator(configuration).getAutocompleteSuggestions(type, q, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AutocompleteApi - factory interface
 * @export
 */
export const AutocompleteApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 根據實體類型和關鍵字提供輕量級的搜尋建議，用於 UI 的自動完成功能。
         * @summary 獲取自動完成建議
         * @param {string} type 要搜尋的實體類型
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAutocompleteSuggestions(type: string, q: string, options?: any) {
            return AutocompleteApiFp(configuration).getAutocompleteSuggestions(type, q, options)(fetch, basePath);
        },
    };
};

/**
 * AutocompleteApi - interface
 * @export
 * @interface AutocompleteApi
 */
export interface AutocompleteApiInterface {
    /**
     * 根據實體類型和關鍵字提供輕量級的搜尋建議，用於 UI 的自動完成功能。
     * @summary 獲取自動完成建議
     * @param {string} type 要搜尋的實體類型
     * @param {string} q 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApiInterface
     */
    getAutocompleteSuggestions(type: string, q: string, options?: any): Promise<Array<AutocompleteResult>>;

}

/**
 * AutocompleteApi - object-oriented interface
 * @export
 * @class AutocompleteApi
 * @extends {BaseAPI}
 */
export class AutocompleteApi extends BaseAPI implements AutocompleteApiInterface {
    /**
     * 根據實體類型和關鍵字提供輕量級的搜尋建議，用於 UI 的自動完成功能。
     * @summary 獲取自動完成建議
     * @param {string} type 要搜尋的實體類型
     * @param {string} q 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutocompleteApi
     */
    public getAutocompleteSuggestions(type: string, q: string, options?: any) {
        return AutocompleteApiFp(this.configuration).getAutocompleteSuggestions(type, q, options)(this.fetch, this.basePath);
    }

}
/**
 * AutomationApi - fetch parameter creator
 * @export
 */
export const AutomationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建腳本執行排程
         * @summary 創建排程
         * @param {ScheduleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(body: ScheduleCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSchedule.');
            }
            const localVarPath = `/api/v1/automation/schedules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScheduleCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 創建新的自動化腳本
         * @summary 創建腳本
         * @param {ScriptCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: ScriptCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createScript.');
            }
            const localVarPath = `/api/v1/automation/scripts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScriptCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除指定的排程
         * @summary 刪除排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(scheduleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'scheduleId' is not null or undefined
            if (scheduleId === null || scheduleId === undefined) {
                throw new RequiredError('scheduleId','Required parameter scheduleId was null or undefined when calling deleteSchedule.');
            }
            const localVarPath = `/api/v1/automation/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除自動化腳本。 **建議**: 同告警規則，為了提高平台的容錯能力和操作安全性，建議對關鍵腳本實作軟刪除 (Soft Delete) 機制。 
         * @summary 刪除腳本
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScript(scriptId: string, options: any = {}): FetchArgs {
            // verify required parameter 'scriptId' is not null or undefined
            if (scriptId === null || scriptId === undefined) {
                throw new RequiredError('scriptId','Required parameter scriptId was null or undefined when calling deleteScript.');
            }
            const localVarPath = `/api/v1/automation/scripts/{scriptId}`
                .replace(`{${"scriptId"}}`, encodeURIComponent(String(scriptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 執行自動化腳本
         * @summary 執行腳本
         * @param {ScriptExecuteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeScript(body: ScriptExecuteRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling executeScript.');
            }
            const localVarPath = `/api/v1/automation/execute`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScriptExecuteRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取執行任務的詳情
         * @summary 執行詳情
         * @param {string} executionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(executionId: string, options: any = {}): FetchArgs {
            // verify required parameter 'executionId' is not null or undefined
            if (executionId === null || executionId === undefined) {
                throw new RequiredError('executionId','Required parameter executionId was null or undefined when calling getExecution.');
            }
            const localVarPath = `/api/v1/automation/executions/{executionId}`
                .replace(`{${"executionId"}}`, encodeURIComponent(String(executionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取指定排程的詳細資訊
         * @summary 獲取單一排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(scheduleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'scheduleId' is not null or undefined
            if (scheduleId === null || scheduleId === undefined) {
                throw new RequiredError('scheduleId','Required parameter scheduleId was null or undefined when calling getSchedule.');
            }
            const localVarPath = `/api/v1/automation/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定腳本的詳情
         * @summary 獲取腳本詳情
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScript(scriptId: string, options: any = {}): FetchArgs {
            // verify required parameter 'scriptId' is not null or undefined
            if (scriptId === null || scriptId === undefined) {
                throw new RequiredError('scriptId','Required parameter scriptId was null or undefined when calling getScript.');
            }
            const localVarPath = `/api/v1/automation/scripts/{scriptId}`
                .replace(`{${"scriptId"}}`, encodeURIComponent(String(scriptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查詢腳本執行歷史
         * @summary 執行歷史
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [scriptId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions(page?: number, pageSize?: number, scriptId?: string, status?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/automation/executions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (scriptId !== undefined) {
                localVarQueryParameter['script_id'] = scriptId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有自動化腳本的執行排程
         * @summary 獲取排程列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSchedules(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/automation/schedules`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有自動化腳本
         * @summary 獲取腳本列表
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScripts(category?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/automation/scripts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 手動觸發特定腳本的執行，主要用於測試或手動干預。
         * @summary 手動執行腳本
         * @param {ScriptRunRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runScript(body: ScriptRunRequest, scriptId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling runScript.');
            }
            // verify required parameter 'scriptId' is not null or undefined
            if (scriptId === null || scriptId === undefined) {
                throw new RequiredError('scriptId','Required parameter scriptId was null or undefined when calling runScript.');
            }
            const localVarPath = `/api/v1/automation/scripts/{scriptId}/run`
                .replace(`{${"scriptId"}}`, encodeURIComponent(String(scriptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScriptRunRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新指定的排程
         * @summary 更新排程
         * @param {ScheduleUpdateRequest} body 
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(body: ScheduleUpdateRequest, scheduleId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSchedule.');
            }
            // verify required parameter 'scheduleId' is not null or undefined
            if (scheduleId === null || scheduleId === undefined) {
                throw new RequiredError('scheduleId','Required parameter scheduleId was null or undefined when calling updateSchedule.');
            }
            const localVarPath = `/api/v1/automation/schedules/{scheduleId}`
                .replace(`{${"scheduleId"}}`, encodeURIComponent(String(scheduleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScheduleUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新自動化腳本
         * @summary 更新腳本
         * @param {ScriptUpdateRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScript(body: ScriptUpdateRequest, scriptId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateScript.');
            }
            // verify required parameter 'scriptId' is not null or undefined
            if (scriptId === null || scriptId === undefined) {
                throw new RequiredError('scriptId','Required parameter scriptId was null or undefined when calling updateScript.');
            }
            const localVarPath = `/api/v1/automation/scripts/{scriptId}`
                .replace(`{${"scriptId"}}`, encodeURIComponent(String(scriptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ScriptUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutomationApi - functional programming interface
 * @export
 */
export const AutomationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建腳本執行排程
         * @summary 創建排程
         * @param {ScheduleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(body: ScheduleCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Schedule> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).createSchedule(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 創建新的自動化腳本
         * @summary 創建腳本
         * @param {ScriptCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: ScriptCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Script> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).createScript(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除指定的排程
         * @summary 刪除排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(scheduleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).deleteSchedule(scheduleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除自動化腳本。 **建議**: 同告警規則，為了提高平台的容錯能力和操作安全性，建議對關鍵腳本實作軟刪除 (Soft Delete) 機制。 
         * @summary 刪除腳本
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScript(scriptId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).deleteScript(scriptId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 執行自動化腳本
         * @summary 執行腳本
         * @param {ScriptExecuteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeScript(body: ScriptExecuteRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecutionTaskResponse> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).executeScript(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取執行任務的詳情
         * @summary 執行詳情
         * @param {string} executionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(executionId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Execution> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).getExecution(executionId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取指定排程的詳細資訊
         * @summary 獲取單一排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(scheduleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Schedule> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).getSchedule(scheduleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定腳本的詳情
         * @summary 獲取腳本詳情
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScript(scriptId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Script> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).getScript(scriptId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 查詢腳本執行歷史
         * @summary 執行歷史
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [scriptId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions(page?: number, pageSize?: number, scriptId?: string, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecutionList> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).listExecutions(page, pageSize, scriptId, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有自動化腳本的執行排程
         * @summary 獲取排程列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSchedules(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ScheduleList> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).listSchedules(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有自動化腳本
         * @summary 獲取腳本列表
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScripts(category?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ScriptList> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).listScripts(category, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 手動觸發特定腳本的執行，主要用於測試或手動干預。
         * @summary 手動執行腳本
         * @param {ScriptRunRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runScript(body: ScriptRunRequest, scriptId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecutionTaskResponse> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).runScript(body, scriptId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新指定的排程
         * @summary 更新排程
         * @param {ScheduleUpdateRequest} body 
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(body: ScheduleUpdateRequest, scheduleId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Schedule> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).updateSchedule(body, scheduleId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新自動化腳本
         * @summary 更新腳本
         * @param {ScriptUpdateRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScript(body: ScriptUpdateRequest, scriptId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Script> {
            const localVarFetchArgs = AutomationApiFetchParamCreator(configuration).updateScript(body, scriptId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AutomationApi - factory interface
 * @export
 */
export const AutomationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建腳本執行排程
         * @summary 創建排程
         * @param {ScheduleCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSchedule(body: ScheduleCreateRequest, options?: any) {
            return AutomationApiFp(configuration).createSchedule(body, options)(fetch, basePath);
        },
        /**
         * 創建新的自動化腳本
         * @summary 創建腳本
         * @param {ScriptCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScript(body: ScriptCreateRequest, options?: any) {
            return AutomationApiFp(configuration).createScript(body, options)(fetch, basePath);
        },
        /**
         * 刪除指定的排程
         * @summary 刪除排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchedule(scheduleId: string, options?: any) {
            return AutomationApiFp(configuration).deleteSchedule(scheduleId, options)(fetch, basePath);
        },
        /**
         * 刪除自動化腳本。 **建議**: 同告警規則，為了提高平台的容錯能力和操作安全性，建議對關鍵腳本實作軟刪除 (Soft Delete) 機制。 
         * @summary 刪除腳本
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScript(scriptId: string, options?: any) {
            return AutomationApiFp(configuration).deleteScript(scriptId, options)(fetch, basePath);
        },
        /**
         * 執行自動化腳本
         * @summary 執行腳本
         * @param {ScriptExecuteRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeScript(body: ScriptExecuteRequest, options?: any) {
            return AutomationApiFp(configuration).executeScript(body, options)(fetch, basePath);
        },
        /**
         * 獲取執行任務的詳情
         * @summary 執行詳情
         * @param {string} executionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExecution(executionId: string, options?: any) {
            return AutomationApiFp(configuration).getExecution(executionId, options)(fetch, basePath);
        },
        /**
         * 獲取指定排程的詳細資訊
         * @summary 獲取單一排程
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(scheduleId: string, options?: any) {
            return AutomationApiFp(configuration).getSchedule(scheduleId, options)(fetch, basePath);
        },
        /**
         * 獲取特定腳本的詳情
         * @summary 獲取腳本詳情
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScript(scriptId: string, options?: any) {
            return AutomationApiFp(configuration).getScript(scriptId, options)(fetch, basePath);
        },
        /**
         * 查詢腳本執行歷史
         * @summary 執行歷史
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [scriptId] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listExecutions(page?: number, pageSize?: number, scriptId?: string, status?: string, options?: any) {
            return AutomationApiFp(configuration).listExecutions(page, pageSize, scriptId, status, options)(fetch, basePath);
        },
        /**
         * 獲取所有自動化腳本的執行排程
         * @summary 獲取排程列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSchedules(options?: any) {
            return AutomationApiFp(configuration).listSchedules(options)(fetch, basePath);
        },
        /**
         * 獲取所有自動化腳本
         * @summary 獲取腳本列表
         * @param {string} [category] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listScripts(category?: string, options?: any) {
            return AutomationApiFp(configuration).listScripts(category, options)(fetch, basePath);
        },
        /**
         * 手動觸發特定腳本的執行，主要用於測試或手動干預。
         * @summary 手動執行腳本
         * @param {ScriptRunRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runScript(body: ScriptRunRequest, scriptId: string, options?: any) {
            return AutomationApiFp(configuration).runScript(body, scriptId, options)(fetch, basePath);
        },
        /**
         * 更新指定的排程
         * @summary 更新排程
         * @param {ScheduleUpdateRequest} body 
         * @param {string} scheduleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(body: ScheduleUpdateRequest, scheduleId: string, options?: any) {
            return AutomationApiFp(configuration).updateSchedule(body, scheduleId, options)(fetch, basePath);
        },
        /**
         * 更新自動化腳本
         * @summary 更新腳本
         * @param {ScriptUpdateRequest} body 
         * @param {string} scriptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScript(body: ScriptUpdateRequest, scriptId: string, options?: any) {
            return AutomationApiFp(configuration).updateScript(body, scriptId, options)(fetch, basePath);
        },
    };
};

/**
 * AutomationApi - interface
 * @export
 * @interface AutomationApi
 */
export interface AutomationApiInterface {
    /**
     * 創建腳本執行排程
     * @summary 創建排程
     * @param {ScheduleCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    createSchedule(body: ScheduleCreateRequest, options?: any): Promise<Schedule>;

    /**
     * 創建新的自動化腳本
     * @summary 創建腳本
     * @param {ScriptCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    createScript(body: ScriptCreateRequest, options?: any): Promise<Script>;

    /**
     * 刪除指定的排程
     * @summary 刪除排程
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    deleteSchedule(scheduleId: string, options?: any): Promise<{}>;

    /**
     * 刪除自動化腳本。 **建議**: 同告警規則，為了提高平台的容錯能力和操作安全性，建議對關鍵腳本實作軟刪除 (Soft Delete) 機制。 
     * @summary 刪除腳本
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    deleteScript(scriptId: string, options?: any): Promise<{}>;

    /**
     * 執行自動化腳本
     * @summary 執行腳本
     * @param {ScriptExecuteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    executeScript(body: ScriptExecuteRequest, options?: any): Promise<ExecutionTaskResponse>;

    /**
     * 獲取執行任務的詳情
     * @summary 執行詳情
     * @param {string} executionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    getExecution(executionId: string, options?: any): Promise<Execution>;

    /**
     * 獲取指定排程的詳細資訊
     * @summary 獲取單一排程
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    getSchedule(scheduleId: string, options?: any): Promise<Schedule>;

    /**
     * 獲取特定腳本的詳情
     * @summary 獲取腳本詳情
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    getScript(scriptId: string, options?: any): Promise<Script>;

    /**
     * 查詢腳本執行歷史
     * @summary 執行歷史
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [scriptId] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    listExecutions(page?: number, pageSize?: number, scriptId?: string, status?: string, options?: any): Promise<ExecutionList>;

    /**
     * 獲取所有自動化腳本的執行排程
     * @summary 獲取排程列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    listSchedules(options?: any): Promise<ScheduleList>;

    /**
     * 獲取所有自動化腳本
     * @summary 獲取腳本列表
     * @param {string} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    listScripts(category?: string, options?: any): Promise<ScriptList>;

    /**
     * 手動觸發特定腳本的執行，主要用於測試或手動干預。
     * @summary 手動執行腳本
     * @param {ScriptRunRequest} body 
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    runScript(body: ScriptRunRequest, scriptId: string, options?: any): Promise<ExecutionTaskResponse>;

    /**
     * 更新指定的排程
     * @summary 更新排程
     * @param {ScheduleUpdateRequest} body 
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    updateSchedule(body: ScheduleUpdateRequest, scheduleId: string, options?: any): Promise<Schedule>;

    /**
     * 更新自動化腳本
     * @summary 更新腳本
     * @param {ScriptUpdateRequest} body 
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApiInterface
     */
    updateScript(body: ScriptUpdateRequest, scriptId: string, options?: any): Promise<Script>;

}

/**
 * AutomationApi - object-oriented interface
 * @export
 * @class AutomationApi
 * @extends {BaseAPI}
 */
export class AutomationApi extends BaseAPI implements AutomationApiInterface {
    /**
     * 創建腳本執行排程
     * @summary 創建排程
     * @param {ScheduleCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public createSchedule(body: ScheduleCreateRequest, options?: any) {
        return AutomationApiFp(this.configuration).createSchedule(body, options)(this.fetch, this.basePath);
    }

    /**
     * 創建新的自動化腳本
     * @summary 創建腳本
     * @param {ScriptCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public createScript(body: ScriptCreateRequest, options?: any) {
        return AutomationApiFp(this.configuration).createScript(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除指定的排程
     * @summary 刪除排程
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public deleteSchedule(scheduleId: string, options?: any) {
        return AutomationApiFp(this.configuration).deleteSchedule(scheduleId, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除自動化腳本。 **建議**: 同告警規則，為了提高平台的容錯能力和操作安全性，建議對關鍵腳本實作軟刪除 (Soft Delete) 機制。 
     * @summary 刪除腳本
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public deleteScript(scriptId: string, options?: any) {
        return AutomationApiFp(this.configuration).deleteScript(scriptId, options)(this.fetch, this.basePath);
    }

    /**
     * 執行自動化腳本
     * @summary 執行腳本
     * @param {ScriptExecuteRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public executeScript(body: ScriptExecuteRequest, options?: any) {
        return AutomationApiFp(this.configuration).executeScript(body, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取執行任務的詳情
     * @summary 執行詳情
     * @param {string} executionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public getExecution(executionId: string, options?: any) {
        return AutomationApiFp(this.configuration).getExecution(executionId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取指定排程的詳細資訊
     * @summary 獲取單一排程
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public getSchedule(scheduleId: string, options?: any) {
        return AutomationApiFp(this.configuration).getSchedule(scheduleId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定腳本的詳情
     * @summary 獲取腳本詳情
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public getScript(scriptId: string, options?: any) {
        return AutomationApiFp(this.configuration).getScript(scriptId, options)(this.fetch, this.basePath);
    }

    /**
     * 查詢腳本執行歷史
     * @summary 執行歷史
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [scriptId] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public listExecutions(page?: number, pageSize?: number, scriptId?: string, status?: string, options?: any) {
        return AutomationApiFp(this.configuration).listExecutions(page, pageSize, scriptId, status, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有自動化腳本的執行排程
     * @summary 獲取排程列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public listSchedules(options?: any) {
        return AutomationApiFp(this.configuration).listSchedules(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有自動化腳本
     * @summary 獲取腳本列表
     * @param {string} [category] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public listScripts(category?: string, options?: any) {
        return AutomationApiFp(this.configuration).listScripts(category, options)(this.fetch, this.basePath);
    }

    /**
     * 手動觸發特定腳本的執行，主要用於測試或手動干預。
     * @summary 手動執行腳本
     * @param {ScriptRunRequest} body 
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public runScript(body: ScriptRunRequest, scriptId: string, options?: any) {
        return AutomationApiFp(this.configuration).runScript(body, scriptId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新指定的排程
     * @summary 更新排程
     * @param {ScheduleUpdateRequest} body 
     * @param {string} scheduleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public updateSchedule(body: ScheduleUpdateRequest, scheduleId: string, options?: any) {
        return AutomationApiFp(this.configuration).updateSchedule(body, scheduleId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新自動化腳本
     * @summary 更新腳本
     * @param {ScriptUpdateRequest} body 
     * @param {string} scriptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationApi
     */
    public updateScript(body: ScriptUpdateRequest, scriptId: string, options?: any) {
        return AutomationApiFp(this.configuration).updateScript(body, scriptId, options)(this.fetch, this.basePath);
    }

}
/**
 * CallbacksApi - fetch parameter creator
 * @export
 */
export const CallbacksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * SRE Assistant 完成診斷後會呼叫此端點
         * @summary 接收診斷完成的回調
         * @param {CallbacksDiagnosiscompleteBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagnosisCallback(body: CallbacksDiagnosiscompleteBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling diagnosisCallback.');
            }
            const localVarPath = `/api/v1/callbacks/diagnosis-complete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CallbacksDiagnosiscompleteBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CallbacksApi - functional programming interface
 * @export
 */
export const CallbacksApiFp = function(configuration?: Configuration) {
    return {
        /**
         * SRE Assistant 完成診斷後會呼叫此端點
         * @summary 接收診斷完成的回調
         * @param {CallbacksDiagnosiscompleteBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagnosisCallback(body: CallbacksDiagnosiscompleteBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CallbacksApiFetchParamCreator(configuration).diagnosisCallback(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CallbacksApi - factory interface
 * @export
 */
export const CallbacksApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * SRE Assistant 完成診斷後會呼叫此端點
         * @summary 接收診斷完成的回調
         * @param {CallbacksDiagnosiscompleteBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diagnosisCallback(body: CallbacksDiagnosiscompleteBody, options?: any) {
            return CallbacksApiFp(configuration).diagnosisCallback(body, options)(fetch, basePath);
        },
    };
};

/**
 * CallbacksApi - interface
 * @export
 * @interface CallbacksApi
 */
export interface CallbacksApiInterface {
    /**
     * SRE Assistant 完成診斷後會呼叫此端點
     * @summary 接收診斷完成的回調
     * @param {CallbacksDiagnosiscompleteBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApiInterface
     */
    diagnosisCallback(body: CallbacksDiagnosiscompleteBody, options?: any): Promise<{}>;

}

/**
 * CallbacksApi - object-oriented interface
 * @export
 * @class CallbacksApi
 * @extends {BaseAPI}
 */
export class CallbacksApi extends BaseAPI implements CallbacksApiInterface {
    /**
     * SRE Assistant 完成診斷後會呼叫此端點
     * @summary 接收診斷完成的回調
     * @param {CallbacksDiagnosiscompleteBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CallbacksApi
     */
    public diagnosisCallback(body: CallbacksDiagnosiscompleteBody, options?: any) {
        return CallbacksApiFp(this.configuration).diagnosisCallback(body, options)(this.fetch, this.basePath);
    }

}
/**
 * CapacityPlanningApi - fetch parameter creator
 * @export
 */
export const CapacityPlanningApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根據歷史數據對指定資源進行容量分析與預測 (由 SRE Assistant 處理)
         * @summary 執行容量分析
         * @param {CapacityAnalysisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeCapacity(body: CapacityAnalysisRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling analyzeCapacity.');
            }
            const localVarPath = `/api/v1/capacity-planning/analyze`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CapacityAnalysisRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CapacityPlanningApi - functional programming interface
 * @export
 */
export const CapacityPlanningApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 根據歷史數據對指定資源進行容量分析與預測 (由 SRE Assistant 處理)
         * @summary 執行容量分析
         * @param {CapacityAnalysisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeCapacity(body: CapacityAnalysisRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CapacityAnalysisResponse> {
            const localVarFetchArgs = CapacityPlanningApiFetchParamCreator(configuration).analyzeCapacity(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CapacityPlanningApi - factory interface
 * @export
 */
export const CapacityPlanningApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 根據歷史數據對指定資源進行容量分析與預測 (由 SRE Assistant 處理)
         * @summary 執行容量分析
         * @param {CapacityAnalysisRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyzeCapacity(body: CapacityAnalysisRequest, options?: any) {
            return CapacityPlanningApiFp(configuration).analyzeCapacity(body, options)(fetch, basePath);
        },
    };
};

/**
 * CapacityPlanningApi - interface
 * @export
 * @interface CapacityPlanningApi
 */
export interface CapacityPlanningApiInterface {
    /**
     * 根據歷史數據對指定資源進行容量分析與預測 (由 SRE Assistant 處理)
     * @summary 執行容量分析
     * @param {CapacityAnalysisRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapacityPlanningApiInterface
     */
    analyzeCapacity(body: CapacityAnalysisRequest, options?: any): Promise<CapacityAnalysisResponse>;

}

/**
 * CapacityPlanningApi - object-oriented interface
 * @export
 * @class CapacityPlanningApi
 * @extends {BaseAPI}
 */
export class CapacityPlanningApi extends BaseAPI implements CapacityPlanningApiInterface {
    /**
     * 根據歷史數據對指定資源進行容量分析與預測 (由 SRE Assistant 處理)
     * @summary 執行容量分析
     * @param {CapacityAnalysisRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CapacityPlanningApi
     */
    public analyzeCapacity(body: CapacityAnalysisRequest, options?: any) {
        return CapacityPlanningApiFp(this.configuration).analyzeCapacity(body, options)(this.fetch, this.basePath);
    }

}
/**
 * CoreApi - fetch parameter creator
 * @export
 */
export const CoreApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 檢查服務是否存活
         * @summary 服務健康檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckHealth(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/healthz`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 檢查服務及其依賴是否就緒
         * @summary 服務就緒檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckReadiness(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/readyz`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取 Prometheus 格式的系統指標
         * @summary Prometheus 指標
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpGetMetrics(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/metrics`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有可用於建立告警規則的監控指標及其定義。
         * @summary 獲取可用監控指標列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricDefinitions(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/metrics/definitions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoreApi - functional programming interface
 * @export
 */
export const CoreApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 檢查服務是否存活
         * @summary 服務健康檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckHealth(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HealthStatus> {
            const localVarFetchArgs = CoreApiFetchParamCreator(configuration).cpCheckHealth(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 檢查服務及其依賴是否就緒
         * @summary 服務就緒檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckReadiness(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReadinessStatus> {
            const localVarFetchArgs = CoreApiFetchParamCreator(configuration).cpCheckReadiness(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取 Prometheus 格式的系統指標
         * @summary Prometheus 指標
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpGetMetrics(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = CoreApiFetchParamCreator(configuration).cpGetMetrics(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有可用於建立告警規則的監控指標及其定義。
         * @summary 獲取可用監控指標列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricDefinitions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MetricDefinitionList> {
            const localVarFetchArgs = CoreApiFetchParamCreator(configuration).getMetricDefinitions(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CoreApi - factory interface
 * @export
 */
export const CoreApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 檢查服務是否存活
         * @summary 服務健康檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckHealth(options?: any) {
            return CoreApiFp(configuration).cpCheckHealth(options)(fetch, basePath);
        },
        /**
         * 檢查服務及其依賴是否就緒
         * @summary 服務就緒檢查
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpCheckReadiness(options?: any) {
            return CoreApiFp(configuration).cpCheckReadiness(options)(fetch, basePath);
        },
        /**
         * 獲取 Prometheus 格式的系統指標
         * @summary Prometheus 指標
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cpGetMetrics(options?: any) {
            return CoreApiFp(configuration).cpGetMetrics(options)(fetch, basePath);
        },
        /**
         * 獲取所有可用於建立告警規則的監控指標及其定義。
         * @summary 獲取可用監控指標列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetricDefinitions(options?: any) {
            return CoreApiFp(configuration).getMetricDefinitions(options)(fetch, basePath);
        },
    };
};

/**
 * CoreApi - interface
 * @export
 * @interface CoreApi
 */
export interface CoreApiInterface {
    /**
     * 檢查服務是否存活
     * @summary 服務健康檢查
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    cpCheckHealth(options?: any): Promise<HealthStatus>;

    /**
     * 檢查服務及其依賴是否就緒
     * @summary 服務就緒檢查
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    cpCheckReadiness(options?: any): Promise<ReadinessStatus>;

    /**
     * 獲取 Prometheus 格式的系統指標
     * @summary Prometheus 指標
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    cpGetMetrics(options?: any): Promise<string>;

    /**
     * 獲取所有可用於建立告警規則的監控指標及其定義。
     * @summary 獲取可用監控指標列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApiInterface
     */
    getMetricDefinitions(options?: any): Promise<MetricDefinitionList>;

}

/**
 * CoreApi - object-oriented interface
 * @export
 * @class CoreApi
 * @extends {BaseAPI}
 */
export class CoreApi extends BaseAPI implements CoreApiInterface {
    /**
     * 檢查服務是否存活
     * @summary 服務健康檢查
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public cpCheckHealth(options?: any) {
        return CoreApiFp(this.configuration).cpCheckHealth(options)(this.fetch, this.basePath);
    }

    /**
     * 檢查服務及其依賴是否就緒
     * @summary 服務就緒檢查
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public cpCheckReadiness(options?: any) {
        return CoreApiFp(this.configuration).cpCheckReadiness(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取 Prometheus 格式的系統指標
     * @summary Prometheus 指標
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public cpGetMetrics(options?: any) {
        return CoreApiFp(this.configuration).cpGetMetrics(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有可用於建立告警規則的監控指標及其定義。
     * @summary 獲取可用監控指標列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoreApi
     */
    public getMetricDefinitions(options?: any) {
        return CoreApiFp(this.configuration).getMetricDefinitions(options)(this.fetch, this.basePath);
    }

}
/**
 * DashboardApi - fetch parameter creator
 * @export
 */
export const DashboardApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 獲取儀表板的摘要數據
         * @summary 儀表板摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardSummary(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/dashboard/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取各項指標的趨勢數據
         * @summary 趨勢數據
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardTrends(period?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/dashboard/trends`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取資源狀態分佈統計
         * @summary 資源分佈
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDistribution(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/dashboard/resource-distribution`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 獲取儀表板的摘要數據
         * @summary 儀表板摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardSummary(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DashboardSummary> {
            const localVarFetchArgs = DashboardApiFetchParamCreator(configuration).getDashboardSummary(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取各項指標的趨勢數據
         * @summary 趨勢數據
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardTrends(period?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrendData> {
            const localVarFetchArgs = DashboardApiFetchParamCreator(configuration).getDashboardTrends(period, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取資源狀態分佈統計
         * @summary 資源分佈
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDistribution(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceDistribution> {
            const localVarFetchArgs = DashboardApiFetchParamCreator(configuration).getResourceDistribution(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 獲取儀表板的摘要數據
         * @summary 儀表板摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardSummary(options?: any) {
            return DashboardApiFp(configuration).getDashboardSummary(options)(fetch, basePath);
        },
        /**
         * 獲取各項指標的趨勢數據
         * @summary 趨勢數據
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardTrends(period?: string, options?: any) {
            return DashboardApiFp(configuration).getDashboardTrends(period, options)(fetch, basePath);
        },
        /**
         * 獲取資源狀態分佈統計
         * @summary 資源分佈
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceDistribution(options?: any) {
            return DashboardApiFp(configuration).getResourceDistribution(options)(fetch, basePath);
        },
    };
};

/**
 * DashboardApi - interface
 * @export
 * @interface DashboardApi
 */
export interface DashboardApiInterface {
    /**
     * 獲取儀表板的摘要數據
     * @summary 儀表板摘要
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    getDashboardSummary(options?: any): Promise<DashboardSummary>;

    /**
     * 獲取各項指標的趨勢數據
     * @summary 趨勢數據
     * @param {string} [period] 時間範圍
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    getDashboardTrends(period?: string, options?: any): Promise<TrendData>;

    /**
     * 獲取資源狀態分佈統計
     * @summary 資源分佈
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApiInterface
     */
    getResourceDistribution(options?: any): Promise<ResourceDistribution>;

}

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI implements DashboardApiInterface {
    /**
     * 獲取儀表板的摘要數據
     * @summary 儀表板摘要
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public getDashboardSummary(options?: any) {
        return DashboardApiFp(this.configuration).getDashboardSummary(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取各項指標的趨勢數據
     * @summary 趨勢數據
     * @param {string} [period] 時間範圍
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public getDashboardTrends(period?: string, options?: any) {
        return DashboardApiFp(this.configuration).getDashboardTrends(period, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取資源狀態分佈統計
     * @summary 資源分佈
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardApi
     */
    public getResourceDistribution(options?: any) {
        return DashboardApiFp(this.configuration).getResourceDistribution(options)(this.fetch, this.basePath);
    }

}
/**
 * IncidentsApi - fetch parameter creator
 * @export
 */
export const IncidentsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 確認事件已被接收處理
         * @summary 確認事件
         * @param {string} incidentId 
         * @param {IncidentIdAcknowledgeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeIncident(incidentId: string, body?: IncidentIdAcknowledgeBody, options: any = {}): FetchArgs {
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling acknowledgeIncident.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}/acknowledge`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentIdAcknowledgeBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 為事件新增註記
         * @summary 新增事件註記
         * @param {IncidentIdCommentsBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIncidentComment(body: IncidentIdCommentsBody, incidentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addIncidentComment.');
            }
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling addIncidentComment.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}/comments`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentIdCommentsBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指派事件給特定人員處理
         * @summary 指派事件
         * @param {IncidentIdAssignBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignIncident(body: IncidentIdAssignBody, incidentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling assignIncident.');
            }
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling assignIncident.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}/assign`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentIdAssignBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 對多個告警事件執行批次操作，例如批次確認或解決。
         * @summary 批次處理告警事件
         * @param {BatchIncidentOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpdateIncidents(body: BatchIncidentOperation, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchUpdateIncidents.');
            }
            const localVarPath = `/api/v1/incidents/batch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchIncidentOperation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 創建新的事件記錄
         * @summary 創建事件
         * @param {IncidentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncident(body: IncidentCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createIncident.');
            }
            const localVarPath = `/api/v1/incidents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 使用 AI 生成事件分析報告 (由 SRE Assistant 處理)
         * @summary AI 生成事件報告
         * @param {IncidentsGeneratereportBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateIncidentReport(body: IncidentsGeneratereportBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling generateIncidentReport.');
            }
            const localVarPath = `/api/v1/incidents/generate-report`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentsGeneratereportBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取與指定告警在時間上或拓撲上相關的其他告警事件。
         * @summary 獲取關聯告警事件
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelatedIncidents(incidentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling getCorrelatedIncidents.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}/correlated`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定事件的詳細資訊
         * @summary 獲取事件詳情
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncident(incidentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling getIncident.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有活躍的告警
         * @summary 獲取當前告警列表
         * @param {string} [severity] 嚴重程度
         * @param {string} [status] 告警狀態
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlerts(severity?: string, status?: string, startTime?: Date, endTime?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/alerts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any).toISOString();
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有事件記錄
         * @summary 獲取事件列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 
         * @param {string} [severity] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [resourceId] 依特定資源 ID 篩選關聯的告警事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIncidents(page?: number, pageSize?: number, status?: string, severity?: string, startTime?: Date, endTime?: Date, resourceId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/incidents`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = (startTime as any).toISOString();
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = (endTime as any).toISOString();
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 標記事件為已解決
         * @summary 解決事件
         * @param {string} incidentId 
         * @param {IncidentIdResolveBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident(incidentId: string, body?: IncidentIdResolveBody, options: any = {}): FetchArgs {
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling resolveIncident.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}/resolve`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentIdResolveBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新事件資訊
         * @summary 更新事件
         * @param {IncidentUpdateRequest} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncident(body: IncidentUpdateRequest, incidentId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateIncident.');
            }
            // verify required parameter 'incidentId' is not null or undefined
            if (incidentId === null || incidentId === undefined) {
                throw new RequiredError('incidentId','Required parameter incidentId was null or undefined when calling updateIncident.');
            }
            const localVarPath = `/api/v1/incidents/{incidentId}`
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IncidentUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IncidentsApi - functional programming interface
 * @export
 */
export const IncidentsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 確認事件已被接收處理
         * @summary 確認事件
         * @param {string} incidentId 
         * @param {IncidentIdAcknowledgeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeIncident(incidentId: string, body?: IncidentIdAcknowledgeBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Incident> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).acknowledgeIncident(incidentId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 為事件新增註記
         * @summary 新增事件註記
         * @param {IncidentIdCommentsBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIncidentComment(body: IncidentIdCommentsBody, incidentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).addIncidentComment(body, incidentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 指派事件給特定人員處理
         * @summary 指派事件
         * @param {IncidentIdAssignBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignIncident(body: IncidentIdAssignBody, incidentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).assignIncident(body, incidentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 對多個告警事件執行批次操作，例如批次確認或解決。
         * @summary 批次處理告警事件
         * @param {BatchIncidentOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpdateIncidents(body: BatchIncidentOperation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchOperationResult> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).batchUpdateIncidents(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 創建新的事件記錄
         * @summary 創建事件
         * @param {IncidentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncident(body: IncidentCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Incident> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).createIncident(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 使用 AI 生成事件分析報告 (由 SRE Assistant 處理)
         * @summary AI 生成事件報告
         * @param {IncidentsGeneratereportBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateIncidentReport(body: IncidentsGeneratereportBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AIGeneratedReport> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).generateIncidentReport(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取與指定告警在時間上或拓撲上相關的其他告警事件。
         * @summary 獲取關聯告警事件
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelatedIncidents(incidentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IncidentList> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).getCorrelatedIncidents(incidentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定事件的詳細資訊
         * @summary 獲取事件詳情
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncident(incidentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Incident> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).getIncident(incidentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有活躍的告警
         * @summary 獲取當前告警列表
         * @param {string} [severity] 嚴重程度
         * @param {string} [status] 告警狀態
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlerts(severity?: string, status?: string, startTime?: Date, endTime?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).listAlerts(severity, status, startTime, endTime, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有事件記錄
         * @summary 獲取事件列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 
         * @param {string} [severity] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [resourceId] 依特定資源 ID 篩選關聯的告警事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIncidents(page?: number, pageSize?: number, status?: string, severity?: string, startTime?: Date, endTime?: Date, resourceId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IncidentList> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).listIncidents(page, pageSize, status, severity, startTime, endTime, resourceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 標記事件為已解決
         * @summary 解決事件
         * @param {string} incidentId 
         * @param {IncidentIdResolveBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident(incidentId: string, body?: IncidentIdResolveBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Incident> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).resolveIncident(incidentId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新事件資訊
         * @summary 更新事件
         * @param {IncidentUpdateRequest} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncident(body: IncidentUpdateRequest, incidentId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Incident> {
            const localVarFetchArgs = IncidentsApiFetchParamCreator(configuration).updateIncident(body, incidentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * IncidentsApi - factory interface
 * @export
 */
export const IncidentsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 確認事件已被接收處理
         * @summary 確認事件
         * @param {string} incidentId 
         * @param {IncidentIdAcknowledgeBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeIncident(incidentId: string, body?: IncidentIdAcknowledgeBody, options?: any) {
            return IncidentsApiFp(configuration).acknowledgeIncident(incidentId, body, options)(fetch, basePath);
        },
        /**
         * 為事件新增註記
         * @summary 新增事件註記
         * @param {IncidentIdCommentsBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIncidentComment(body: IncidentIdCommentsBody, incidentId: string, options?: any) {
            return IncidentsApiFp(configuration).addIncidentComment(body, incidentId, options)(fetch, basePath);
        },
        /**
         * 指派事件給特定人員處理
         * @summary 指派事件
         * @param {IncidentIdAssignBody} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignIncident(body: IncidentIdAssignBody, incidentId: string, options?: any) {
            return IncidentsApiFp(configuration).assignIncident(body, incidentId, options)(fetch, basePath);
        },
        /**
         * 對多個告警事件執行批次操作，例如批次確認或解決。
         * @summary 批次處理告警事件
         * @param {BatchIncidentOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchUpdateIncidents(body: BatchIncidentOperation, options?: any) {
            return IncidentsApiFp(configuration).batchUpdateIncidents(body, options)(fetch, basePath);
        },
        /**
         * 創建新的事件記錄
         * @summary 創建事件
         * @param {IncidentCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIncident(body: IncidentCreateRequest, options?: any) {
            return IncidentsApiFp(configuration).createIncident(body, options)(fetch, basePath);
        },
        /**
         * 使用 AI 生成事件分析報告 (由 SRE Assistant 處理)
         * @summary AI 生成事件報告
         * @param {IncidentsGeneratereportBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateIncidentReport(body: IncidentsGeneratereportBody, options?: any) {
            return IncidentsApiFp(configuration).generateIncidentReport(body, options)(fetch, basePath);
        },
        /**
         * 獲取與指定告警在時間上或拓撲上相關的其他告警事件。
         * @summary 獲取關聯告警事件
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCorrelatedIncidents(incidentId: string, options?: any) {
            return IncidentsApiFp(configuration).getCorrelatedIncidents(incidentId, options)(fetch, basePath);
        },
        /**
         * 獲取特定事件的詳細資訊
         * @summary 獲取事件詳情
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncident(incidentId: string, options?: any) {
            return IncidentsApiFp(configuration).getIncident(incidentId, options)(fetch, basePath);
        },
        /**
         * 獲取所有活躍的告警
         * @summary 獲取當前告警列表
         * @param {string} [severity] 嚴重程度
         * @param {string} [status] 告警狀態
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAlerts(severity?: string, status?: string, startTime?: Date, endTime?: Date, options?: any) {
            return IncidentsApiFp(configuration).listAlerts(severity, status, startTime, endTime, options)(fetch, basePath);
        },
        /**
         * 獲取所有事件記錄
         * @summary 獲取事件列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 
         * @param {string} [severity] 
         * @param {Date} [startTime] 
         * @param {Date} [endTime] 
         * @param {string} [resourceId] 依特定資源 ID 篩選關聯的告警事件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIncidents(page?: number, pageSize?: number, status?: string, severity?: string, startTime?: Date, endTime?: Date, resourceId?: string, options?: any) {
            return IncidentsApiFp(configuration).listIncidents(page, pageSize, status, severity, startTime, endTime, resourceId, options)(fetch, basePath);
        },
        /**
         * 標記事件為已解決
         * @summary 解決事件
         * @param {string} incidentId 
         * @param {IncidentIdResolveBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolveIncident(incidentId: string, body?: IncidentIdResolveBody, options?: any) {
            return IncidentsApiFp(configuration).resolveIncident(incidentId, body, options)(fetch, basePath);
        },
        /**
         * 更新事件資訊
         * @summary 更新事件
         * @param {IncidentUpdateRequest} body 
         * @param {string} incidentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIncident(body: IncidentUpdateRequest, incidentId: string, options?: any) {
            return IncidentsApiFp(configuration).updateIncident(body, incidentId, options)(fetch, basePath);
        },
    };
};

/**
 * IncidentsApi - interface
 * @export
 * @interface IncidentsApi
 */
export interface IncidentsApiInterface {
    /**
     * 確認事件已被接收處理
     * @summary 確認事件
     * @param {string} incidentId 
     * @param {IncidentIdAcknowledgeBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    acknowledgeIncident(incidentId: string, body?: IncidentIdAcknowledgeBody, options?: any): Promise<Incident>;

    /**
     * 為事件新增註記
     * @summary 新增事件註記
     * @param {IncidentIdCommentsBody} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    addIncidentComment(body: IncidentIdCommentsBody, incidentId: string, options?: any): Promise<{}>;

    /**
     * 指派事件給特定人員處理
     * @summary 指派事件
     * @param {IncidentIdAssignBody} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    assignIncident(body: IncidentIdAssignBody, incidentId: string, options?: any): Promise<{}>;

    /**
     * 對多個告警事件執行批次操作，例如批次確認或解決。
     * @summary 批次處理告警事件
     * @param {BatchIncidentOperation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    batchUpdateIncidents(body: BatchIncidentOperation, options?: any): Promise<BatchOperationResult>;

    /**
     * 創建新的事件記錄
     * @summary 創建事件
     * @param {IncidentCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    createIncident(body: IncidentCreateRequest, options?: any): Promise<Incident>;

    /**
     * 使用 AI 生成事件分析報告 (由 SRE Assistant 處理)
     * @summary AI 生成事件報告
     * @param {IncidentsGeneratereportBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    generateIncidentReport(body: IncidentsGeneratereportBody, options?: any): Promise<AIGeneratedReport>;

    /**
     * 獲取與指定告警在時間上或拓撲上相關的其他告警事件。
     * @summary 獲取關聯告警事件
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    getCorrelatedIncidents(incidentId: string, options?: any): Promise<IncidentList>;

    /**
     * 獲取特定事件的詳細資訊
     * @summary 獲取事件詳情
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    getIncident(incidentId: string, options?: any): Promise<Incident>;

    /**
     * 獲取所有活躍的告警
     * @summary 獲取當前告警列表
     * @param {string} [severity] 嚴重程度
     * @param {string} [status] 告警狀態
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    listAlerts(severity?: string, status?: string, startTime?: Date, endTime?: Date, options?: any): Promise<InlineResponse2001>;

    /**
     * 獲取所有事件記錄
     * @summary 獲取事件列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 
     * @param {string} [severity] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {string} [resourceId] 依特定資源 ID 篩選關聯的告警事件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    listIncidents(page?: number, pageSize?: number, status?: string, severity?: string, startTime?: Date, endTime?: Date, resourceId?: string, options?: any): Promise<IncidentList>;

    /**
     * 標記事件為已解決
     * @summary 解決事件
     * @param {string} incidentId 
     * @param {IncidentIdResolveBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    resolveIncident(incidentId: string, body?: IncidentIdResolveBody, options?: any): Promise<Incident>;

    /**
     * 更新事件資訊
     * @summary 更新事件
     * @param {IncidentUpdateRequest} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApiInterface
     */
    updateIncident(body: IncidentUpdateRequest, incidentId: string, options?: any): Promise<Incident>;

}

/**
 * IncidentsApi - object-oriented interface
 * @export
 * @class IncidentsApi
 * @extends {BaseAPI}
 */
export class IncidentsApi extends BaseAPI implements IncidentsApiInterface {
    /**
     * 確認事件已被接收處理
     * @summary 確認事件
     * @param {string} incidentId 
     * @param {IncidentIdAcknowledgeBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public acknowledgeIncident(incidentId: string, body?: IncidentIdAcknowledgeBody, options?: any) {
        return IncidentsApiFp(this.configuration).acknowledgeIncident(incidentId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 為事件新增註記
     * @summary 新增事件註記
     * @param {IncidentIdCommentsBody} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public addIncidentComment(body: IncidentIdCommentsBody, incidentId: string, options?: any) {
        return IncidentsApiFp(this.configuration).addIncidentComment(body, incidentId, options)(this.fetch, this.basePath);
    }

    /**
     * 指派事件給特定人員處理
     * @summary 指派事件
     * @param {IncidentIdAssignBody} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public assignIncident(body: IncidentIdAssignBody, incidentId: string, options?: any) {
        return IncidentsApiFp(this.configuration).assignIncident(body, incidentId, options)(this.fetch, this.basePath);
    }

    /**
     * 對多個告警事件執行批次操作，例如批次確認或解決。
     * @summary 批次處理告警事件
     * @param {BatchIncidentOperation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public batchUpdateIncidents(body: BatchIncidentOperation, options?: any) {
        return IncidentsApiFp(this.configuration).batchUpdateIncidents(body, options)(this.fetch, this.basePath);
    }

    /**
     * 創建新的事件記錄
     * @summary 創建事件
     * @param {IncidentCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public createIncident(body: IncidentCreateRequest, options?: any) {
        return IncidentsApiFp(this.configuration).createIncident(body, options)(this.fetch, this.basePath);
    }

    /**
     * 使用 AI 生成事件分析報告 (由 SRE Assistant 處理)
     * @summary AI 生成事件報告
     * @param {IncidentsGeneratereportBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public generateIncidentReport(body: IncidentsGeneratereportBody, options?: any) {
        return IncidentsApiFp(this.configuration).generateIncidentReport(body, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取與指定告警在時間上或拓撲上相關的其他告警事件。
     * @summary 獲取關聯告警事件
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public getCorrelatedIncidents(incidentId: string, options?: any) {
        return IncidentsApiFp(this.configuration).getCorrelatedIncidents(incidentId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定事件的詳細資訊
     * @summary 獲取事件詳情
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public getIncident(incidentId: string, options?: any) {
        return IncidentsApiFp(this.configuration).getIncident(incidentId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有活躍的告警
     * @summary 獲取當前告警列表
     * @param {string} [severity] 嚴重程度
     * @param {string} [status] 告警狀態
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public listAlerts(severity?: string, status?: string, startTime?: Date, endTime?: Date, options?: any) {
        return IncidentsApiFp(this.configuration).listAlerts(severity, status, startTime, endTime, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有事件記錄
     * @summary 獲取事件列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 
     * @param {string} [severity] 
     * @param {Date} [startTime] 
     * @param {Date} [endTime] 
     * @param {string} [resourceId] 依特定資源 ID 篩選關聯的告警事件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public listIncidents(page?: number, pageSize?: number, status?: string, severity?: string, startTime?: Date, endTime?: Date, resourceId?: string, options?: any) {
        return IncidentsApiFp(this.configuration).listIncidents(page, pageSize, status, severity, startTime, endTime, resourceId, options)(this.fetch, this.basePath);
    }

    /**
     * 標記事件為已解決
     * @summary 解決事件
     * @param {string} incidentId 
     * @param {IncidentIdResolveBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public resolveIncident(incidentId: string, body?: IncidentIdResolveBody, options?: any) {
        return IncidentsApiFp(this.configuration).resolveIncident(incidentId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 更新事件資訊
     * @summary 更新事件
     * @param {IncidentUpdateRequest} body 
     * @param {string} incidentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IncidentsApi
     */
    public updateIncident(body: IncidentUpdateRequest, incidentId: string, options?: any) {
        return IncidentsApiFp(this.configuration).updateIncident(body, incidentId, options)(this.fetch, this.basePath);
    }

}
/**
 * NotificationCenterApi - fetch parameter creator
 * @export
 */
export const NotificationCenterApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 獲取未讀通知數量等摘要資訊
         * @summary 獲取通知摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotificationSummary(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/notifications/summary`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取當前登入使用者的通知列表，支援分頁和過濾
         * @summary 獲取使用者的通知
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 過濾通知狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserNotifications(page?: number, pageSize?: number, status?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 將當前使用者的所有未讀通知標示為已讀
         * @summary 將所有通知標示為已讀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUserNotificationsAsRead(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/notifications/mark-all-as-read`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 將指定的通知標示為已讀
         * @summary 將單一通知標示為已讀
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUserNotificationAsRead(notificationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'notificationId' is not null or undefined
            if (notificationId === null || notificationId === undefined) {
                throw new RequiredError('notificationId','Required parameter notificationId was null or undefined when calling markUserNotificationAsRead.');
            }
            const localVarPath = `/api/v1/notifications/{notificationId}/mark-as-read`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationCenterApi - functional programming interface
 * @export
 */
export const NotificationCenterApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 獲取未讀通知數量等摘要資訊
         * @summary 獲取通知摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotificationSummary(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserNotificationSummary> {
            const localVarFetchArgs = NotificationCenterApiFetchParamCreator(configuration).getUserNotificationSummary(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取當前登入使用者的通知列表，支援分頁和過濾
         * @summary 獲取使用者的通知
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 過濾通知狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserNotifications(page?: number, pageSize?: number, status?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserNotificationList> {
            const localVarFetchArgs = NotificationCenterApiFetchParamCreator(configuration).listUserNotifications(page, pageSize, status, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 將當前使用者的所有未讀通知標示為已讀
         * @summary 將所有通知標示為已讀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUserNotificationsAsRead(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationCenterApiFetchParamCreator(configuration).markAllUserNotificationsAsRead(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 將指定的通知標示為已讀
         * @summary 將單一通知標示為已讀
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUserNotificationAsRead(notificationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationCenterApiFetchParamCreator(configuration).markUserNotificationAsRead(notificationId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationCenterApi - factory interface
 * @export
 */
export const NotificationCenterApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 獲取未讀通知數量等摘要資訊
         * @summary 獲取通知摘要
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotificationSummary(options?: any) {
            return NotificationCenterApiFp(configuration).getUserNotificationSummary(options)(fetch, basePath);
        },
        /**
         * 獲取當前登入使用者的通知列表，支援分頁和過濾
         * @summary 獲取使用者的通知
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 過濾通知狀態
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserNotifications(page?: number, pageSize?: number, status?: string, options?: any) {
            return NotificationCenterApiFp(configuration).listUserNotifications(page, pageSize, status, options)(fetch, basePath);
        },
        /**
         * 將當前使用者的所有未讀通知標示為已讀
         * @summary 將所有通知標示為已讀
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAllUserNotificationsAsRead(options?: any) {
            return NotificationCenterApiFp(configuration).markAllUserNotificationsAsRead(options)(fetch, basePath);
        },
        /**
         * 將指定的通知標示為已讀
         * @summary 將單一通知標示為已讀
         * @param {string} notificationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markUserNotificationAsRead(notificationId: string, options?: any) {
            return NotificationCenterApiFp(configuration).markUserNotificationAsRead(notificationId, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationCenterApi - interface
 * @export
 * @interface NotificationCenterApi
 */
export interface NotificationCenterApiInterface {
    /**
     * 獲取未讀通知數量等摘要資訊
     * @summary 獲取通知摘要
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApiInterface
     */
    getUserNotificationSummary(options?: any): Promise<UserNotificationSummary>;

    /**
     * 獲取當前登入使用者的通知列表，支援分頁和過濾
     * @summary 獲取使用者的通知
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 過濾通知狀態
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApiInterface
     */
    listUserNotifications(page?: number, pageSize?: number, status?: string, options?: any): Promise<UserNotificationList>;

    /**
     * 將當前使用者的所有未讀通知標示為已讀
     * @summary 將所有通知標示為已讀
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApiInterface
     */
    markAllUserNotificationsAsRead(options?: any): Promise<{}>;

    /**
     * 將指定的通知標示為已讀
     * @summary 將單一通知標示為已讀
     * @param {string} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApiInterface
     */
    markUserNotificationAsRead(notificationId: string, options?: any): Promise<{}>;

}

/**
 * NotificationCenterApi - object-oriented interface
 * @export
 * @class NotificationCenterApi
 * @extends {BaseAPI}
 */
export class NotificationCenterApi extends BaseAPI implements NotificationCenterApiInterface {
    /**
     * 獲取未讀通知數量等摘要資訊
     * @summary 獲取通知摘要
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApi
     */
    public getUserNotificationSummary(options?: any) {
        return NotificationCenterApiFp(this.configuration).getUserNotificationSummary(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取當前登入使用者的通知列表，支援分頁和過濾
     * @summary 獲取使用者的通知
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 過濾通知狀態
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApi
     */
    public listUserNotifications(page?: number, pageSize?: number, status?: string, options?: any) {
        return NotificationCenterApiFp(this.configuration).listUserNotifications(page, pageSize, status, options)(this.fetch, this.basePath);
    }

    /**
     * 將當前使用者的所有未讀通知標示為已讀
     * @summary 將所有通知標示為已讀
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApi
     */
    public markAllUserNotificationsAsRead(options?: any) {
        return NotificationCenterApiFp(this.configuration).markAllUserNotificationsAsRead(options)(this.fetch, this.basePath);
    }

    /**
     * 將指定的通知標示為已讀
     * @summary 將單一通知標示為已讀
     * @param {string} notificationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationCenterApi
     */
    public markUserNotificationAsRead(notificationId: string, options?: any) {
        return NotificationCenterApiFp(this.configuration).markUserNotificationAsRead(notificationId, options)(this.fetch, this.basePath);
    }

}
/**
 * NotificationsApi - fetch parameter creator
 * @export
 */
export const NotificationsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建新的通知管道
         * @summary 創建通知管道
         * @param {NotificationChannelCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationChannel(body: NotificationChannelCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createNotificationChannel.');
            }
            const localVarPath = `/api/v1/notification-channels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NotificationChannelCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除通知管道
         * @summary 刪除通知管道
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationChannel(channelId: string, options: any = {}): FetchArgs {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling deleteNotificationChannel.');
            }
            const localVarPath = `/api/v1/notification-channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定通知管道的詳情
         * @summary 獲取管道詳情
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationChannel(channelId: string, options: any = {}): FetchArgs {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getNotificationChannel.');
            }
            const localVarPath = `/api/v1/notification-channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有通知管道
         * @summary 獲取通知管道列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationChannels(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/notification-channels`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 發送測試訊息到通知管道
         * @summary 測試通知管道
         * @param {string} channelId 
         * @param {ChannelIdTestBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testNotificationChannel(channelId: string, body?: ChannelIdTestBody, options: any = {}): FetchArgs {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling testNotificationChannel.');
            }
            const localVarPath = `/api/v1/notification-channels/{channelId}/test`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ChannelIdTestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新通知管道設定
         * @summary 更新通知管道
         * @param {NotificationChannelUpdateRequest} body 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationChannel(body: NotificationChannelUpdateRequest, channelId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateNotificationChannel.');
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling updateNotificationChannel.');
            }
            const localVarPath = `/api/v1/notification-channels/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NotificationChannelUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建新的通知管道
         * @summary 創建通知管道
         * @param {NotificationChannelCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationChannel(body: NotificationChannelCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationChannel> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).createNotificationChannel(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除通知管道
         * @summary 刪除通知管道
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationChannel(channelId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).deleteNotificationChannel(channelId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定通知管道的詳情
         * @summary 獲取管道詳情
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationChannel(channelId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationChannel> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).getNotificationChannel(channelId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有通知管道
         * @summary 獲取通知管道列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationChannels(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationChannelList> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).listNotificationChannels(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 發送測試訊息到通知管道
         * @summary 測試通知管道
         * @param {string} channelId 
         * @param {ChannelIdTestBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testNotificationChannel(channelId: string, body?: ChannelIdTestBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).testNotificationChannel(channelId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新通知管道設定
         * @summary 更新通知管道
         * @param {NotificationChannelUpdateRequest} body 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationChannel(body: NotificationChannelUpdateRequest, channelId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationChannel> {
            const localVarFetchArgs = NotificationsApiFetchParamCreator(configuration).updateNotificationChannel(body, channelId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建新的通知管道
         * @summary 創建通知管道
         * @param {NotificationChannelCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationChannel(body: NotificationChannelCreateRequest, options?: any) {
            return NotificationsApiFp(configuration).createNotificationChannel(body, options)(fetch, basePath);
        },
        /**
         * 刪除通知管道
         * @summary 刪除通知管道
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationChannel(channelId: string, options?: any) {
            return NotificationsApiFp(configuration).deleteNotificationChannel(channelId, options)(fetch, basePath);
        },
        /**
         * 獲取特定通知管道的詳情
         * @summary 獲取管道詳情
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationChannel(channelId: string, options?: any) {
            return NotificationsApiFp(configuration).getNotificationChannel(channelId, options)(fetch, basePath);
        },
        /**
         * 獲取所有通知管道
         * @summary 獲取通知管道列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationChannels(options?: any) {
            return NotificationsApiFp(configuration).listNotificationChannels(options)(fetch, basePath);
        },
        /**
         * 發送測試訊息到通知管道
         * @summary 測試通知管道
         * @param {string} channelId 
         * @param {ChannelIdTestBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testNotificationChannel(channelId: string, body?: ChannelIdTestBody, options?: any) {
            return NotificationsApiFp(configuration).testNotificationChannel(channelId, body, options)(fetch, basePath);
        },
        /**
         * 更新通知管道設定
         * @summary 更新通知管道
         * @param {NotificationChannelUpdateRequest} body 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationChannel(body: NotificationChannelUpdateRequest, channelId: string, options?: any) {
            return NotificationsApiFp(configuration).updateNotificationChannel(body, channelId, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationsApi - interface
 * @export
 * @interface NotificationsApi
 */
export interface NotificationsApiInterface {
    /**
     * 創建新的通知管道
     * @summary 創建通知管道
     * @param {NotificationChannelCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    createNotificationChannel(body: NotificationChannelCreateRequest, options?: any): Promise<NotificationChannel>;

    /**
     * 刪除通知管道
     * @summary 刪除通知管道
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    deleteNotificationChannel(channelId: string, options?: any): Promise<{}>;

    /**
     * 獲取特定通知管道的詳情
     * @summary 獲取管道詳情
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getNotificationChannel(channelId: string, options?: any): Promise<NotificationChannel>;

    /**
     * 獲取所有通知管道
     * @summary 獲取通知管道列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    listNotificationChannels(options?: any): Promise<NotificationChannelList>;

    /**
     * 發送測試訊息到通知管道
     * @summary 測試通知管道
     * @param {string} channelId 
     * @param {ChannelIdTestBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    testNotificationChannel(channelId: string, body?: ChannelIdTestBody, options?: any): Promise<InlineResponse2002>;

    /**
     * 更新通知管道設定
     * @summary 更新通知管道
     * @param {NotificationChannelUpdateRequest} body 
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    updateNotificationChannel(body: NotificationChannelUpdateRequest, channelId: string, options?: any): Promise<NotificationChannel>;

}

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI implements NotificationsApiInterface {
    /**
     * 創建新的通知管道
     * @summary 創建通知管道
     * @param {NotificationChannelCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public createNotificationChannel(body: NotificationChannelCreateRequest, options?: any) {
        return NotificationsApiFp(this.configuration).createNotificationChannel(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除通知管道
     * @summary 刪除通知管道
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public deleteNotificationChannel(channelId: string, options?: any) {
        return NotificationsApiFp(this.configuration).deleteNotificationChannel(channelId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定通知管道的詳情
     * @summary 獲取管道詳情
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public getNotificationChannel(channelId: string, options?: any) {
        return NotificationsApiFp(this.configuration).getNotificationChannel(channelId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有通知管道
     * @summary 獲取通知管道列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public listNotificationChannels(options?: any) {
        return NotificationsApiFp(this.configuration).listNotificationChannels(options)(this.fetch, this.basePath);
    }

    /**
     * 發送測試訊息到通知管道
     * @summary 測試通知管道
     * @param {string} channelId 
     * @param {ChannelIdTestBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public testNotificationChannel(channelId: string, body?: ChannelIdTestBody, options?: any) {
        return NotificationsApiFp(this.configuration).testNotificationChannel(channelId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 更新通知管道設定
     * @summary 更新通知管道
     * @param {NotificationChannelUpdateRequest} body 
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public updateNotificationChannel(body: NotificationChannelUpdateRequest, channelId: string, options?: any) {
        return NotificationsApiFp(this.configuration).updateNotificationChannel(body, channelId, options)(this.fetch, this.basePath);
    }

}
/**
 * ResourceGroupsApi - fetch parameter creator
 * @export
 */
export const ResourceGroupsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建新的資源群組
         * @summary 創建群組
         * @param {ResourceGroupCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceGroup(body: ResourceGroupCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createResourceGroup.');
            }
            const localVarPath = `/api/v1/resource-groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResourceGroupCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除資源群組
         * @summary 刪除群組
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceGroup(groupId: string, options: any = {}): FetchArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling deleteResourceGroup.');
            }
            const localVarPath = `/api/v1/resource-groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取單一資源群組的詳細資訊，包含成員列表。
         * @summary 獲取單一資源群組詳情
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceGroup(groupId: string, options: any = {}): FetchArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling getResourceGroup.');
            }
            const localVarPath = `/api/v1/resource-groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有資源群組
         * @summary 獲取群組列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceGroups(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/resource-groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增或移除群組成員
         * @summary 管理群組成員
         * @param {GroupMemberOperation} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageGroupMembers(body: GroupMemberOperation, groupId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling manageGroupMembers.');
            }
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling manageGroupMembers.');
            }
            const localVarPath = `/api/v1/resource-groups/{groupId}/members`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GroupMemberOperation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新資源群組資訊
         * @summary 更新群組
         * @param {ResourceGroupUpdateRequest} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceGroup(body: ResourceGroupUpdateRequest, groupId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateResourceGroup.');
            }
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateResourceGroup.');
            }
            const localVarPath = `/api/v1/resource-groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResourceGroupUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceGroupsApi - functional programming interface
 * @export
 */
export const ResourceGroupsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建新的資源群組
         * @summary 創建群組
         * @param {ResourceGroupCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceGroup(body: ResourceGroupCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceGroup> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).createResourceGroup(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除資源群組
         * @summary 刪除群組
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceGroup(groupId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).deleteResourceGroup(groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取單一資源群組的詳細資訊，包含成員列表。
         * @summary 獲取單一資源群組詳情
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceGroup(groupId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceGroup> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).getResourceGroup(groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有資源群組
         * @summary 獲取群組列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceGroups(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceGroupList> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).listResourceGroups(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新增或移除群組成員
         * @summary 管理群組成員
         * @param {GroupMemberOperation} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageGroupMembers(body: GroupMemberOperation, groupId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceGroup> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).manageGroupMembers(body, groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新資源群組資訊
         * @summary 更新群組
         * @param {ResourceGroupUpdateRequest} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceGroup(body: ResourceGroupUpdateRequest, groupId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceGroup> {
            const localVarFetchArgs = ResourceGroupsApiFetchParamCreator(configuration).updateResourceGroup(body, groupId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ResourceGroupsApi - factory interface
 * @export
 */
export const ResourceGroupsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建新的資源群組
         * @summary 創建群組
         * @param {ResourceGroupCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceGroup(body: ResourceGroupCreateRequest, options?: any) {
            return ResourceGroupsApiFp(configuration).createResourceGroup(body, options)(fetch, basePath);
        },
        /**
         * 刪除資源群組
         * @summary 刪除群組
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceGroup(groupId: string, options?: any) {
            return ResourceGroupsApiFp(configuration).deleteResourceGroup(groupId, options)(fetch, basePath);
        },
        /**
         * 獲取單一資源群組的詳細資訊，包含成員列表。
         * @summary 獲取單一資源群組詳情
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceGroup(groupId: string, options?: any) {
            return ResourceGroupsApiFp(configuration).getResourceGroup(groupId, options)(fetch, basePath);
        },
        /**
         * 獲取所有資源群組
         * @summary 獲取群組列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResourceGroups(options?: any) {
            return ResourceGroupsApiFp(configuration).listResourceGroups(options)(fetch, basePath);
        },
        /**
         * 新增或移除群組成員
         * @summary 管理群組成員
         * @param {GroupMemberOperation} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageGroupMembers(body: GroupMemberOperation, groupId: string, options?: any) {
            return ResourceGroupsApiFp(configuration).manageGroupMembers(body, groupId, options)(fetch, basePath);
        },
        /**
         * 更新資源群組資訊
         * @summary 更新群組
         * @param {ResourceGroupUpdateRequest} body 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResourceGroup(body: ResourceGroupUpdateRequest, groupId: string, options?: any) {
            return ResourceGroupsApiFp(configuration).updateResourceGroup(body, groupId, options)(fetch, basePath);
        },
    };
};

/**
 * ResourceGroupsApi - interface
 * @export
 * @interface ResourceGroupsApi
 */
export interface ResourceGroupsApiInterface {
    /**
     * 創建新的資源群組
     * @summary 創建群組
     * @param {ResourceGroupCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    createResourceGroup(body: ResourceGroupCreateRequest, options?: any): Promise<ResourceGroup>;

    /**
     * 刪除資源群組
     * @summary 刪除群組
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    deleteResourceGroup(groupId: string, options?: any): Promise<{}>;

    /**
     * 獲取單一資源群組的詳細資訊，包含成員列表。
     * @summary 獲取單一資源群組詳情
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    getResourceGroup(groupId: string, options?: any): Promise<ResourceGroup>;

    /**
     * 獲取所有資源群組
     * @summary 獲取群組列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    listResourceGroups(options?: any): Promise<ResourceGroupList>;

    /**
     * 新增或移除群組成員
     * @summary 管理群組成員
     * @param {GroupMemberOperation} body 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    manageGroupMembers(body: GroupMemberOperation, groupId: string, options?: any): Promise<ResourceGroup>;

    /**
     * 更新資源群組資訊
     * @summary 更新群組
     * @param {ResourceGroupUpdateRequest} body 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApiInterface
     */
    updateResourceGroup(body: ResourceGroupUpdateRequest, groupId: string, options?: any): Promise<ResourceGroup>;

}

/**
 * ResourceGroupsApi - object-oriented interface
 * @export
 * @class ResourceGroupsApi
 * @extends {BaseAPI}
 */
export class ResourceGroupsApi extends BaseAPI implements ResourceGroupsApiInterface {
    /**
     * 創建新的資源群組
     * @summary 創建群組
     * @param {ResourceGroupCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public createResourceGroup(body: ResourceGroupCreateRequest, options?: any) {
        return ResourceGroupsApiFp(this.configuration).createResourceGroup(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除資源群組
     * @summary 刪除群組
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public deleteResourceGroup(groupId: string, options?: any) {
        return ResourceGroupsApiFp(this.configuration).deleteResourceGroup(groupId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取單一資源群組的詳細資訊，包含成員列表。
     * @summary 獲取單一資源群組詳情
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public getResourceGroup(groupId: string, options?: any) {
        return ResourceGroupsApiFp(this.configuration).getResourceGroup(groupId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有資源群組
     * @summary 獲取群組列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public listResourceGroups(options?: any) {
        return ResourceGroupsApiFp(this.configuration).listResourceGroups(options)(this.fetch, this.basePath);
    }

    /**
     * 新增或移除群組成員
     * @summary 管理群組成員
     * @param {GroupMemberOperation} body 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public manageGroupMembers(body: GroupMemberOperation, groupId: string, options?: any) {
        return ResourceGroupsApiFp(this.configuration).manageGroupMembers(body, groupId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新資源群組資訊
     * @summary 更新群組
     * @param {ResourceGroupUpdateRequest} body 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceGroupsApi
     */
    public updateResourceGroup(body: ResourceGroupUpdateRequest, groupId: string, options?: any) {
        return ResourceGroupsApiFp(this.configuration).updateResourceGroup(body, groupId, options)(this.fetch, this.basePath);
    }

}
/**
 * ResourcesApi - fetch parameter creator
 * @export
 */
export const ResourcesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 對多個資源執行批次操作
         * @summary 批次操作資源
         * @param {BatchResourceOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(body: BatchResourceOperation, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling batchOperateResources.');
            }
            const localVarPath = `/api/v1/resources/batch`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BatchResourceOperation" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 創建新的資源
         * @summary 創建資源
         * @param {ResourceCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(body: ResourceCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createResource.');
            }
            const localVarPath = `/api/v1/resources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResourceCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除資源
         * @summary 刪除資源
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(resourceId: string, options: any = {}): FetchArgs {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling deleteResource.');
            }
            const localVarPath = `/api/v1/resources/{resourceId}/metrics`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定資源的詳細資訊
         * @summary 獲取資源詳情
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(resourceId: string, options: any = {}): FetchArgs {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResource.');
            }
            const localVarPath = `/api/v1/resources/{resourceId}`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取指定資源在一段時間內的歷史指標數據，用於繪製趨勢圖。
         * @summary 獲取資源歷史指標
         * @param {string} resourceId 資源 ID
         * @param {string} metric 要查詢的指標名稱 (e.g., cpu_usage)
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceMetricsHistory(resourceId: string, metric: string, period?: string, options: any = {}): FetchArgs {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling getResourceMetricsHistory.');
            }
            // verify required parameter 'metric' is not null or undefined
            if (metric === null || metric === undefined) {
                throw new RequiredError('metric','Required parameter metric was null or undefined when calling getResourceMetricsHistory.');
            }
            const localVarPath = `/api/v1/resources/{resourceId}/metrics`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取網段掃描任務的結果
         * @summary 獲取掃描結果
         * @param {string} taskId 掃描任務 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScanResult(taskId: string, options: any = {}): FetchArgs {
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getScanResult.');
            }
            const localVarPath = `/api/v1/resources/scan/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有資源的列表，支援分頁和過濾
         * @summary 獲取資源列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 資源狀態過濾
         * @param {string} [type] 資源類型過濾
         * @param {string} [groupId] 群組 ID 過濾
         * @param {string} [search] 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(page?: number, pageSize?: number, status?: string, type?: string, groupId?: string, search?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/resources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 掃描指定網段發現新資源
         * @summary 掃描網段
         * @param {NetworkScanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanNetwork(body: NetworkScanRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling scanNetwork.');
            }
            const localVarPath = `/api/v1/resources/scan`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkScanRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新資源資訊
         * @summary 更新資源
         * @param {ResourceUpdateRequest} body 
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(body: ResourceUpdateRequest, resourceId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateResource.');
            }
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling updateResource.');
            }
            const localVarPath = `/api/v1/resources/{resourceId}/metrics`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ResourceUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourcesApi - functional programming interface
 * @export
 */
export const ResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 對多個資源執行批次操作
         * @summary 批次操作資源
         * @param {BatchResourceOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(body: BatchResourceOperation, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BatchOperationResult> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).batchOperateResources(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 創建新的資源
         * @summary 創建資源
         * @param {ResourceCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(body: ResourceCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).createResource(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除資源
         * @summary 刪除資源
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(resourceId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).deleteResource(resourceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定資源的詳細資訊
         * @summary 獲取資源詳情
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(resourceId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).getResource(resourceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取指定資源在一段時間內的歷史指標數據，用於繪製趨勢圖。
         * @summary 獲取資源歷史指標
         * @param {string} resourceId 資源 ID
         * @param {string} metric 要查詢的指標名稱 (e.g., cpu_usage)
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceMetricsHistory(resourceId: string, metric: string, period?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TrendData> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).getResourceMetricsHistory(resourceId, metric, period, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取網段掃描任務的結果
         * @summary 獲取掃描結果
         * @param {string} taskId 掃描任務 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScanResult(taskId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ScanResult> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).getScanResult(taskId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有資源的列表，支援分頁和過濾
         * @summary 獲取資源列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 資源狀態過濾
         * @param {string} [type] 資源類型過濾
         * @param {string} [groupId] 群組 ID 過濾
         * @param {string} [search] 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(page?: number, pageSize?: number, status?: string, type?: string, groupId?: string, search?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ResourceList> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).listResources(page, pageSize, status, type, groupId, search, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 掃描指定網段發現新資源
         * @summary 掃描網段
         * @param {NetworkScanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanNetwork(body: NetworkScanRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ScanTaskResponse> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).scanNetwork(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新資源資訊
         * @summary 更新資源
         * @param {ResourceUpdateRequest} body 
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(body: ResourceUpdateRequest, resourceId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Resource> {
            const localVarFetchArgs = ResourcesApiFetchParamCreator(configuration).updateResource(body, resourceId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ResourcesApi - factory interface
 * @export
 */
export const ResourcesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 對多個資源執行批次操作
         * @summary 批次操作資源
         * @param {BatchResourceOperation} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchOperateResources(body: BatchResourceOperation, options?: any) {
            return ResourcesApiFp(configuration).batchOperateResources(body, options)(fetch, basePath);
        },
        /**
         * 創建新的資源
         * @summary 創建資源
         * @param {ResourceCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResource(body: ResourceCreateRequest, options?: any) {
            return ResourcesApiFp(configuration).createResource(body, options)(fetch, basePath);
        },
        /**
         * 刪除資源
         * @summary 刪除資源
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResource(resourceId: string, options?: any) {
            return ResourcesApiFp(configuration).deleteResource(resourceId, options)(fetch, basePath);
        },
        /**
         * 獲取特定資源的詳細資訊
         * @summary 獲取資源詳情
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResource(resourceId: string, options?: any) {
            return ResourcesApiFp(configuration).getResource(resourceId, options)(fetch, basePath);
        },
        /**
         * 獲取指定資源在一段時間內的歷史指標數據，用於繪製趨勢圖。
         * @summary 獲取資源歷史指標
         * @param {string} resourceId 資源 ID
         * @param {string} metric 要查詢的指標名稱 (e.g., cpu_usage)
         * @param {string} [period] 時間範圍
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceMetricsHistory(resourceId: string, metric: string, period?: string, options?: any) {
            return ResourcesApiFp(configuration).getResourceMetricsHistory(resourceId, metric, period, options)(fetch, basePath);
        },
        /**
         * 獲取網段掃描任務的結果
         * @summary 獲取掃描結果
         * @param {string} taskId 掃描任務 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScanResult(taskId: string, options?: any) {
            return ResourcesApiFp(configuration).getScanResult(taskId, options)(fetch, basePath);
        },
        /**
         * 獲取所有資源的列表，支援分頁和過濾
         * @summary 獲取資源列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [status] 資源狀態過濾
         * @param {string} [type] 資源類型過濾
         * @param {string} [groupId] 群組 ID 過濾
         * @param {string} [search] 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listResources(page?: number, pageSize?: number, status?: string, type?: string, groupId?: string, search?: string, options?: any) {
            return ResourcesApiFp(configuration).listResources(page, pageSize, status, type, groupId, search, options)(fetch, basePath);
        },
        /**
         * 掃描指定網段發現新資源
         * @summary 掃描網段
         * @param {NetworkScanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scanNetwork(body: NetworkScanRequest, options?: any) {
            return ResourcesApiFp(configuration).scanNetwork(body, options)(fetch, basePath);
        },
        /**
         * 更新資源資訊
         * @summary 更新資源
         * @param {ResourceUpdateRequest} body 
         * @param {string} resourceId 資源 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateResource(body: ResourceUpdateRequest, resourceId: string, options?: any) {
            return ResourcesApiFp(configuration).updateResource(body, resourceId, options)(fetch, basePath);
        },
    };
};

/**
 * ResourcesApi - interface
 * @export
 * @interface ResourcesApi
 */
export interface ResourcesApiInterface {
    /**
     * 對多個資源執行批次操作
     * @summary 批次操作資源
     * @param {BatchResourceOperation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    batchOperateResources(body: BatchResourceOperation, options?: any): Promise<BatchOperationResult>;

    /**
     * 創建新的資源
     * @summary 創建資源
     * @param {ResourceCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    createResource(body: ResourceCreateRequest, options?: any): Promise<Resource>;

    /**
     * 刪除資源
     * @summary 刪除資源
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    deleteResource(resourceId: string, options?: any): Promise<{}>;

    /**
     * 獲取特定資源的詳細資訊
     * @summary 獲取資源詳情
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    getResource(resourceId: string, options?: any): Promise<Resource>;

    /**
     * 獲取指定資源在一段時間內的歷史指標數據，用於繪製趨勢圖。
     * @summary 獲取資源歷史指標
     * @param {string} resourceId 資源 ID
     * @param {string} metric 要查詢的指標名稱 (e.g., cpu_usage)
     * @param {string} [period] 時間範圍
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    getResourceMetricsHistory(resourceId: string, metric: string, period?: string, options?: any): Promise<TrendData>;

    /**
     * 獲取網段掃描任務的結果
     * @summary 獲取掃描結果
     * @param {string} taskId 掃描任務 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    getScanResult(taskId: string, options?: any): Promise<ScanResult>;

    /**
     * 獲取所有資源的列表，支援分頁和過濾
     * @summary 獲取資源列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 資源狀態過濾
     * @param {string} [type] 資源類型過濾
     * @param {string} [groupId] 群組 ID 過濾
     * @param {string} [search] 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    listResources(page?: number, pageSize?: number, status?: string, type?: string, groupId?: string, search?: string, options?: any): Promise<ResourceList>;

    /**
     * 掃描指定網段發現新資源
     * @summary 掃描網段
     * @param {NetworkScanRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    scanNetwork(body: NetworkScanRequest, options?: any): Promise<ScanTaskResponse>;

    /**
     * 更新資源資訊
     * @summary 更新資源
     * @param {ResourceUpdateRequest} body 
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApiInterface
     */
    updateResource(body: ResourceUpdateRequest, resourceId: string, options?: any): Promise<Resource>;

}

/**
 * ResourcesApi - object-oriented interface
 * @export
 * @class ResourcesApi
 * @extends {BaseAPI}
 */
export class ResourcesApi extends BaseAPI implements ResourcesApiInterface {
    /**
     * 對多個資源執行批次操作
     * @summary 批次操作資源
     * @param {BatchResourceOperation} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public batchOperateResources(body: BatchResourceOperation, options?: any) {
        return ResourcesApiFp(this.configuration).batchOperateResources(body, options)(this.fetch, this.basePath);
    }

    /**
     * 創建新的資源
     * @summary 創建資源
     * @param {ResourceCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public createResource(body: ResourceCreateRequest, options?: any) {
        return ResourcesApiFp(this.configuration).createResource(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除資源
     * @summary 刪除資源
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public deleteResource(resourceId: string, options?: any) {
        return ResourcesApiFp(this.configuration).deleteResource(resourceId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定資源的詳細資訊
     * @summary 獲取資源詳情
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResource(resourceId: string, options?: any) {
        return ResourcesApiFp(this.configuration).getResource(resourceId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取指定資源在一段時間內的歷史指標數據，用於繪製趨勢圖。
     * @summary 獲取資源歷史指標
     * @param {string} resourceId 資源 ID
     * @param {string} metric 要查詢的指標名稱 (e.g., cpu_usage)
     * @param {string} [period] 時間範圍
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getResourceMetricsHistory(resourceId: string, metric: string, period?: string, options?: any) {
        return ResourcesApiFp(this.configuration).getResourceMetricsHistory(resourceId, metric, period, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取網段掃描任務的結果
     * @summary 獲取掃描結果
     * @param {string} taskId 掃描任務 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public getScanResult(taskId: string, options?: any) {
        return ResourcesApiFp(this.configuration).getScanResult(taskId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有資源的列表，支援分頁和過濾
     * @summary 獲取資源列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [status] 資源狀態過濾
     * @param {string} [type] 資源類型過濾
     * @param {string} [groupId] 群組 ID 過濾
     * @param {string} [search] 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public listResources(page?: number, pageSize?: number, status?: string, type?: string, groupId?: string, search?: string, options?: any) {
        return ResourcesApiFp(this.configuration).listResources(page, pageSize, status, type, groupId, search, options)(this.fetch, this.basePath);
    }

    /**
     * 掃描指定網段發現新資源
     * @summary 掃描網段
     * @param {NetworkScanRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public scanNetwork(body: NetworkScanRequest, options?: any) {
        return ResourcesApiFp(this.configuration).scanNetwork(body, options)(this.fetch, this.basePath);
    }

    /**
     * 更新資源資訊
     * @summary 更新資源
     * @param {ResourceUpdateRequest} body 
     * @param {string} resourceId 資源 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourcesApi
     */
    public updateResource(body: ResourceUpdateRequest, resourceId: string, options?: any) {
        return ResourcesApiFp(this.configuration).updateResource(body, resourceId, options)(this.fetch, this.basePath);
    }

}
/**
 * RolesApi - fetch parameter creator
 * @export
 */
export const RolesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 獲取系統中所有可用的角色及其權限描述。
         * @summary 獲取角色定義列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDefinitions(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/roles`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 獲取系統中所有可用的角色及其權限描述。
         * @summary 獲取角色定義列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDefinitions(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<RoleDefinition>> {
            const localVarFetchArgs = RolesApiFetchParamCreator(configuration).getRoleDefinitions(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 獲取系統中所有可用的角色及其權限描述。
         * @summary 獲取角色定義列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoleDefinitions(options?: any) {
            return RolesApiFp(configuration).getRoleDefinitions(options)(fetch, basePath);
        },
    };
};

/**
 * RolesApi - interface
 * @export
 * @interface RolesApi
 */
export interface RolesApiInterface {
    /**
     * 獲取系統中所有可用的角色及其權限描述。
     * @summary 獲取角色定義列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApiInterface
     */
    getRoleDefinitions(options?: any): Promise<Array<RoleDefinition>>;

}

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI implements RolesApiInterface {
    /**
     * 獲取系統中所有可用的角色及其權限描述。
     * @summary 獲取角色定義列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    public getRoleDefinitions(options?: any) {
        return RolesApiFp(this.configuration).getRoleDefinitions(options)(this.fetch, this.basePath);
    }

}
/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 在全平台範圍內搜尋各種資源與實體。
         * @summary 全局搜尋
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalSearch(q: string, options: any = {}): FetchArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling globalSearch.');
            }
            const localVarPath = `/api/v1/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 在全平台範圍內搜尋各種資源與實體。
         * @summary 全局搜尋
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalSearch(q: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SearchResultItem>> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).globalSearch(q, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 在全平台範圍內搜尋各種資源與實體。
         * @summary 全局搜尋
         * @param {string} q 搜尋關鍵字
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalSearch(q: string, options?: any) {
            return SearchApiFp(configuration).globalSearch(q, options)(fetch, basePath);
        },
    };
};

/**
 * SearchApi - interface
 * @export
 * @interface SearchApi
 */
export interface SearchApiInterface {
    /**
     * 在全平台範圍內搜尋各種資源與實體。
     * @summary 全局搜尋
     * @param {string} q 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    globalSearch(q: string, options?: any): Promise<Array<SearchResultItem>>;

}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI implements SearchApiInterface {
    /**
     * 在全平台範圍內搜尋各種資源與實體。
     * @summary 全局搜尋
     * @param {string} q 搜尋關鍵字
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public globalSearch(q: string, options?: any) {
        return SearchApiFp(this.configuration).globalSearch(q, options)(this.fetch, this.basePath);
    }

}
/**
 * SettingsApi - fetch parameter creator
 * @export
 */
export const SettingsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建新的維護時段
         * @summary 創建維護時段
         * @param {MaintenanceWindowCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMaintenanceWindow(body: MaintenanceWindowCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createMaintenanceWindow.');
            }
            const localVarPath = `/api/v1/settings/maintenance-windows`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MaintenanceWindowCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除指定的維護時段
         * @summary 刪除維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMaintenanceWindow(windowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'windowId' is not null or undefined
            if (windowId === null || windowId === undefined) {
                throw new RequiredError('windowId','Required parameter windowId was null or undefined when calling deleteMaintenanceWindow.');
            }
            const localVarPath = `/api/v1/settings/maintenance-windows/{windowId}`
                .replace(`{${"windowId"}}`, encodeURIComponent(String(windowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取指定維護時段的詳細資訊
         * @summary 獲取單一維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaintenanceWindow(windowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'windowId' is not null or undefined
            if (windowId === null || windowId === undefined) {
                throw new RequiredError('windowId','Required parameter windowId was null or undefined when calling getMaintenanceWindow.');
            }
            const localVarPath = `/api/v1/settings/maintenance-windows/{windowId}`
                .replace(`{${"windowId"}}`, encodeURIComponent(String(windowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取系統設定（需管理員權限）
         * @summary 獲取系統設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有維護時段設定
         * @summary 獲取維護時段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaintenanceWindows(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/settings/maintenance-windows`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新指定的維護時段
         * @summary 更新維護時段
         * @param {MaintenanceWindowUpdateRequest} body 
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaintenanceWindow(body: MaintenanceWindowUpdateRequest, windowId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateMaintenanceWindow.');
            }
            // verify required parameter 'windowId' is not null or undefined
            if (windowId === null || windowId === undefined) {
                throw new RequiredError('windowId','Required parameter windowId was null or undefined when calling updateMaintenanceWindow.');
            }
            const localVarPath = `/api/v1/settings/maintenance-windows/{windowId}`
                .replace(`{${"windowId"}}`, encodeURIComponent(String(windowId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MaintenanceWindowUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新系統設定（需管理員權限）
         * @summary 更新系統設定
         * @param {SystemSettings} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(body: SystemSettings, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSettings.');
            }
            const localVarPath = `/api/v1/settings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SystemSettings" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建新的維護時段
         * @summary 創建維護時段
         * @param {MaintenanceWindowCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMaintenanceWindow(body: MaintenanceWindowCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MaintenanceWindow> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).createMaintenanceWindow(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除指定的維護時段
         * @summary 刪除維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMaintenanceWindow(windowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).deleteMaintenanceWindow(windowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取指定維護時段的詳細資訊
         * @summary 獲取單一維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaintenanceWindow(windowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MaintenanceWindow> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).getMaintenanceWindow(windowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取系統設定（需管理員權限）
         * @summary 獲取系統設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemSettings> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).getSettings(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有維護時段設定
         * @summary 獲取維護時段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaintenanceWindows(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MaintenanceWindowList> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).listMaintenanceWindows(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新指定的維護時段
         * @summary 更新維護時段
         * @param {MaintenanceWindowUpdateRequest} body 
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaintenanceWindow(body: MaintenanceWindowUpdateRequest, windowId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MaintenanceWindow> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).updateMaintenanceWindow(body, windowId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新系統設定（需管理員權限）
         * @summary 更新系統設定
         * @param {SystemSettings} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(body: SystemSettings, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SettingsApiFetchParamCreator(configuration).updateSettings(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建新的維護時段
         * @summary 創建維護時段
         * @param {MaintenanceWindowCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMaintenanceWindow(body: MaintenanceWindowCreateRequest, options?: any) {
            return SettingsApiFp(configuration).createMaintenanceWindow(body, options)(fetch, basePath);
        },
        /**
         * 刪除指定的維護時段
         * @summary 刪除維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMaintenanceWindow(windowId: string, options?: any) {
            return SettingsApiFp(configuration).deleteMaintenanceWindow(windowId, options)(fetch, basePath);
        },
        /**
         * 獲取指定維護時段的詳細資訊
         * @summary 獲取單一維護時段
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaintenanceWindow(windowId: string, options?: any) {
            return SettingsApiFp(configuration).getMaintenanceWindow(windowId, options)(fetch, basePath);
        },
        /**
         * 獲取系統設定（需管理員權限）
         * @summary 獲取系統設定
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any) {
            return SettingsApiFp(configuration).getSettings(options)(fetch, basePath);
        },
        /**
         * 獲取所有維護時段設定
         * @summary 獲取維護時段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMaintenanceWindows(options?: any) {
            return SettingsApiFp(configuration).listMaintenanceWindows(options)(fetch, basePath);
        },
        /**
         * 更新指定的維護時段
         * @summary 更新維護時段
         * @param {MaintenanceWindowUpdateRequest} body 
         * @param {string} windowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMaintenanceWindow(body: MaintenanceWindowUpdateRequest, windowId: string, options?: any) {
            return SettingsApiFp(configuration).updateMaintenanceWindow(body, windowId, options)(fetch, basePath);
        },
        /**
         * 更新系統設定（需管理員權限）
         * @summary 更新系統設定
         * @param {SystemSettings} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(body: SystemSettings, options?: any) {
            return SettingsApiFp(configuration).updateSettings(body, options)(fetch, basePath);
        },
    };
};

/**
 * SettingsApi - interface
 * @export
 * @interface SettingsApi
 */
export interface SettingsApiInterface {
    /**
     * 創建新的維護時段
     * @summary 創建維護時段
     * @param {MaintenanceWindowCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    createMaintenanceWindow(body: MaintenanceWindowCreateRequest, options?: any): Promise<MaintenanceWindow>;

    /**
     * 刪除指定的維護時段
     * @summary 刪除維護時段
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    deleteMaintenanceWindow(windowId: string, options?: any): Promise<{}>;

    /**
     * 獲取指定維護時段的詳細資訊
     * @summary 獲取單一維護時段
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getMaintenanceWindow(windowId: string, options?: any): Promise<MaintenanceWindow>;

    /**
     * 獲取系統設定（需管理員權限）
     * @summary 獲取系統設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    getSettings(options?: any): Promise<SystemSettings>;

    /**
     * 獲取所有維護時段設定
     * @summary 獲取維護時段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    listMaintenanceWindows(options?: any): Promise<MaintenanceWindowList>;

    /**
     * 更新指定的維護時段
     * @summary 更新維護時段
     * @param {MaintenanceWindowUpdateRequest} body 
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    updateMaintenanceWindow(body: MaintenanceWindowUpdateRequest, windowId: string, options?: any): Promise<MaintenanceWindow>;

    /**
     * 更新系統設定（需管理員權限）
     * @summary 更新系統設定
     * @param {SystemSettings} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApiInterface
     */
    updateSettings(body: SystemSettings, options?: any): Promise<{}>;

}

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI implements SettingsApiInterface {
    /**
     * 創建新的維護時段
     * @summary 創建維護時段
     * @param {MaintenanceWindowCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public createMaintenanceWindow(body: MaintenanceWindowCreateRequest, options?: any) {
        return SettingsApiFp(this.configuration).createMaintenanceWindow(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除指定的維護時段
     * @summary 刪除維護時段
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public deleteMaintenanceWindow(windowId: string, options?: any) {
        return SettingsApiFp(this.configuration).deleteMaintenanceWindow(windowId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取指定維護時段的詳細資訊
     * @summary 獲取單一維護時段
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getMaintenanceWindow(windowId: string, options?: any) {
        return SettingsApiFp(this.configuration).getMaintenanceWindow(windowId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取系統設定（需管理員權限）
     * @summary 獲取系統設定
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public getSettings(options?: any) {
        return SettingsApiFp(this.configuration).getSettings(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有維護時段設定
     * @summary 獲取維護時段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public listMaintenanceWindows(options?: any) {
        return SettingsApiFp(this.configuration).listMaintenanceWindows(options)(this.fetch, this.basePath);
    }

    /**
     * 更新指定的維護時段
     * @summary 更新維護時段
     * @param {MaintenanceWindowUpdateRequest} body 
     * @param {string} windowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public updateMaintenanceWindow(body: MaintenanceWindowUpdateRequest, windowId: string, options?: any) {
        return SettingsApiFp(this.configuration).updateMaintenanceWindow(body, windowId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新系統設定（需管理員權限）
     * @summary 更新系統設定
     * @param {SystemSettings} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public updateSettings(body: SystemSettings, options?: any) {
        return SettingsApiFp(this.configuration).updateSettings(body, options)(this.fetch, this.basePath);
    }

}
/**
 * TeamsApi - fetch parameter creator
 * @export
 */
export const TeamsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 創建新團隊
         * @summary 創建團隊
         * @param {TeamCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(body: TeamCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createTeam.');
            }
            const localVarPath = `/api/v1/teams`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeamCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除團隊
         * @summary 刪除團隊
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(teamId: string, options: any = {}): FetchArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling deleteTeam.');
            }
            const localVarPath = `/api/v1/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定團隊的詳情
         * @summary 獲取團隊詳情
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(teamId: string, options: any = {}): FetchArgs {
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling getTeam.');
            }
            const localVarPath = `/api/v1/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有團隊
         * @summary 獲取團隊列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/teams`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增或移除團隊成員
         * @summary 管理團隊成員
         * @param {TeamIdMembersBody} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTeamMembers(body: TeamIdMembersBody, teamId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling manageTeamMembers.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling manageTeamMembers.');
            }
            const localVarPath = `/api/v1/teams/{teamId}/members`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeamIdMembersBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新團隊資訊
         * @summary 更新團隊
         * @param {TeamUpdateRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(body: TeamUpdateRequest, teamId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling updateTeam.');
            }
            const localVarPath = `/api/v1/teams/{teamId}`
                .replace(`{${"teamId"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeamUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 創建新團隊
         * @summary 創建團隊
         * @param {TeamCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(body: TeamCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Team> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).createTeam(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除團隊
         * @summary 刪除團隊
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(teamId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).deleteTeam(teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定團隊的詳情
         * @summary 獲取團隊詳情
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(teamId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Team> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).getTeam(teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有團隊
         * @summary 獲取團隊列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeamList> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).listTeams(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 新增或移除團隊成員
         * @summary 管理團隊成員
         * @param {TeamIdMembersBody} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTeamMembers(body: TeamIdMembersBody, teamId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).manageTeamMembers(body, teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新團隊資訊
         * @summary 更新團隊
         * @param {TeamUpdateRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(body: TeamUpdateRequest, teamId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Team> {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).updateTeam(body, teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 創建新團隊
         * @summary 創建團隊
         * @param {TeamCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeam(body: TeamCreateRequest, options?: any) {
            return TeamsApiFp(configuration).createTeam(body, options)(fetch, basePath);
        },
        /**
         * 刪除團隊
         * @summary 刪除團隊
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeam(teamId: string, options?: any) {
            return TeamsApiFp(configuration).deleteTeam(teamId, options)(fetch, basePath);
        },
        /**
         * 獲取特定團隊的詳情
         * @summary 獲取團隊詳情
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(teamId: string, options?: any) {
            return TeamsApiFp(configuration).getTeam(teamId, options)(fetch, basePath);
        },
        /**
         * 獲取所有團隊
         * @summary 獲取團隊列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeams(options?: any) {
            return TeamsApiFp(configuration).listTeams(options)(fetch, basePath);
        },
        /**
         * 新增或移除團隊成員
         * @summary 管理團隊成員
         * @param {TeamIdMembersBody} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manageTeamMembers(body: TeamIdMembersBody, teamId: string, options?: any) {
            return TeamsApiFp(configuration).manageTeamMembers(body, teamId, options)(fetch, basePath);
        },
        /**
         * 更新團隊資訊
         * @summary 更新團隊
         * @param {TeamUpdateRequest} body 
         * @param {string} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeam(body: TeamUpdateRequest, teamId: string, options?: any) {
            return TeamsApiFp(configuration).updateTeam(body, teamId, options)(fetch, basePath);
        },
    };
};

/**
 * TeamsApi - interface
 * @export
 * @interface TeamsApi
 */
export interface TeamsApiInterface {
    /**
     * 創建新團隊
     * @summary 創建團隊
     * @param {TeamCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    createTeam(body: TeamCreateRequest, options?: any): Promise<Team>;

    /**
     * 刪除團隊
     * @summary 刪除團隊
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    deleteTeam(teamId: string, options?: any): Promise<{}>;

    /**
     * 獲取特定團隊的詳情
     * @summary 獲取團隊詳情
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    getTeam(teamId: string, options?: any): Promise<Team>;

    /**
     * 獲取所有團隊
     * @summary 獲取團隊列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    listTeams(options?: any): Promise<TeamList>;

    /**
     * 新增或移除團隊成員
     * @summary 管理團隊成員
     * @param {TeamIdMembersBody} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    manageTeamMembers(body: TeamIdMembersBody, teamId: string, options?: any): Promise<{}>;

    /**
     * 更新團隊資訊
     * @summary 更新團隊
     * @param {TeamUpdateRequest} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiInterface
     */
    updateTeam(body: TeamUpdateRequest, teamId: string, options?: any): Promise<Team>;

}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI implements TeamsApiInterface {
    /**
     * 創建新團隊
     * @summary 創建團隊
     * @param {TeamCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public createTeam(body: TeamCreateRequest, options?: any) {
        return TeamsApiFp(this.configuration).createTeam(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除團隊
     * @summary 刪除團隊
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public deleteTeam(teamId: string, options?: any) {
        return TeamsApiFp(this.configuration).deleteTeam(teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定團隊的詳情
     * @summary 獲取團隊詳情
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(teamId: string, options?: any) {
        return TeamsApiFp(this.configuration).getTeam(teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有團隊
     * @summary 獲取團隊列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public listTeams(options?: any) {
        return TeamsApiFp(this.configuration).listTeams(options)(this.fetch, this.basePath);
    }

    /**
     * 新增或移除團隊成員
     * @summary 管理團隊成員
     * @param {TeamIdMembersBody} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public manageTeamMembers(body: TeamIdMembersBody, teamId: string, options?: any) {
        return TeamsApiFp(this.configuration).manageTeamMembers(body, teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新團隊資訊
     * @summary 更新團隊
     * @param {TeamUpdateRequest} body 
     * @param {string} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public updateTeam(body: TeamUpdateRequest, teamId: string, options?: any) {
        return TeamsApiFp(this.configuration).updateTeam(body, teamId, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 修改當前使用者的密碼
         * @summary 修改密碼
         * @param {ProfileChangepasswordBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(body: ProfileChangepasswordBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling changePassword.');
            }
            const localVarPath = `/api/v1/users/profile/change-password`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProfileChangepasswordBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 創建新使用者
         * @summary 創建使用者
         * @param {UserCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/api/v1/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 刪除使用者。 **注意**: 為了確保系統資料的完整性，如果該使用者仍被指派了告警事件或作為資源負責人，API 應返回 409 Conflict 錯誤，並在響應中告知前端有哪些關聯的任務需要先被轉移。或者，可以考慮增加一個可選的 `reassign_to_user_id` 參數來自動完成任務轉移。 
         * @summary 刪除使用者
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取當前登入使用者的個人資料
         * @summary 獲取個人資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/users/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取特定使用者的詳情
         * @summary 獲取使用者詳情
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUser.');
            }
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 獲取所有使用者
         * @summary 獲取使用者列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [role] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, pageSize?: number, role?: string, teamId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (teamId !== undefined) {
                localVarQueryParameter['team_id'] = teamId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新個人通知偏好設定
         * @summary 更新通知設定
         * @param {NotificationPreferences} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationPreferences(body: NotificationPreferences, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateNotificationPreferences.');
            }
            const localVarPath = `/api/v1/users/profile/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NotificationPreferences" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新當前登入使用者的個人資料
         * @summary 更新個人資料
         * @param {ProfileUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(body: ProfileUpdateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProfile.');
            }
            const localVarPath = `/api/v1/users/profile`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProfileUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新使用者資訊
         * @summary 更新使用者
         * @param {UserUpdateRequest} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateRequest, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUser.');
            }
            const localVarPath = `/api/v1/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserUpdateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 驗證使用者的聯絡方式（Email、SMS、LINE）
         * @summary 驗證聯絡方式
         * @param {ProfileVerifycontactBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyContact(body: ProfileVerifycontactBody, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling verifyContact.');
            }
            const localVarPath = `/api/v1/users/profile/verify-contact`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ProfileVerifycontactBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 修改當前使用者的密碼
         * @summary 修改密碼
         * @param {ProfileChangepasswordBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(body: ProfileChangepasswordBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).changePassword(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 創建新使用者
         * @summary 創建使用者
         * @param {UserCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).createUser(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 刪除使用者。 **注意**: 為了確保系統資料的完整性，如果該使用者仍被指派了告警事件或作為資源負責人，API 應返回 409 Conflict 錯誤，並在響應中告知前端有哪些關聯的任務需要先被轉移。或者，可以考慮增加一個可選的 `reassign_to_user_id` 參數來自動完成任務轉移。 
         * @summary 刪除使用者
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).deleteUser(userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取當前登入使用者的個人資料
         * @summary 獲取個人資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserProfile> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getProfile(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取特定使用者的詳情
         * @summary 獲取使用者詳情
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).getUser(userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 獲取所有使用者
         * @summary 獲取使用者列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [role] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, pageSize?: number, role?: string, teamId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserList> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).listUsers(page, pageSize, role, teamId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新個人通知偏好設定
         * @summary 更新通知設定
         * @param {NotificationPreferences} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationPreferences(body: NotificationPreferences, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).updateNotificationPreferences(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新當前登入使用者的個人資料
         * @summary 更新個人資料
         * @param {ProfileUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(body: ProfileUpdateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserProfile> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).updateProfile(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 更新使用者資訊
         * @summary 更新使用者
         * @param {UserUpdateRequest} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateRequest, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).updateUser(body, userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 驗證使用者的聯絡方式（Email、SMS、LINE）
         * @summary 驗證聯絡方式
         * @param {ProfileVerifycontactBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyContact(body: ProfileVerifycontactBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).verifyContact(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 修改當前使用者的密碼
         * @summary 修改密碼
         * @param {ProfileChangepasswordBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(body: ProfileChangepasswordBody, options?: any) {
            return UsersApiFp(configuration).changePassword(body, options)(fetch, basePath);
        },
        /**
         * 創建新使用者
         * @summary 創建使用者
         * @param {UserCreateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: UserCreateRequest, options?: any) {
            return UsersApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * 刪除使用者。 **注意**: 為了確保系統資料的完整性，如果該使用者仍被指派了告警事件或作為資源負責人，API 應返回 409 Conflict 錯誤，並在響應中告知前端有哪些關聯的任務需要先被轉移。或者，可以考慮增加一個可選的 `reassign_to_user_id` 參數來自動完成任務轉移。 
         * @summary 刪除使用者
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any) {
            return UsersApiFp(configuration).deleteUser(userId, options)(fetch, basePath);
        },
        /**
         * 獲取當前登入使用者的個人資料
         * @summary 獲取個人資料
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any) {
            return UsersApiFp(configuration).getProfile(options)(fetch, basePath);
        },
        /**
         * 獲取特定使用者的詳情
         * @summary 獲取使用者詳情
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any) {
            return UsersApiFp(configuration).getUser(userId, options)(fetch, basePath);
        },
        /**
         * 獲取所有使用者
         * @summary 獲取使用者列表
         * @param {number} [page] 頁碼（從 1 開始）
         * @param {number} [pageSize] 每頁筆數
         * @param {string} [role] 
         * @param {string} [teamId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(page?: number, pageSize?: number, role?: string, teamId?: string, options?: any) {
            return UsersApiFp(configuration).listUsers(page, pageSize, role, teamId, options)(fetch, basePath);
        },
        /**
         * 更新個人通知偏好設定
         * @summary 更新通知設定
         * @param {NotificationPreferences} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationPreferences(body: NotificationPreferences, options?: any) {
            return UsersApiFp(configuration).updateNotificationPreferences(body, options)(fetch, basePath);
        },
        /**
         * 更新當前登入使用者的個人資料
         * @summary 更新個人資料
         * @param {ProfileUpdateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile(body: ProfileUpdateRequest, options?: any) {
            return UsersApiFp(configuration).updateProfile(body, options)(fetch, basePath);
        },
        /**
         * 更新使用者資訊
         * @summary 更新使用者
         * @param {UserUpdateRequest} body 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(body: UserUpdateRequest, userId: string, options?: any) {
            return UsersApiFp(configuration).updateUser(body, userId, options)(fetch, basePath);
        },
        /**
         * 驗證使用者的聯絡方式（Email、SMS、LINE）
         * @summary 驗證聯絡方式
         * @param {ProfileVerifycontactBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyContact(body: ProfileVerifycontactBody, options?: any) {
            return UsersApiFp(configuration).verifyContact(body, options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * 修改當前使用者的密碼
     * @summary 修改密碼
     * @param {ProfileChangepasswordBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    changePassword(body: ProfileChangepasswordBody, options?: any): Promise<{}>;

    /**
     * 創建新使用者
     * @summary 創建使用者
     * @param {UserCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUser(body: UserCreateRequest, options?: any): Promise<User>;

    /**
     * 刪除使用者。 **注意**: 為了確保系統資料的完整性，如果該使用者仍被指派了告警事件或作為資源負責人，API 應返回 409 Conflict 錯誤，並在響應中告知前端有哪些關聯的任務需要先被轉移。或者，可以考慮增加一個可選的 `reassign_to_user_id` 參數來自動完成任務轉移。 
     * @summary 刪除使用者
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUser(userId: string, options?: any): Promise<{}>;

    /**
     * 獲取當前登入使用者的個人資料
     * @summary 獲取個人資料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getProfile(options?: any): Promise<UserProfile>;

    /**
     * 獲取特定使用者的詳情
     * @summary 獲取使用者詳情
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUser(userId: string, options?: any): Promise<User>;

    /**
     * 獲取所有使用者
     * @summary 獲取使用者列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [role] 
     * @param {string} [teamId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    listUsers(page?: number, pageSize?: number, role?: string, teamId?: string, options?: any): Promise<UserList>;

    /**
     * 更新個人通知偏好設定
     * @summary 更新通知設定
     * @param {NotificationPreferences} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateNotificationPreferences(body: NotificationPreferences, options?: any): Promise<{}>;

    /**
     * 更新當前登入使用者的個人資料
     * @summary 更新個人資料
     * @param {ProfileUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateProfile(body: ProfileUpdateRequest, options?: any): Promise<UserProfile>;

    /**
     * 更新使用者資訊
     * @summary 更新使用者
     * @param {UserUpdateRequest} body 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUser(body: UserUpdateRequest, userId: string, options?: any): Promise<User>;

    /**
     * 驗證使用者的聯絡方式（Email、SMS、LINE）
     * @summary 驗證聯絡方式
     * @param {ProfileVerifycontactBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    verifyContact(body: ProfileVerifycontactBody, options?: any): Promise<{}>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * 修改當前使用者的密碼
     * @summary 修改密碼
     * @param {ProfileChangepasswordBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changePassword(body: ProfileChangepasswordBody, options?: any) {
        return UsersApiFp(this.configuration).changePassword(body, options)(this.fetch, this.basePath);
    }

    /**
     * 創建新使用者
     * @summary 創建使用者
     * @param {UserCreateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(body: UserCreateRequest, options?: any) {
        return UsersApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    }

    /**
     * 刪除使用者。 **注意**: 為了確保系統資料的完整性，如果該使用者仍被指派了告警事件或作為資源負責人，API 應返回 409 Conflict 錯誤，並在響應中告知前端有哪些關聯的任務需要先被轉移。或者，可以考慮增加一個可選的 `reassign_to_user_id` 參數來自動完成任務轉移。 
     * @summary 刪除使用者
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取當前登入使用者的個人資料
     * @summary 獲取個人資料
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getProfile(options?: any) {
        return UsersApiFp(this.configuration).getProfile(options)(this.fetch, this.basePath);
    }

    /**
     * 獲取特定使用者的詳情
     * @summary 獲取使用者詳情
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(userId, options)(this.fetch, this.basePath);
    }

    /**
     * 獲取所有使用者
     * @summary 獲取使用者列表
     * @param {number} [page] 頁碼（從 1 開始）
     * @param {number} [pageSize] 每頁筆數
     * @param {string} [role] 
     * @param {string} [teamId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(page?: number, pageSize?: number, role?: string, teamId?: string, options?: any) {
        return UsersApiFp(this.configuration).listUsers(page, pageSize, role, teamId, options)(this.fetch, this.basePath);
    }

    /**
     * 更新個人通知偏好設定
     * @summary 更新通知設定
     * @param {NotificationPreferences} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateNotificationPreferences(body: NotificationPreferences, options?: any) {
        return UsersApiFp(this.configuration).updateNotificationPreferences(body, options)(this.fetch, this.basePath);
    }

    /**
     * 更新當前登入使用者的個人資料
     * @summary 更新個人資料
     * @param {ProfileUpdateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateProfile(body: ProfileUpdateRequest, options?: any) {
        return UsersApiFp(this.configuration).updateProfile(body, options)(this.fetch, this.basePath);
    }

    /**
     * 更新使用者資訊
     * @summary 更新使用者
     * @param {UserUpdateRequest} body 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(body: UserUpdateRequest, userId: string, options?: any) {
        return UsersApiFp(this.configuration).updateUser(body, userId, options)(this.fetch, this.basePath);
    }

    /**
     * 驗證使用者的聯絡方式（Email、SMS、LINE）
     * @summary 驗證聯絡方式
     * @param {ProfileVerifycontactBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public verifyContact(body: ProfileVerifycontactBody, options?: any) {
        return UsersApiFp(this.configuration).verifyContact(body, options)(this.fetch, this.basePath);
    }

}
